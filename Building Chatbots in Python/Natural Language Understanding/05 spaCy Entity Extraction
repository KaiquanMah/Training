Using spaCy's entity recognizer
In this exercise, you'll use spaCy's built-in entity recognizer to extract names, dates, and organizations from search queries. The spaCy library has been imported for you, and its English model has been loaded as nlp.
Your job is to define a function called extract_entities(), which takes in a single argument message and returns a dictionary with the included entity types as keys, and the extracted entities as values. The included entity types are contained in a list called include_entities.

#First try
# Define included_entities
include_entities = ['DATE', 'ORG', 'PERSON']

# Define extract_entities()
def extract_entities(message):
    
    #Create a dictionary called ents to hold the entities by calling dict.fromkeys() with include_entities as the sole argument.
    # Create a dict to hold the entities
    ents = dict.fromkeys(include_entities)
    
    #Create a spacy document called doc by passing the message to the nlp object.
    # Create a spacy document
    doc = nlp(message)
    
    
    #Iterate over the entities in the document (doc.ents).
    for ent.text, ent.label_ in doc.ents:
        
        #Check whether the entity's .label_ is one we are interested in. If so, assign the entity's .text attribute to the corresponding key in the ents dictionary.
        if ent.label_ in include_entities:
            # Save interesting entities
            ents[ent.label_] = ents.text
    return ents

print(extract_entities('friends called Mary who have worked at Google since 2010'))
print(extract_entities('people who graduated from MIT in 1999'))





#Second try
# Define extract_entities()
def extract_entities(message):
    
    #Create a dictionary called ents to hold the entities by calling dict.fromkeys() with include_entities as the sole argument.
    # Create a dict to hold the entities
    ents = dict.fromkeys(include_entities)
    
    #Create a spacy document called doc by passing the message to the nlp object.
    # Create a spacy document
    doc = nlp(message)
    
    
    #Iterate over the entities in the document (doc.ents).
    for ent in doc.ents:
        
        #Check whether the entity's .label_ is one we are interested in. If so, assign the entity's .text attribute to the corresponding key in the ents dictionary.
        if ent.label_ in include_entities:
            # Save interesting entities
            ent[ent.label_] = ent.text
    return ents

print(extract_entities('friends called Mary who have worked at Google since 2010'))
print(extract_entities('people who graduated from MIT in 1999'))



----------------------------------------------------
Assigning roles using spaCy's parser
In this exercise you'll use spaCy's powerful syntax parser to assign roles to the entities in your users' messages. To do this, you'll define two functions, find_parent_item() and assign_colors(). In doing so, you'll use a parse tree to assign roles, similar to how Alan did in the video.

Recall that you can access the ancestors of a word using its .ancestors attribute.


#Create a spacy document called doc by passing the message "let's see that jacket in red and some blue jeans" to the nlp object.
# Create the document
doc = nlp("let's see that jacket in red and some blue jeans")


#In the find_parent_item(word) function, iterate over the ancestors of each word until an entity_type() of "item" is found.
# Iterate over parents in parse tree until an item entity is found
def find_parent_item(word):
    # Iterate over the word's ancestors
    for parent in word.ancestors:
        # Check for an "item" entity
        if entity_type(parent) == "item":
            return parent.text
    return None


#In the assign_colors(doc) function, iterate over the doc until an entity_type of "color" is found. Then, find the parent item of this word.
# For all color entities, find their parent item
def assign_colors(doc):
    # Iterate over the document
    for word in doc:
        # Check for "color" entities
        if entity_type(word) == "color":
            # Find the parent
            item =  find_parent_item(word)
            print("item: {0} has color : {1}".format(item, word))


#Pass in the spacy document to the assign_colors() function.
# Assign the colors
assign_colors(doc) 

<script.py> output:
    item: jacket has color : red
    item: jeans has color : blue
