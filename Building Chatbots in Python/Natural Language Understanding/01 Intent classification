Intent classification with regex I
You'll begin by implementing a very simple technique to recognize intents - looking for the presence of keywords.
A dictionary, keywords, has already been defined. It has the intents "greet", "goodbye", and "thankyou" as keys, and lists of keywords as the corresponding values. For example, keywords["greet"] is set to "["hello","hi","hey"].
key=intent - value=list of keywords
The keywords dictionary:
{'goodbye': ['bye', 'farewell'], 'thankyou': ['thank', 'thx'], 'greet': ['hello', 'hi', 'hey']}


Also defined is a second dictionary, responses, indicating how the bot should respond to each of these intents. It also has a default response with the key "default".
In [1]: responses
Out[1]: 
{'default': 'default message',
 'goodbye': 'goodbye for now',
 'greet': 'Hello you! :)',
 'thankyou': 'you are very welcome'}


The function send_message(), along with the bot and user templates, have also already been defined. Your job in this exercise is to create a dictionary with the intents as keys and regex objects as values.



# Define a dictionary of patterns
patterns = {}

#Iterate over the keywords dictionary, using intent and keys as your iterator variables.
# Iterate over the keywords dictionary
for intent, keys in keywords.items():
    
    #Use '|'.join(keys) to create regular expressions to match at least one of the keywords and pass it to re.compile() to compile the regular expressions into pattern objects. Store the result as the value of the patterns dictionary.
    # Create regular expressions and compile them into pattern objects
    patterns[intent] = re.compile('|'.join(keys))
    
# Print the patterns
print(patterns)

<script.py> output:
    {'goodbye': re.compile('bye|farewell'), 'thankyou': re.compile('thank|thx'), 'greet': re.compile('hello|hi|hey')}
    
#Great work! The next step is to define a function to find the intent of a message.











Intent classification with regex II
With your patterns dictionary created, it's now time to define a function to find the intent of a message.

# Define a function to find the intent of a message
def match_intent(message):
    matched_intent = None
    
    #Iterate over the intents and patterns in the patterns dictionary using its .items() method.
    for intent, pattern in patterns.items():
        
        #Use the .search() method of pattern to look for keywords in the message.
        #If there is a match, return the corresponding intent.
        # Check if the pattern occurs in the message 
        if re.search(pattern, message):
            matched_intent = intent
    return matched_intent




#Call your match_intent() function inside respond() with message as the argument and then hit 'Submit Answer' to see how the bot responds to the provided messages.
# Define a respond function
def respond(message):
    
    # Call the match_intent function
    intent = match_intent(message)
    # Fall back to the default response
    key = "default"
    if intent in responses:
        key = intent
    return responses[key]

# Send messages
send_message("hello!")
send_message("bye byeee")
send_message("thanks very much!")

USER : hello!
BOT : Hello you! :)
USER : bye byeee
BOT : goodbye for now
USER : thanks very much!
BOT : you are very welcome
