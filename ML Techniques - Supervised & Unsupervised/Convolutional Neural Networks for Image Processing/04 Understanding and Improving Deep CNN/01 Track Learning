Plot the learning curves
During learning, the model will store the loss function evaluated in each epoch. Looking at the learning curves can tell us quite a bit about the learning process. In this exercise, you will plot the learning and validation loss curves for a model that you will train.


import matplotlib.pyplot as plt

# Train the model and store the training object
training = model.fit(train_data,
                    train_labels,
                    validation_split=0.2,
                    epochs=3,
                    batch_size=10)

# Extract the history from the training object
history = training.history

# Plot the training loss 
plt.plot(history['loss'])
# Plot the validation loss
plt.plot(history['val_loss'])

# Show the figure
plt.show()


    Train on 40 samples, validate on 10 samples
    Epoch 1/3
    
    10/40 [======>.......................] - ETA: 0s - loss: 1.0841 - acc: 0.2000
    40/40 [==============================] - 0s 7ms/step - loss: 1.0812 - acc: 0.2750 - val_loss: 1.0335 - val_acc: 0.6000
    Epoch 2/3
    
    10/40 [======>.......................] - ETA: 0s - loss: 1.0681 - acc: 0.6000
    40/40 [==============================] - 0s 417us/step - loss: 1.0383 - acc: 0.5000 - val_loss: 0.9760 - val_acc: 0.8000
    Epoch 3/3
    
    10/40 [======>.......................] - ETA: 0s - loss: 1.0373 - acc: 0.3000
    40/40 [==============================] - 0s 410us/step - loss: 0.9906 - acc: 0.5750 - val_loss: 0.9127 - val_acc: 0.8000


If you continue for many epochs, the validation loss will start going back up.











Using stored weights to predict in a test set
Model weights stored in an hdf5 file can be reused to populate an untrained model. Once the weights are loaded into this model, it behaves just like a model that has been trained to reach these weights. For example, you can use this model to make predictions from an unseen data set (e.g. test_data).


# Load the weights from file
model.load_weights('weights.hdf5')

# Predict from the first three images in the test data
model.predict(test_data[:3]) 



