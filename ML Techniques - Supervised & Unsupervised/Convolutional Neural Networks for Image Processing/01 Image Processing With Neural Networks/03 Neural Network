Build a neural network
We will use the Keras library to create neural networks and to train these neural networks to classify images. These models will all be of the Sequential type, meaning that the outputs of one layer are provided as inputs only to the next layer.

In this exercise, you will create a neural network with Dense layers, meaning that each unit in each layer is connected to all of the units in the previous layer. For example, each unit in the first layer is connected to all of the pixels in the input images. The Dense layer object receives as arguments the number of units in that layer, and the activation function for the units. For the first layer in the network, it also receives an input_shape keyword argument.

This course touches on a lot of concepts you may have forgotten, so if you ever need a quick refresher, download the Keras Cheat Sheet and keep it handy!




# Imports components from Keras
from keras.models import Sequential
from keras.layers import Dense

# Initializes a sequential model
model = Sequential()

# First layer
model.add(Dense(10, activation='relu', input_shape=(784,)))

# Second layer
model.add(Dense(10, activation='relu'))

# Output layer
model.add(Dense(3,activation='softmax'))













Compile a neural network
Once you have constructed a model in Keras, the model needs to be compiled before you can fit it to data. This means that you need to specify the optimizer that will be used to fit the model and the loss function that will be used in optimization. Optionally, you can also specify a list of metrics that the model will keep track of. For example, if you want to know the classification accuracy, you will provide the list ['accuracy'] to the metrics keyword argument.


# Compile the model
model.compile(optimizer='adam', 
           loss='categorical_crossentropy', 
           metrics=['accuracy'])
           
           
           



Fitting a neural network model to clothing data
In this exercise, you will fit the fully connected neural network that you constructed in the previous exercise to image data. The training data is provided as two variables: train_data that contains the pixel data for 50 images of the three clothing classes and train_labels, which contains one-hot encoded representations of the labels for each one of these 50 images. Transform the data into the network's expected input and then fit the model on training data and training labels.

The model you compiled in the previous exercise, and train_data and train_labels are available in your workspace.


# Reshape the data to two-dimensional array
train_data = train_data.reshape(50, 784)

# Fit the model
model.fit(train_data, train_labels, validation_split=0.2, epochs=3)




<script.py> output:
    Train on 40 samples, validate on 10 samples
    Epoch 1/3
    
    32/40 [=======================>......] - ETA: 0s - loss: 1.0043 - acc: 0.5000
    40/40 [==============================] - 0s 7ms/step - loss: 1.0061 - acc: 0.5000 - val_loss: 0.9917 - val_acc: 0.4000
    Epoch 2/3
    
    32/40 [=======================>......] - ETA: 0s - loss: 0.9580 - acc: 0.5625
    40/40 [==============================] - 0s 140us/step - loss: 0.9447 - acc: 0.6000 - val_loss: 0.9603 - val_acc: 0.4000
    Epoch 3/3
    
    32/40 [=======================>......] - ETA: 0s - loss: 0.8779 - acc: 0.5625
    40/40 [==============================] - 0s 134us/step - loss: 0.8958 - acc: 0.5500 - val_loss: 0.9242 - val_acc: 0.4000
    
    
    
    



Cross-validation for neural network evaluation
To evaluate the model, we use a separate test data-set. As in the train data, the images in the test data also need to be reshaped before they can be provided to the fully-connected network because the network expects one column per pixel in the input.

The model you fit in the previous exercise, and test_data and test_labels are available in your workspace.


# Reshape test data
test_data = test_data.reshape(10, 784)

# Evaluate the model
model.evaluate(test_data, test_labels)

<script.py> output:
    
    10/10 [==============================] - 0s 113us/step




