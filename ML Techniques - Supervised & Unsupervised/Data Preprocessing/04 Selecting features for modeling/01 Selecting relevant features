Now that you've identified redundant columns in the volunteer dataset, let's perform feature selection on the dataset to return a DataFrame of the relevant features.

# Create a list of redundant column names to drop
to_drop = ["locality", "region", "vol_requests", "created_date", "category_desc"]

# Drop those columns from the dataset
volunteer_subset = volunteer.drop(to_drop, axis=1)
#volunteer.info()
<class 'pandas.core.frame.DataFrame'>
Int64Index: 617 entries, 1 to 664
Data columns (total 16 columns):
vol_requests                 617 non-null int64
title                        617 non-null object
hits                         617 non-null int64
category_desc                617 non-null object
locality                     552 non-null object
region                       617 non-null object
postalcode                   612 non-null float64
created_date                 617 non-null datetime64[ns]
vol_requests_lognorm         617 non-null float64
month                        617 non-null int64
Education                    617 non-null uint8
Emergency Preparedness       617 non-null uint8
Environment                  617 non-null uint8
Health                       617 non-null uint8
Helping Neighbors in Need    617 non-null uint8
Strengthening Communities    617 non-null uint8
dtypes: datetime64[ns](1), float64(2), int64(3), object(4), uint8(6)
memory usage: 76.6+ KB


#volunteer.head()
# Print out the head of the new dataset
print(volunteer_subset.head())
