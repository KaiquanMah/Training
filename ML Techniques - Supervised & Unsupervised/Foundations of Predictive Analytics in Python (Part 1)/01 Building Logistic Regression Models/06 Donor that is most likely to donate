The predictions that result from the predictive model reflect how likely it is that someone is a target. For instance, assume that you constructed a model to predict whether a donor will donate more than 50 Euro for a certain campaign. If the prediction for a certain donor is 0.82, it means that there is an 82% chance that he will donate more than 50 Euro.

In this exercise you will find the donor that is most likely to donate more than 50 Euro.

Recall that you can sort a pandas dataframe df according to a certain column c using
df_sorted = df.sort(["c"])

and that you can select the first and last row of a pandas dataframe using
first_row = df.head(1)
last_row = df.tail(1)


   donor_ID  probability
0      4098     0.074964
1      2054     0.009399
2      4104     0.015417
3      4108     0.029907
4      2061     0.060150


# Sort the predictions
predictions_sorted = predictions.sort(["probability"])

# Print the row of predictions_sorted that has the donor that is most likely to donate
print(predictions_sorted.tail(1))

     donor_ID  probability
841      1867     0.000163
450      4928     0.000389
744      1608     0.000402
494      2958     0.000762
890      2007     0.000808
73       4223     0.001179
719      3595     0.001330
767      3719     0.001697
708      1516     0.001906
55       2143     0.002342
765      1665     0.003182
13       2075     0.003225
656      1380     0.003411
852      1901     0.003414
865      4000     0.003433
603      3276     0.003566
485      4989     0.003684
500      2972     0.003790
108      4297     0.003808
278      2551     0.003997
797      1740     0.004008
86        161     0.004099
473      4960     0.004340
784      3755     0.004381
406       751     0.004865
114      2257     0.005051
342       628     0.005293
138       242     0.005598
453      4931     0.005796
190      4445     0.005800
..        ...          ...
452      2882     0.115986
465       853     0.116049
758      1649     0.116270
584      1188     0.116339
119      4309     0.116596
77       2193     0.116638
788      3770     0.116694
242       428     0.117238
790      3772     0.117372
512       957     0.117460
325      2649     0.117545
566      3197     0.117594
126      4319     0.117671
892      4055     0.117728
834      1840     0.117758
688      1466     0.117803
864      1941     0.117838
78        148     0.117942
446      4918     0.117979
742      3650     0.118071
45         77     0.118126
200      4459     0.118309
400       737     0.118339
261      4561     0.118477
857      3971     0.118594
510      2997     0.118922
518      3028     0.118999
433      2847     0.119155
294      2586     0.119653
651      3413     0.119776

[904 rows x 2 columns]
