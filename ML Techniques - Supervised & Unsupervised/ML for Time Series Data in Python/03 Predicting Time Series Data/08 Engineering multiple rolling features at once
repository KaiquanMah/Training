Now that you've practiced some simple feature engineering, let's move on to something more complex. You'll calculate a collection of features for your time series data and visualize what they look like over time. This process resembles how many other time series models operate.



# Define a rolling window with Pandas, excluding the right-most datapoint of the window
prices_perc_rolling = prices_perc.rolling(20, min_periods=5, closed='right')

# Define the features you'll calculate for each window
features_to_calculate = [np.min, np.max, np.mean, np.std]

# Calculate these features for your rolling window object
features = prices_perc_rolling.aggregate(features_to_calculate)

# Plot the results
ax = features.loc[:"2011-01"].plot()
prices_perc.loc[:"2011-01"].plot(ax=ax, color='k', alpha=.2, lw=3)
ax.legend(loc=(1.01, .6))
plt.show()

Well done! In the next exercise, you will calculate the percentiles.



prices_perc
date
2010-01-04         NaN
2010-01-05         NaN
2010-01-06         NaN
2010-01-07         NaN
2010-01-08         NaN
2010-01-11         NaN
2010-01-12         NaN
2010-01-13         NaN
2010-01-14         NaN
2010-01-15         NaN
2010-01-19         NaN
2010-01-20         NaN
2010-01-21         NaN
2010-01-22         NaN
2010-01-25         NaN
2010-01-26         NaN
2010-01-27         NaN
2010-01-28         NaN
2010-01-29         NaN
2010-02-01   -0.009963
2010-02-02   -0.012187
2010-02-03   -0.004488
2010-02-04   -0.037329
2010-02-05   -0.024462
2010-02-08   -0.032162
2010-02-09   -0.035229
2010-02-10   -0.051145
2010-02-11   -0.040220
2010-02-12   -0.054214
2010-02-16   -0.020062
                ...   
2016-11-17    0.014312
2016-11-18    0.008343
2016-11-21    0.020238
2016-11-22    0.022444
2016-11-23    0.016362
2016-11-25    0.017951
2016-11-28    0.003939
2016-11-29    0.001720
2016-11-30   -0.023110
2016-12-01   -0.037062
2016-12-02    0.000389
2016-12-05   -0.002943
2016-12-06   -0.008069
2016-12-07    0.016206
2016-12-08    0.032948
2016-12-09    0.049815
2016-12-12    0.055633
2016-12-13    0.037578
2016-12-14    0.035057
2016-12-15    0.029132
2016-12-16    0.023375
2016-12-19    0.013729
2016-12-20    0.008892
2016-12-21    0.011973
2016-12-22    0.017328
2016-12-23    0.024842
2016-12-27    0.038030
2016-12-28    0.026925
2016-12-29    0.021850
2016-12-30    0.007285
Name: EBAY, Length: 1762, dtype: float64




In [8]: features
Out[8]: 
                amin      amax      mean       std
date                                              
2010-01-04       NaN       NaN       NaN       NaN
2010-01-05       NaN       NaN       NaN       NaN
2010-01-06       NaN       NaN       NaN       NaN
2010-01-07       NaN       NaN       NaN       NaN
2010-01-08       NaN       NaN       NaN       NaN
2010-01-11       NaN       NaN       NaN       NaN
2010-01-12       NaN       NaN       NaN       NaN
2010-01-13       NaN       NaN       NaN       NaN
2010-01-14       NaN       NaN       NaN       NaN
2010-01-15       NaN       NaN       NaN       NaN
2010-01-19       NaN       NaN       NaN       NaN
2010-01-20       NaN       NaN       NaN       NaN
2010-01-21       NaN       NaN       NaN       NaN
2010-01-22       NaN       NaN       NaN       NaN
2010-01-25       NaN       NaN       NaN       NaN
2010-01-26       NaN       NaN       NaN       NaN
2010-01-27       NaN       NaN       NaN       NaN
2010-01-28       NaN       NaN       NaN       NaN
2010-01-29       NaN       NaN       NaN       NaN
2010-02-01       NaN       NaN       NaN       NaN
2010-02-02       NaN       NaN       NaN       NaN
2010-02-03       NaN       NaN       NaN       NaN
2010-02-04       NaN       NaN       NaN       NaN
2010-02-05 -0.037329 -0.004488 -0.017686  0.013189
2010-02-08 -0.037329 -0.004488 -0.020099  0.013194
2010-02-09 -0.037329 -0.004488 -0.022260  0.013333
2010-02-10 -0.051145 -0.004488 -0.025871  0.016021
2010-02-11 -0.051145 -0.004488 -0.027465  0.015731
2010-02-12 -0.054214 -0.004488 -0.030140  0.017074
2010-02-16 -0.054214 -0.004488 -0.029224  0.016480
...              ...       ...       ...       ...
2016-11-17 -0.087327  0.014312 -0.053585  0.030148
2016-11-18 -0.082535  0.014312 -0.048801  0.032043
2016-11-21 -0.082535  0.020238 -0.043873  0.034730
2016-11-22 -0.082535  0.022444 -0.038775  0.036652
2016-11-23 -0.077842  0.022444 -0.033830  0.037106
2016-11-25 -0.077842  0.022444 -0.029058  0.037333
2016-11-28 -0.074540  0.022444 -0.024969  0.036169
2016-11-29 -0.072342  0.022444 -0.021156  0.034656
2016-11-30 -0.070586  0.022444 -0.018695  0.032511
2016-12-01 -0.070586  0.022444 -0.017036  0.030529
2016-12-02 -0.068448  0.022444 -0.013487  0.027997
2016-12-05 -0.053798  0.022444 -0.010212  0.024888
2016-12-06 -0.053798  0.022444 -0.008009  0.022849
2016-12-07 -0.039097  0.022444 -0.004509  0.020729
2016-12-08 -0.037975  0.032948 -0.000907  0.020662
2016-12-09 -0.037062  0.049815  0.003483  0.021673
2016-12-12 -0.037062  0.055633  0.007013  0.024121
2016-12-13 -0.037062  0.055633  0.010653  0.022872
2016-12-14 -0.037062  0.055633  0.012791  0.023064
2016-12-15 -0.037062  0.055633  0.014544  0.022898
2016-12-16 -0.037062  0.055633  0.014997  0.022982
2016-12-19 -0.037062  0.055633  0.015267  0.022932
2016-12-20 -0.037062  0.055633  0.014699  0.022943
2016-12-21 -0.037062  0.055633  0.014176  0.022876
2016-12-22 -0.037062  0.055633  0.014224  0.022882
2016-12-23 -0.037062  0.055633  0.014569  0.022993
2016-12-27 -0.037062  0.055633  0.016273  0.023423
2016-12-28 -0.037062  0.055633  0.017533  0.023276
2016-12-29 -0.037062  0.055633  0.019781  0.021225
2016-12-30 -0.008069  0.055633  0.021999  0.016837

[1762 rows x 4 columns]

