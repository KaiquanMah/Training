When you have missing data points, how can you fill them in?

In this exercise, you'll practice using different interpolation methods to fill in some missing values, visualizing the result each time. But first, you will create the function (interpolate_and_plot()) you'll use to interpolate missing data points and plot them.

A single time series has been loaded into a DataFrame called prices.





#Create a boolean mask for missing values and interpolate the missing values using the interpolation argument of the function.
# Create a function we'll use to interpolate and plot
def interpolate_and_plot(prices, interpolation):

    # Create a boolean mask for missing values
    missing_values = prices.isna()

    # Interpolate the missing values
    prices_interp = prices.interpolate(interpolation)

    # Plot the results, highlighting the interpolated values in black
    fig, ax = plt.subplots(figsize=(10, 5))
    prices_interp.plot(color='k', alpha=.6, ax=ax, legend=False)
    
    # Now plot the interpolated values on top in red
    prices_interp[missing_values].plot(ax=ax, color='r', lw=3, legend=False)
    plt.show()
    



#Interpolate using the latest non-missing value and plot the results.
#Recall that interpolate_and_plot's second input is a string specifying the kind of interpolation to use.
# Interpolate using the latest non-missing value
#Interpolation using the latest non-missing value is labelled 'zero' in Pandas.
interpolation_type = 'zero'
interpolate_and_plot(prices, interpolation_type)
#horizontal straight line



# Interpolate linearly
interpolation_type = 'linear'
interpolate_and_plot(prices, interpolation_type)
#diagonal straight line if there are differences in height




# Interpolate with a quadratic function
interpolation_type = 'quadratic'
interpolate_and_plot(prices, interpolation_type)
