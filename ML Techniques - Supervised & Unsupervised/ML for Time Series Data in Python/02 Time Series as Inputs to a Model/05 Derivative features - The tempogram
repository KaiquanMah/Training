One benefit of cleaning up your data is that it lets you compute more sophisticated features. For example, the envelope calculation you performed is a common technique in computing tempo and rhythm features. In this exercise, you'll use librosa to compute some tempo and rhythm features for heartbeat data, and fit a model once more.

Note that librosa functions tend to only operate on numpy arrays instead of DataFrames, so we'll access our Pandas data as a Numpy array with the .values attribute.



audio.items()
<generator object DataFrame.iteritems at 0x7f6718168d58>

i_audio

time
0.000000   -0.005799
0.000454   -0.010838
0.000907   -0.007528
0.001361   -0.008523
0.001814   -0.008434
0.002268   -0.008638
0.002721   -0.008823
0.003175   -0.008537
0.003628   -0.008199
0.004082   -0.009038
0.004535   -0.009953
0.004989   -0.011239
0.005442   -0.011259
0.005896   -0.010552
0.006349   -0.010596
0.006803   -0.008795
0.007256   -0.006664
0.007710   -0.004511
0.008163   -0.003473
0.008617   -0.004035
0.009070   -0.004834
0.009524   -0.003904
0.009977   -0.002220
0.010431   -0.000757
0.010884    0.001517
0.011338    0.004288
0.011791    0.005826
0.012245    0.006725
0.012698    0.006618
0.013152    0.005237
              ...   
3.986395    0.018330
3.986848    0.015435
3.987302    0.013577
3.987755    0.012610
3.988209    0.011501
3.988662    0.010989
3.989116    0.011161
3.989569    0.011357
3.990023    0.012171
3.990476    0.013340
3.990930    0.014211
3.991383    0.014916
3.991837    0.016118
3.992290    0.017137
3.992744    0.018365
3.993197    0.019597
3.993651    0.020954
3.994104    0.021858
3.994558    0.022688
3.995011    0.022813
3.995465    0.021256
3.995918    0.019673
3.996372    0.017636
3.996825    0.014977
3.997279    0.011562
3.997732    0.008344
3.998186    0.005336
3.998639    0.003226
3.999093    0.001293
3.999546   -0.000544
Name: 59, Length: 8820, dtype: float32
















# Calculate the tempo of the sounds
tempos = []
for col, i_audio in audio.items():
    tempos.append(lr.beat.tempo(i_audio.values, sr=sfreq, hop_length=2**6, aggregate=None))



tempos
[array([ 137.8125    ,  137.8125    ,  137.8125    ,  137.8125    ,
         137.8125    ,  137.8125    ,  137.8125    ,  137.8125    ,
         137.8125    ,  137.8125    ,  137.8125    ,  137.8125    ,
         137.8125    ,  137.8125    ,  137.8125    ,  137.8125    ,
         137.8125    ,  137.8125    ,  137.8125    ,  137.8125    ,
         137.8125    ,  137.8125    ,  137.8125    ,  137.8125    ,
         137.8125    ,  137.8125    ,  137.8125    ,  137.8125    ,
         137.8125    ,  137.8125    ,  129.19921875,  129.19921875,
         129.19921875,  129.19921875,  129.19921875,  129.19921875,
         129.19921875,  129.19921875,  129.19921875,  129.19921875,
         129.19921875,  129.19921875,   79.50721154,   79.50721154,
          79.50721154,   79.50721154,   79.50721154,   79.50721154,
          79.50721154,   79.50721154,   79.50721154,   79.50721154,
          79.50721154,   79.50721154,   79.50721154,   79.50721154,
          79.50721154,   79.50721154,   79.50721154,   79.50721154,
          79.50721154,   79.50721154,   79.50721154,   79.50721154,
          79.50721154,   79.50721154,   79.50721154,   79.50721154,
          79.50721154,   79.50721154,   79.50721154,   79.50721154,
          79.50721154,   79.50721154,   79.50721154,   79.50721154,
          79.50721154,   79.50721154,   79.50721154,   79.50721154,
          79.50721154,   79.50721154,   79.50721154,   79.50721154,
          79.50721154,   79.50721154,   79.50721154,   82.6875    ,
          82.6875    ,   82.6875    ,   82.6875    ,   82.6875    ,
          82.6875    ,   82.6875    ,   82.6875    ,   82.6875    ,
          82.6875    ,   82.6875    ,   82.6875    ,   82.6875    ,
          82.6875    ,   82.6875    ,   82.6875    ,   82.6875    ,
          82.6875    ,   82.6875    ,   82.6875    ,   82.6875    ,
          82.6875    ,   82.6875    ,   82.6875    ,   82.6875    ,
          82.6875    ,   82.6875    ,   82.6875    ,   82.6875    ,
          86.1328125 ,   86.1328125 ,   86.1328125 ,   86.1328125 ,
          86.1328125 ,   86.1328125 ,   86.1328125 ,   86.1328125 ,
          86.1328125 ,   86.1328125 ,   86.1328125 ,   89.87771739,
          89.87771739,   89.87771739,   89.87771739,   89.87771739,
          89.87771739,   89.87771739,   93.96306818,   93.96306818,
          93.96306818,   93.96306818]),
 array([ 137.8125    ,  137.8125    ,  137.8125    ,  137.8125    ,
         137.8125    ,  137.8125    ,  137.8125    ,  137.8125    ,
         137.8125    ,  137.8125    ,  137.8125    ,  137.8125    ,
]),
...,
 array([ 86.1328125 ,  86.1328125 ,  86.1328125 ,  86.1328125 ,
         86.1328125 ,  86.1328125 ,  82.6875    ,  82.6875    ,
         82.6875    ,  82.6875    ,  82.6875    ,  82.6875    ,
         82.6875    ,  82.6875    ,  82.6875    ,  82.6875    ,
         82.6875    ,  82.6875    ,  82.6875    ,  82.6875    ,
         82.6875    ,  82.6875    ,  82.6875    ,  82.6875    ,
         82.6875    ,  82.6875    ,  82.6875    ,  82.6875    ,
         82.6875    ,  82.6875    ,  82.6875    ,  82.6875    ,
         82.6875    ,  82.6875    ,  82.6875    ,  82.6875    ,
         82.6875    ,  82.6875    ,  82.6875    ,  82.6875    ,
         82.6875    ,  82.6875    ,  82.6875    ,  82.6875    ,
         82.6875    ,  82.6875    ,  82.6875    ,  82.6875    ,
         82.6875    ,  82.6875    ,  82.6875    ,  82.6875    ,
         82.6875    ,  82.6875    ,  82.6875    ,  82.6875    ,
         82.6875    ,  82.6875    ,  82.6875    ,  82.6875    ,
         82.6875    ,  82.6875    ,  79.50721154,  79.50721154,
         79.50721154,  79.50721154,  79.50721154,  79.50721154,
         79.50721154,  79.50721154,  79.50721154,  79.50721154,
         79.50721154,  79.50721154,  79.50721154,  79.50721154,
         79.50721154,  79.50721154,  79.50721154,  79.50721154,
         79.50721154,  79.50721154,  79.50721154,  79.50721154,
         79.50721154,  79.50721154,  79.50721154,  79.50721154,
         79.50721154,  79.50721154,  79.50721154,  79.50721154,
         79.50721154,  79.50721154,  79.50721154,  79.50721154,
         82.6875    ,  82.6875    ,  82.6875    ,  82.6875    ,
         82.6875    ,  82.6875    ,  82.6875    ,  82.6875    ,
         82.6875    ,  82.6875    ,  82.6875    ,  82.6875    ,
         82.6875    ,  82.6875    ,  82.6875    ,  82.6875    ,
         82.6875    ,  82.6875    ,  82.6875    ,  82.6875    ,
         82.6875    ,  82.6875    ,  82.6875    ,  82.6875    ,
         82.6875    ,  82.6875    ,  82.6875    ,  86.1328125 ,
         86.1328125 ,  86.1328125 ,  86.1328125 ,  86.1328125 ,
         86.1328125 ,  86.1328125 ,  86.1328125 ,  86.1328125 ,
         86.1328125 ,  89.87771739,  89.87771739,  89.87771739,
         89.87771739,  89.87771739])]












# Convert the list to an array so you can manipulate it more easily
tempos = np.array(tempos)

array([[ 137.8125    ,  137.8125    ,  137.8125    , ...,   93.96306818,
          93.96306818,   93.96306818],
       [ 137.8125    ,  137.8125    ,  137.8125    , ...,  129.19921875,
         129.19921875,  129.19921875],
       [  79.50721154,   79.50721154,   79.50721154, ...,   82.6875    ,
          82.6875    ,   82.6875    ],
       ..., 
       [ 295.3125    ,  295.3125    ,  295.3125    , ...,  108.79934211,
         108.79934211,  108.79934211],
       [  76.5625    ,   76.5625    ,   76.5625    , ...,   79.50721154,
          79.50721154,   79.50721154],
       [  86.1328125 ,   86.1328125 ,   86.1328125 , ...,   89.87771739,
          89.87771739,   89.87771739]])
          



# Calculate statistics of each tempo
tempos_mean = tempos.mean(axis=-1)
tempos_std = tempos.std(axis=-1)
tempos_max = tempos.max(axis=-1)


tempos_mean
array([  98.64481794,  117.32077206,   79.92203177,   80.01421405,
        133.11196252,   89.2640834 ,   82.98709239,   76.73320792,
         93.99811947,   83.69536079,  133.00653872,  104.39020138,
         69.76720115,   97.60421813,   59.75483536,  109.56300899,
         81.67587619,  134.2181256 ,  109.45634296,   81.11853232,
         75.89125209,  164.64986271,   96.13810742,   74.55925102,
         82.63898301,  160.26409647,   98.14036447,  138.42773438,
        114.89527948,   98.55552516,  163.31626254,   76.92525432,
        107.39774027,   71.28232759,  142.33313519,   88.19191588,
         65.32543637,   92.56132361,   82.47209681,   82.35267549,
         87.99292995,   78.24824066,   81.47031727,   72.53718844,
        125.48368566,   94.91882451,   93.01574046,   70.66855818,
         83.8359375 ,  129.19921875,  105.20836313,  131.96276651,
        140.33585258,   83.92773641,  227.35733696,  102.12449635,
         61.38821277,  198.0559507 ,   76.79722338,   82.56392231])
         
         











# Create the X and y arrays
X = np.column_stack([means, stds, maxs, tempos_mean, tempos_std, tempos_max])
y = labels.reshape([-1, 1])

# Fit the model and score on testing data
percent_score = cross_val_score(model, X, y, cv=5)
print(np.mean(percent_score))
0.483216783217
Note that your predictive power may not have gone up (because this dataset is quite small), but you now have a more rich feature representation of audio that your model can use!


