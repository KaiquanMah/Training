While you should always start by visualizing your raw data, this is often uninformative when it comes to discriminating between two classes of data points. Data is usually noisy or exhibits complex patterns that aren't discoverable by the naked eye.

Another common technique to find simple differences between two sets of data is to average across multiple instances of the same class. This may remove noise and reveal underlying patterns (or, it may not).

In this exercise, you'll average across many instances of each class of heartbeat sound.

The two DataFrames (normal and abnormal) and the time array (time) from the previous exercise are available in your workspace.


# Average across the audio files of each DataFrame
mean_normal = np.mean(normal, axis=0)
time
0.000000    0.000913
0.000454    0.000072
0.000907    0.001148
0.001361    0.000273
0.001814    0.000519
0.002268    0.003169
0.002721    0.003223
0.003175    0.003944
0.003628   -0.005855
0.004082   -0.010402
0.004535    0.000316
0.004989    0.025651
0.005442    0.043244
0.005896    0.039278
0.006349    0.003434
0.006803   -0.045328
0.007256   -0.067198
0.007710   -0.069066
0.008163   -0.045462
0.008617   -0.006171
0.009070    0.031276
0.009524    0.057861
0.009977    0.067384
0.010431    0.057417
0.010884    0.035737
0.011338    0.009419
0.011791   -0.013220
0.012245   -0.027553
0.012698   -0.034439
0.013152   -0.033164
              ...   
3.986395   -0.022036
3.986848   -0.018679
3.987302   -0.015662
3.987755   -0.013909
3.988209   -0.010033
3.988662   -0.006928
3.989116   -0.004543
3.989569   -0.002405
3.990023   -0.000252
3.990476    0.000129
3.990930    0.002992
3.991383    0.005329
3.991837    0.005896
3.992290    0.006248
3.992744    0.005293
3.993197    0.004129
3.993651    0.001989
3.994104    0.000562
3.994558   -0.002016
3.995011   -0.002244
3.995465   -0.002224
3.995918   -0.001190
3.996372   -0.001206
3.996825   -0.002609
3.997279   -0.002114
3.997732   -0.002520
3.998186   -0.001929
3.998639   -0.001512
3.999093   -0.002474
3.999546   -0.002793
Length: 8820, dtype: float32






mean_abnormal = np.mean(abnormal, axis=0)
time
0.000000   -0.018451
0.000454   -0.038726
0.000907   -0.030577
0.001361   -0.022350
0.001814   -0.007030
0.002268    0.003897
0.002721    0.010561
0.003175    0.007403
0.003628   -0.000942
0.004082   -0.011798
0.004535   -0.019696
0.004989   -0.020759
0.005442   -0.013269
0.005896    0.002165
0.006349    0.019495
0.006803    0.034642
0.007256    0.041250
0.007710    0.037868
0.008163    0.024492
0.008617    0.006305
0.009070   -0.011891
0.009524   -0.023549
0.009977   -0.025791
0.010431   -0.018468
0.010884   -0.004264
0.011338    0.012191
0.011791    0.025565
0.012245    0.031969
0.012698    0.029445
0.013152    0.020119
              ...   
3.986395    0.053627
3.986848    0.041766
3.987302    0.027218
3.987755    0.011955
3.988209   -0.001558
3.988662   -0.011772
3.989116   -0.018306
3.989569   -0.021764
3.990023   -0.022374
3.990476   -0.021784
3.990930   -0.021384
3.991383   -0.022688
3.991837   -0.026266
3.992290   -0.031309
3.992744   -0.037096
3.993197   -0.041468
3.993651   -0.043070
3.994104   -0.041533
3.994558   -0.036803
3.995011   -0.029504
3.995465   -0.021358
3.995918   -0.013734
3.996372   -0.008592
3.996825   -0.007133
3.997279   -0.008767
3.997732   -0.013441
3.998186   -0.019838
3.998639   -0.026207
3.999093   -0.030220
3.999546   -0.030118
Length: 8820, dtype: float32




# Plot each average over time
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 3), sharey=True)
ax1.plot(time, mean_normal)
ax1.set(title="Normal Data")
ax2.plot(time, mean_abnormal)
ax2.set(title="Abnormal Data")
plt.show()
