Look at the df dataframe using the .show() method and/or the .columns method, and determine whether it is best suited for "collaborative filtering", "content-based filtering", or "both".



In [1]: df.show()
+------+-------+-----------------+--------+--------+-------------+------+
|UserId|MovieId|      Movie_Title|   Genre|Language|Year_Produced|rating|
+------+-------+-----------------+--------+--------+-------------+------+
| User1|   2112|     Finding Nemo|Animated| English|         2003|     3|
| User1|   2113|   The Terminator|  Action| English|         1984|     0|
| User1|   2114|       Spinal Tap|  Satire| English|         1984|     4|
| User1|   2115|Life Is Beautiful|   Drama| Italian|         1998|     4|
| User2|   2112|     Finding Nemo|Animated| English|         2003|     4|
| User2|   2113|   The Terminator|  Action| English|         1984|     0|
| User2|   2114|       Spinal Tap|  Satire| English|         1984|     0|
| User2|   2115|Life Is Beautiful|   Drama| Italian|         1998|     4|
| User3|   2112|     Finding Nemo|Animated| English|         2003|     1|
| User3|   2113|   The Terminator|  Action| English|         1984|     2|
| User3|   2114|       Spinal Tap|  Satire| English|         1984|     1|
| User3|   2115|Life Is Beautiful|   Drama| Italian|         1998|     0|
| User4|   2112|     Finding Nemo|Animated| English|         2003|     3|
| User4|   2113|   The Terminator|  Action| English|         1984|     1|
| User4|   2114|       Spinal Tap|  Satire| English|         1984|     0|
| User4|   2115|Life Is Beautiful|   Drama| Italian|         1998|     0|
+------+-------+-----------------+--------+--------+-------------+------+


In [2]: df.columns
Out[2]: 
['UserId',
 'MovieId',
 'Movie_Title',
 'Genre',
 'Language',
 'Year_Produced',
 'rating']
 
 
 
Both collaborative and content-based filtering
Because this dataset includes descriptive tags like genre and language, as well as user ratings, it is suited for both collaborative and content-based filtering.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Implicit vs Explicit Data
Recall the differences between implicit and explicit ratings. Take a look at the df1 dataframe to understand whether the data includes implicit or explicit ratings data.

In [1]: df1.show()
+--------------------+------------------+---------+
|         Movie_Title|             Genre|Num_Views|
+--------------------+------------------+---------+
|        Finding Nemo|Animated Childrens|       12|
|           Toy Story|Animated Childrens|        6|
|            Iron Man|            Action|        1|
|     Captain America|            Action|        1|
|     The Incredibles|Animated Childrens|        9|
|              Frozen|Animated Childrens|       22|
|The Shawshank Red...|             Drama|        2|
|  Rabbit Proof Fence|             Drama|        2|
|Searching for Sug...|       Documentary|        3|
|              Powder|             Drama|        1|
|        The Fugitive|            Action|        2|
+--------------------+------------------+---------+



#Type "implicit" or "explicit" based on whether you think this data contains "implicit" ratings or "explicit" ratings. Name your response answer.
# Type "implicit" or "explicit"
answer = "implicit"

This dataset includes user behavior counts which are used as implicit ratings.














Ratings data types
Markus watches a lot of movies, including documentaries, superhero movies, classics, and dramas. Drawing on your previous experience with Spark, use the markus_ratings dataframe, which contains data on the number of times Markus has seen movies in various genres, and think about whether these are implicit or explicit ratings. Use the groupBy() method to determine which genre has the highest rating, which could likely influence what recommendations ALS would generate for Markus.


In [1]: markus_ratings.show()
+--------------------+------------------+---------+
|         Movie_Title|             Genre|Num_Views|
+--------------------+------------------+---------+
|        Finding Nemo|Animated Childrens|       12|
|           Toy Story|Animated Childrens|        6|
|            Iron Man|            Action|        1|
|     Captain America|            Action|        1|
|     The Incredibles|Animated Childrens|        9|
|              Frozen|Animated Childrens|       22|
|The Shawshank Red...|             Drama|        2|
|  Rabbit Proof Fence|             Drama|        2|
|Searching for Sug...|       Documentary|        3|
|              Powder|             Drama|        1|
|        The Fugitive|            Action|        2|
+--------------------+------------------+---------+




#Use the groupBy() method to group the markus_ratings dataframe by "Genre".
#Apply the .sum() method to get the total number of movies watched for each genre.
#Be sure to add the .show() method at the end to view the counts.
# Group the data by "Genre"
markus_ratings.groupBy("Genre").sum().show()



    +------------------+--------------+
    |             Genre|sum(Num_Views)|
    +------------------+--------------+
    |             Drama|             5|
    |       Documentary|             3|
    |            Action|             4|
    |Animated Childrens|            49|
    +------------------+--------------+


Markus seems to like animated children's movies. Or perhaps his 3 kids use his movie streaming account more than he does.
