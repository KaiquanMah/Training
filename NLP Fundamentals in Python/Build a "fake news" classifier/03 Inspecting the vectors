# To get a better idea of how the vectors work, you'll investigate them by converting them into pandas DataFrames.
# Here, you'll use the same data structures you created in the previous two exercises (count_train, count_vectorizer, tfidf_train, tfidf_vectorizer) as well as pandas, which is imported as pd.


#Create the DataFrames count_df and tfidf_df by using pd.DataFrame() and specifying the values as the first argument and the columns (or features) as the second argument.
#The values can be accessed by using the .A attribute of, respectively, count_train and tfidf_train.
#The columns can be accessed using the .get_feature_names() methods of count_vectorizer and tfidf_vectorizer.
# Create the CountVectorizer DataFrame: count_df
count_df = pd.DataFrame(count_train.A, columns=count_vectorizer.get_feature_names())

# Create the TfidfVectorizer DataFrame: tfidf_df
tfidf_df = pd.DataFrame(tfidf_train.A, columns=tfidf_vectorizer.get_feature_names())

# Print the head of count_df
print(count_df.head())
#   000  00am  0600  10  100  107  11  110  1100  12    ...      younger  \
0    0     0     0   0    0    0   0    0     0   0    ...            0   
1    0     0     0   3    0    0   0    0     0   0    ...            0   
2    0     0     0   0    0    0   0    0     0   0    ...            0   
3    0     0     0   0    0    0   0    0     0   0    ...            1   
4    0     0     0   0    0    0   0    0     0   0    ...            0   

   youth  youths  youtube  ypg  yuan  zawahiri  zeitung  zero  zerohedge  
0      0       0        0    0     0         0        0     1          0  
1      0       0        0    0     0         0        0     0          0  
2      0       0        0    0     0         0        0     0          0  
3      0       0        0    0     0         0        0     0          0  
4      0       0        0    0     0         0        0     0          0  

[5 rows x 5111 columns]


#Print the head of each DataFrame to investigate their structure.
# Print the head of tfidf_df
print(tfidf_df.head())
#   000  00am  0600        10  100  107   11  110  1100   12    ...      \
0  0.0   0.0   0.0  0.000000  0.0  0.0  0.0  0.0   0.0  0.0    ...       
1  0.0   0.0   0.0  0.105636  0.0  0.0  0.0  0.0   0.0  0.0    ...       
2  0.0   0.0   0.0  0.000000  0.0  0.0  0.0  0.0   0.0  0.0    ...       
3  0.0   0.0   0.0  0.000000  0.0  0.0  0.0  0.0   0.0  0.0    ...       
4  0.0   0.0   0.0  0.000000  0.0  0.0  0.0  0.0   0.0  0.0    ...       

    younger  youth  youths  youtube  ypg  yuan  zawahiri  zeitung      zero  \
0  0.000000    0.0     0.0      0.0  0.0   0.0       0.0      0.0  0.033579   
1  0.000000    0.0     0.0      0.0  0.0   0.0       0.0      0.0  0.000000   
2  0.000000    0.0     0.0      0.0  0.0   0.0       0.0      0.0  0.000000   
3  0.015175    0.0     0.0      0.0  0.0   0.0       0.0      0.0  0.000000   
4  0.000000    0.0     0.0      0.0  0.0   0.0       0.0      0.0  0.000000   

   zerohedge  
0        0.0  
1        0.0  
2        0.0  
3        0.0  
4        0.0  

[5 rows x 5111 columns]




#Test if the column names are the same for each DataFrame by creating a new object called difference to see the difference between the columns that count_df has from tfidf_df. Columns can be accessed using the .columns attribute of a DataFrame. Subtract the set of tfidf_df.columns from the set of count_df.columns.
# Calculate the difference in columns: difference
#countvectorizer gives int values
#tfidfvectorizer gives float values
difference = set(count_df.columns) - set(tfidf_df.columns)
print(difference)
#set()


#Test if the two DataFrames are equivalent by using the .equals() method on count_df with tfidf_df as the argument.
# Check whether the DataFrames are equal
print(count_df.equals(tfidf_df))
#False
