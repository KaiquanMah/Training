#part 1
#Stanford library with NLTK
#When using the Stanford library with NLTK, what is needed to get started?
#NLTK, the Stanford Java Libraries and some environment variables to help with integration.


#part 2
# NER with NLTK
#You're now going to have some fun with named-entity recognition! A scraped news article has been pre-loaded into your workspace. Your task is to use nltk to find the named entities in this article.
#What might the article be about, given the names you found?
#Along with nltk, sent_tokenize and word_tokenize from nltk.tokenize have been pre-imported.

# Tokenize the article into sentences: sentences
sentences = nltk.sent_tokenize(article)

#Tokenize each sentence in sentences into words using a list comprehension.
# Tokenize each sentence into words: token_sentences
token_sentences = [nltk.word_tokenize(sent) for sent in sentences]

#Inside a list comprehension, tag each tokenized sentence into parts of speech using nltk.pos_tag().
# Tag each tokenized sentence into parts of speech: pos_sentences
pos_sentences = [nltk.pos_tag(sent) for sent in token_sentences] 

 ('that', 'IN'),
  ('they', 'PRP'),
  ('pay', 'VBP'),
  ('their', 'PRP$'),
  ('taxes', 'NNS'),
  ('fairly', 'RB'),
  ('and', 'CC'),
  ('that', 'IN'),
  ('they', 'PRP'),
  ('behave', 'VBP'),
  ('responsibly', 'RB'),
  ('.', '.')]]


#Chunk each tagged sentence into named-entity chunks using nltk.ne_chunk_sents(). Along with pos_sentences, specify the additional keyword argument binary=True.
# Create the named entity chunks: chunked_sentences
chunked_sentences = nltk.ne_chunk_sents(pos_sentences,binary=True)


#Loop over each sentence and each chunk, and test whether it is a named-entity chunk by testing if it has the attribute label, and if the chunk.label() is equal to "NE". If so, print that chunk.
# Test for stems of the tree with 'NE' tags
for sent in chunked_sentences:
    for chunk in sent:
        if hasattr(chunk, "label") and chunk.label() == "NE":
            print(chunk)

(NE Uber/NNP)
(NE Beyond/NN)
(NE Apple/NNP)
(NE Uber/NNP)
(NE Uber/NNP)
(NE Travis/NNP Kalanick/NNP)
(NE Tim/NNP Cook/NNP)
(NE Apple/NNP)
(NE Silicon/NNP Valley/NNP)
(NE CEO/NNP)
(NE Yahoo/NNP)
(NE Marissa/NNP Mayer/NNP)
