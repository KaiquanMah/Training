Retrieve text embeddings using the Vertex AI API
Transform embeddings into the format required by Vertex AI Search
Create a search application with CUSTOM EMBEDDINGS

This lab serves as a guide to utilizing text-embedding-004 in Vertex AI for obtaining text embeddings. It walks you through the process of converting these embeddings into the required format for Vertex AI Search. Additionally, the lab provides detailed instructions on creating a search application that utilizes custom embeddings, ensuring a seamless integration of advanced text-based search capabilities.






====================================


Task 1. Enable API

In this section, let's enable the discovery engine API.

To enable the Discovery Engine API, follow these steps:

Type Discovery Engine API into the top search bar of the Google Cloud Console, choose the result as shown in the following image.

Click Enable.



====================================



Task 2. Open Python Notebook and Install Packages
In the Google Cloud Console, on the Navigation menu, click Vertex AI > Workbench.

Find the cloudlearningservices instance and click on the Open JupyterLab button.

The JupyterLab interface for your Workbench instance will open in a new browser tab.
https://cdn.qwiklabs.com/f6JXRYpfpZsWHKOugGcaMJcHdFxFT%2BpBTBsm7GnX1HY%3D




On the Launcher, under Notebook, click on Python 3 to open a new python notebook.

Install required packages by the running the following command in the first cell of the notebook. Either click the play play button at the top or click SHIFT+ENTER keys on your keyboard to execute the cell.
```
%pip install -q --upgrade --user google-cloud-aiplatform google-cloud-discoveryengine google-cloud-storage google-cloud-bigquery[pandas] google-cloud-bigquery-storage pandas ipywidgets

%load_ext google.cloud.bigquery
```




To use the newly installed packages in this Jupyter runtime, it is recommended to restart the runtime. Restart the kernel by running the below code snippet or clicking the refresh button restart kernel at the top, followed by clicking Restart button.
```
# Automatically restart kernel after installs so that your environment can access the new packages
import IPython

app = IPython.Application.instance()
app.kernel.do_shutdown(True)
```


Output:
kernel restart image
https://cdn.qwiklabs.com/y5Os7%2Fcsu6MIeNA8RQ2SaUUEjSShNc9cmhhFIRVUwoQ%3D





After the restart is complete, click Ok on the prompt to continute.

Run the following code snippet in the next cell. This code imports various python libraries and modules to perform tasks related to Google Cloud Platform (GCP) services, specifically related to Vertex AI, BigQuery, Cloud Storage, and Discovery Engine.
```
from typing import List
import requests
import subprocess
import time

from google.api_core.client_options import ClientOptions
from google.api_core.exceptions import GoogleAPICallError
from google.cloud import bigquery
from google.cloud import discoveryengine_v1alpha as discoveryengine
from google.cloud import storage

from tqdm import tqdm  # to show a progress bar

import vertexai
from vertexai.language_models import TextEmbeddingModel, TextEmbeddingInput

tqdm.pandas()
```




Run the below code snippet in the next cell. This code sets up project information and initializes the Vertex AI SDK for a Google Cloud Platform (GCP) project.
```
# Define project information for Vertex AI
PROJECT_ID = "qwiklabs-gcp-02-9355e20ba053"  # @param {type:"string"}
LOCATION = "us-central1"  # @param {type:"string"}

# Initialize Vertex AI SDK
vertexai.init(project=PROJECT_ID, location=LOCATION)
```









====================================




For the remaining tasks, please refer to the notebook: day3_custom_embeddings.ipynb.


Reflections:
More explanations on the code for tasks 5 and 6 would be great
It would also be good to help us understand why we scraped HTML pages when the HTML was not used to create the JSONL file and the subsequent AI application's data store.




