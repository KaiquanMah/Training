https://googlecoursera.qwiklabs.com/focuses/10714028?parent=lti_session

enable apis and services
Dialogflow API
Cloud Source Repositories API
Cloud Natural Language API


https://cloud.google.com/dialogflow/docs/
https://console.dialogflow.com
export and import>import from zip

#Add follow-up intents with input and output contexts
intents > hover over order.pizza > add follow-up intent > yes
order.pizza - yes
intents > hover over order.pizza > add follow-up intent > no
order.pizza - no

#Setup fulfillment using Cloud Functions to push order entries into Datastore
Fulfillment > inline editor > enable

json tab
dependencies > add the line below within key-value pairs stored in 'dependencies'
"@google-cloud/datastore": "^0.8.0",
Deploy

index.js tab
#add lines to work with Datastore
add the lines below after the line "process.env.DEBUG = 'dialogflow:debug';"
const Datastore = require('@google-cloud/datastore');
const datastore = new Datastore({
  projectId: 'qwiklabs-gcp-<projectid>'
});
#add the lines below to handle pizza orders after the handler functions for Welcome and Fallback intents
function order_pizza(agent) {
      var pizza_size = agent.parameters.size;
      var pizza_topping = agent.parameters.pizza_topping;
      var time = agent.parameters.time;
      const taskKey = datastore.key('order_item');
      const entity = {
        key: taskKey,
        data: {
        item_name: 'pizza',
        topping: pizza_topping,
        time: time,
        order_time: new Date().toLocaleString(),
        size: pizza_size }
       };
      return datastore.save(entity).then(() => {
                console.log(`Saved ${entity.key.name}: ${entity.data.item_name}`);
                agent.add(`Your order for ${pizza_topping} pizza has been placed! Would you like a drink with your order?`);

             });
     }
#Modify intentMap. Add an entry to handle the order.pizza mapping to the function you just added
intentMap.set('order.pizza', order_pizza);
#full intentMap
let intentMap = new Map();
intentMap.set('order.pizza', order_pizza);
intentMap.set('Default Welcome Intent', welcome);
intentMap.set('Default Fallback Intent', fallback);
agent.handleRequest(intentMap);


#deploy
deploy

#enable webhook calls
order.pizza intent > Fulfillment > Enable the webhook call for this intent
Default Welcome intent > Fulfillment > Enable the webhook call for this intent
Default Fallback intent > Fulfillment > Enable the webhook call for this intent


datastore > datastore mode > create database
test conversation in Dialogflow
check entries being entered into datastore














final index.js
// See https://github.com/dialogflow/dialogflow-fulfillment-nodejs
// for Dialogflow fulfillment library docs, samples, and to report issues
'use strict';
 
const functions = require('firebase-functions');
const {WebhookClient} = require('dialogflow-fulfillment');
const {Card, Suggestion} = require('dialogflow-fulfillment');
 
process.env.DEBUG = 'dialogflow:debug'; // enables lib debugging statements
//added in dialogflow lab2
const Datastore = require('@google-cloud/datastore');
const datastore = new Datastore({
  projectId: 'qwiklabs-gcp-00-5468a06079fc'
});
 
exports.dialogflowFirebaseFulfillment = functions.https.onRequest((request, response) => {
  const agent = new WebhookClient({ request, response });
  console.log('Dialogflow Request headers: ' + JSON.stringify(request.headers));
  console.log('Dialogflow Request body: ' + JSON.stringify(request.body));
 
  function welcome(agent) {
    agent.add(`Welcome to my agent!`);
  }
 
  function fallback(agent) {
    agent.add(`I didn't understand`);
    agent.add(`I'm sorry, can you try again?`);
  }

  
  //added in dialogflow lab2
  function order_pizza(agent) {
      var pizza_size = agent.parameters.size;
      var pizza_topping = agent.parameters.pizza_topping;
      var time = agent.parameters.time;
      const taskKey = datastore.key('order_item');
      const entity = {
        key: taskKey,
        data: {
        item_name: 'pizza',
        topping: pizza_topping,
        time: time,
        order_time: new Date().toLocaleString(),
        size: pizza_size }
       };
      return datastore.save(entity).then(() => {
                console.log(`Saved ${entity.key.name}: ${entity.data.item_name}`);
                agent.add(`Your order for ${pizza_topping} pizza has been placed! Would you like a drink with your order?`);

             });
     }
  
  // // Uncomment and edit to make your own intent handler
  // // uncomment `intentMap.set('your intent name here', yourFunctionHandler);`
  // // below to get this function to be run when a Dialogflow intent is matched
  // function yourFunctionHandler(agent) {
  //   agent.add(`This message is from Dialogflow's Cloud Functions for Firebase editor!`);
  //   agent.add(new Card({
  //       title: `Title: this is a card title`,
  //       imageUrl: 'https://developers.google.com/actions/images/badges/XPM_BADGING_GoogleAssistant_VER.png',
  //       text: `This is the body text of a card.  You can even use line\n  breaks and emoji! üíÅ`,
  //       buttonText: 'This is a button',
  //       buttonUrl: 'https://assistant.google.com/'
  //     })
  //   );
  //   agent.add(new Suggestion(`Quick Reply`));
  //   agent.add(new Suggestion(`Suggestion`));
  //   agent.setContext({ name: 'weather', lifespan: 2, parameters: { city: 'Rome' }});
  // }

  // // Uncomment and edit to make your own Google Assistant intent handler
  // // uncomment `intentMap.set('your intent name here', googleAssistantHandler);`
  // // below to get this function to be run when a Dialogflow intent is matched
  // function googleAssistantHandler(agent) {
  //   let conv = agent.conv(); // Get Actions on Google library conv instance
  //   conv.ask('Hello from the Actions on Google client library!') // Use Actions on Google library
  //   agent.add(conv); // Add Actions on Google library responses to your agent's response
  // }
  // // See https://github.com/dialogflow/fulfillment-actions-library-nodejs
  // // for a complete Dialogflow fulfillment library Actions on Google client library v2 integration sample

  // Run the proper function handler based on the matched Dialogflow intent name
  let intentMap = new Map();
  //added in dialogflow lab2
  intentMap.set('order.pizza', order_pizza);
  intentMap.set('Default Welcome Intent', welcome);
  intentMap.set('Default Fallback Intent', fallback);
  // intentMap.set('your intent name here', yourFunctionHandler);
  // intentMap.set('your intent name here', googleAssistantHandler);
  agent.handleRequest(intentMap);
});








final package.json
{
  "name": "dialogflowFirebaseFulfillment",
  "description": "This is the default fulfillment for a Dialogflow agents using Cloud Functions for Firebase",
  "version": "0.0.1",
  "private": true,
  "license": "Apache Version 2.0",
  "author": "Google Inc.",
  "engines": {
    "node": "10"
  },
  "scripts": {
    "start": "firebase serve --only functions:dialogflowFirebaseFulfillment",
    "deploy": "firebase deploy --only functions:dialogflowFirebaseFulfillment"
  },
  "dependencies": {
    "@google-cloud/datastore": "^0.8.0",
    "actions-on-google": "^2.2.0",
    "firebase-admin": "^5.13.1",
    "firebase-functions": "^2.0.2",
    "dialogflow": "^0.6.0",
    "dialogflow-fulfillment": "^0.5.0"
  }
}

