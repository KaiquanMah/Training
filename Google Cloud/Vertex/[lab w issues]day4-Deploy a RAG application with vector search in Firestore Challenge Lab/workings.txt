GENAI069
Deploy a RAG application with vector search in Firestore: Challenge Lab
https://partner.skills.google/paths/2310/course_templates/1289/labs/531796


This lab tests your ability to develop a real-world Generative AI Q&A solution using a RAG framework. You will use Firestore as a vector database and deploy a Flask app as a user interface to query a food safety knowledge base.

This lab uses the following technologies and Google Cloud services:
Vertex AI
Vertex AI Colab Enterprise
Vertex AI Embeddings API
Gemini 2.0 Flash
Cloud Firestore

In this challenge lab, you will demonstrate your ability to load a text document and split it into chunks, generate embeddings for each chunk, store the text chunks and their embeddings, conduct vector search to return similar documents to a query document, complete a RAG framework by having Gemini generate a response based on a context of similar documents to a query.






Your Challenge
You work for Cymbal Shops, a chain offering prepared meals to-go in busy downtown areas.

The company's employees in the New York area needs to meet the New York City Department of Health and Mental Hygiene's food safety guidelines as provided in this Food Protection Training Manual.
https://www.nyc.gov/assets/doh/downloads/pdf/rii/fpc-manual.pdf

To make it easier for them, your manager has asked you to prepare an application where employees can ask questions and a bot will return the answers based only on what is found in this document.


Additional reading
[2025 Jul] https://www.youtube.com/watch?v=53AsmGBymz8&t=2s
[2025 Jun] https://github.com/NicholasAT925/RAG-app-with-vector-search-in-Firestore/blob/main/Solution.pdf
[2024] https://github.com/saikat-rakshit-prof/GCP-L400/blob/main/Deploy%20a%20RAG%20application%20with%20vector%20search%20in%20Firestore_%20Challenge%20Lab%20L400.pdf










===============================


Task 1. Create a Colab Enterprise Notebook
In this section, you will set up a Colab Enterprise notebook environment in the Google Cloud Console.

In the Google Cloud Console, navigate to Vertex AI > Colab Enterprise.

When prompted to enable APIs, click ENABLE.

Within the Colab Enterprise panel in the console, click on Create Notebook. Rename the notebook to cymbal_ingest_to_vector_database.ipynb.

Paste the following code into the top cell of the notebook and run the cell.
```
!pip install --quiet --upgrade google-cloud-logging google_cloud_firestore google_cloud_aiplatform langchain langchain-google-vertexai langchain_community langchain_experimental pymupdf
```



After the cell completes running, indicated by a checkmark to the left of the cell, the packages should be installed. To use them, restart the runtime.

Import the following packages by running the following command:
```
import vertexai
import logging
import google.cloud.logging
from vertexai.language_models import TextEmbeddingModel
from vertexai.generative_models import GenerativeModel

import pickle
from IPython.display import display, Markdown

from langchain_google_vertexai import VertexAIEmbeddings
from langchain_community.document_loaders import PyMuPDFLoader
from langchain_experimental.text_splitter import SemanticChunker

from google.cloud import firestore
from google.cloud.firestore_v1.vector import Vector
from google.cloud.firestore_v1.base_vector_query import DistanceMeasure
```



Next, initialize Vertex AI with your project-id qwiklabs-gcp-04-937bce1e7c69 and a location of us-central1.

Populate a variable named embedding_model with an instance of the langchain_google_vertexai class VertexAIEmbeddings. Pass it a parameter model_name set to the text embedding model version of text-embedding-005. You will use this LangChain class for your embedding model so that you can use a LangChain semantic chunker to chunk your dataset.


https://python.langchain.com/docs/integrations/text_embedding/google_vertex_ai_palm/
https://cloud.google.com/vertex-ai/generative-ai/docs/learn/models#models





===============================











===============================











===============================











===============================











===============================











===============================


Reflections
- Support was unable to help because this was a 'challenge lab'
- It seems that other learners were able to complete the lab without issues - not sure how this is possible with Task 1 blocking the rest of the lab
- Even Gemini was unable to fix the library issues in Task 1
- Please provide the requirements.txt from a working version of the lab, for learners to pip install the required libraries and their versions from
- If the environment is the same, how did other learners clear task 1? What sort of workarounds or fixes did other learners use that are not in the current lab instructions?

