https://googlecoursera.qwiklabs.com/focuses/11941130?parent=lti_session
create a Google Kubernetes Engine cluster containing several containers, each containing a web server
place a load balancer in front of the cluster and view its contents


In this lab, you learn how to perform the following tasks:
Provision a Kubernetes cluster using Kubernetes Engine.
Deploy and manage Docker containers using kubectl.


Task 1: Sign in to the Google Cloud Platform (GCP) Console
GCP Project ID/name         qwiklabs-gcp-03-00dca398dff3
region                      us-central1
zone                        us-central1-a






Task 2: Confirm that needed APIs are enabled
Kubernetes Engine API
Container Registry API







Task 3: Start a Kubernetes Engine cluster
In GCP console, on the top right toolbar, click the Open Cloud Shell button.
Click Continue. 


For convenience, place the zone that Qwiklabs assigned you to into an environment variable called MY_ZONE. At the Cloud Shell prompt, type this partial command:
export MY_ZONE=
followed by the zone that Qwiklabs assigned to you. Your complete command will look similar to this:
export MY_ZONE=us-central1-a



Start a Kubernetes cluster managed by Kubernetes Engine. Name the cluster webfrontend and configure it to run 2 nodes:
gcloud container clusters create webfrontend --zone $MY_ZONE --num-nodes 2




Welcome to Cloud Shell! Type "help" to get started.
Your Cloud Platform project in this session is set to qwiklabs-gcp-03-00dca398dff3.
Use “gcloud config set project [PROJECT_ID]” to change to a different project.
student_03_1a1723d29cf2@cloudshell:~ (qwiklabs-gcp-03-00dca398dff3)$ export MY_ZONE=us-central1-a
student_03_1a1723d29cf2@cloudshell:~ (qwiklabs-gcp-03-00dca398dff3)$ gcloud container clusters create webfrontend --zone $MY_ZONE --num-nodes 2
WARNING: Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-aut
hentication
WARNING: Currently VPC-native is not the default mode during cluster creation. In the future, this will become the default mode and can be disabled using `--no-enable-ip-alias` flag. Use `--[no-]enable-ip-alias` flag to suppress this warning.
WARNING: Newly created clusters and node-pools will have node auto-upgrade enabled by default. This can be disabled using the `--no-enable-autoupgrade` flag.
WARNING: Starting with version 1.18, clusters will have shielded GKE nodes by default.
WARNING: Your Pod address range (`--cluster-ipv4-cidr`) can accommodate at most 1008 node(s).
Creating cluster webfrontend in us-central1-a... Cluster is being health-checked (master is healthy)...done.
Created [https://container.googleapis.com/v1/projects/qwiklabs-gcp-03-00dca398dff3/zones/us-central1-a/clusters/webfrontend].
To inspect the contents of your cluster, go to: https://console.cloud.google.com/kubernetes/workload_/gcloud/us-central1-a/webfrontend?project=qwiklabs-gcp-03-00dca398dff3
kubeconfig entry generated for webfrontend.
NAME         LOCATION       MASTER_VERSION   MASTER_IP        MACHINE_TYPE   NODE_VERSION     NUM_NODES  STATUS
webfrontend  us-central1-a  1.16.13-gke.401  104.198.184.179  n1-standard-1  1.16.13-gke.401  2          RUNNING





https://container.googleapis.com/v1/projects/qwiklabs-gcp-03-00dca398dff3/zones/us-central1-a/clusters/webfrontend
{
  "error": {
    "code": 401,
    "message": "Request is missing required authentication credential. Expected OAuth 2 access token, login cookie or other valid authentication credential. See https://developers.google.com/identity/sign-in/web/devconsole-project.",
    "status": "UNAUTHENTICATED"
  }
}




https://console.cloud.google.com/kubernetes/workload_/gcloud/us-central1-a/webfrontend?project=qwiklabs-gcp-03-00dca398dff3
Kubernetes engine>workloads     
cluster:webfrontend, location:us-central1-a

Name                 Status                 Type          Pods          Namespace             Cluster
event-exporter-gke	 OK	                  Deployment	    1/1	        kube-system	        webfrontend	
fluentd-gke	         Pods have warnings	  Daemon Set	    0/2	        kube-system	        webfrontend	
fluentd-gke-scaler	 OK	                  Deployment	    1/1	        kube-system	        webfrontend	
gke-metrics-agent	   Pods are pending      Daemon Set	    1/2	        kube-system	webfrontend	
gke-metrics-agent-windows	 DaemonSet has no nodes selected	Daemon Set	0/0	        kube-system	        webfrontend	
kube-dns	 Does not have minimum availability	Deployment	1/2	        kube-system	        webfrontend	
kube-dns-autoscaler	 OK	Deployment	1/1	        kube-system	        webfrontend	
kube-proxy	 DaemonSet has no nodes selected	Daemon Set	0/0	        kube-system	        webfrontend	
kube-proxy-gke-webfrontend-default-pool-06324e43-8mfm	 Running	Pod	1/1	        kube-system	        webfrontend	
kube-proxy-gke-webfrontend-default-pool-06324e43-xgwq	 Running	Pod	1/1	        kube-system	        webfrontend	
l7-default-backend	 Does not have minimum availability	Deployment	0/1	        kube-system	        webfrontend	
metadata-proxy-v0.1	 DaemonSet has no nodes selected	Daemon Set	0/0	        kube-system	        webfrontend	
metrics-server-v0.3.6	 Does not have minimum availability	Deployment	0/1	        kube-system	        webfrontend	
nvidia-gpu-device-plugin	 DaemonSet has no nodes selected	Daemon Set	0/0	        kube-system	        webfrontend	
prometheus-to-sd	 OK	Daemon Set	2/2	        kube-system	        webfrontend	
stackdriver-metadata-agent-cluster-level	 0 of 1 updated replicas available - Pods have warnings     Deployment	1/1	        kube-system	        webfrontend	







It takes several minutes to create a cluster as Kubernetes Engine provisions virtual machines for you.
After the cluster is created, check your installed version of Kubernetes using the kubectl version command:
kubectl version

student_03_1a1723d29cf2@cloudshell:~ (qwiklabs-gcp-03-00dca398dff3)$ kubectl version
Client Version: version.Info{Major:"1", Minor:"19", GitVersion:"v1.19.2", GitCommit:"f5743093fd1c663cb0cbc89748f730662345d44d", GitTreeState:"clean", BuildDate:"2020-09-16T13:41:02Z", GoVersion:"go1.15", Compiler:"gc", Platform:"linux/amd64"}
Server Version: version.Info{Major:"1", Minor:"16+", GitVersion:"v1.16.13-gke.401", GitCommit:"eb94c181eea5290e9da1238db02cfef263542f5f", GitTreeState:"clean", BuildDate:"2020-09-09T00:57:35Z", GoVersion:"go1.13.9b4", Compiler:"gc", Platform:"linux/amd64"}







The gcloud container clusters create command automatically authenticated kubectl for you.
View your running nodes in the GCP Console. On the Navigation menu (Navigation menu), click Compute Engine > VM Instances.
Your Kubernetes cluster is now ready for use.

Name	                                      Zone	              Recommendation	      In use by	                                        Internal IP	          External IP	        Connect	
gke-webfrontend-default-pool-06324e43-8mfm	us-central1-a	                            gke-webfrontend-default-pool-06324e43-grp	        10.128.0.2 (nic0)	    104.197.29.143	 	  SSH
 gke-webfrontend-default-pool-06324e43-xgwq	us-central1-a	                            gke-webfrontend-default-pool-06324e43-grp	        10.128.0.3 (nic0)	    34.66.133.141	 	    SSH

















Task 4: Run and deploy a container
From your Cloud Shell prompt, launch a single instance of the nginx container. (Nginx is a popular web server.)
kubectl create deploy nginx --image=nginx:1.17.10

student_03_1a1723d29cf2@cloudshell:~ (qwiklabs-gcp-03-00dca398dff3)$ kubectl create deploy nginx --image=nginx:1.17.10
deployment.apps/nginx created




In Kubernetes, all containers run in pods. 
This use of the kubectl create command caused Kubernetes to create a deployment consisting of a single pod containing the nginx container. 
A Kubernetes deployment keeps a given number of pods up and running even in the event of failures among the nodes on which they run. 
In this command, you launched the default number of pods, which is 1.
Note: If you see any deprecation warning about future version you can simply ignore it for now and can proceed further.

View the pod running the nginx container:
kubectl get pods

student_03_1a1723d29cf2@cloudshell:~ (qwiklabs-gcp-03-00dca398dff3)$ kubectl get pods
NAME                     READY   STATUS    RESTARTS   AGE
nginx-5df596bbf9-8lt54   1/1     Running   0          2m18s







Expose the nginx container to the Internet:
kubectl expose deployment nginx --port 80 --type LoadBalancer

student_03_1a1723d29cf2@cloudshell:~ (qwiklabs-gcp-03-00dca398dff3)$ kubectl expose deployment nginx --port 80 --type LoadBalancer
service/nginx exposed





Kubernetes created a service and an external load balancer with a public IP address attached to it. 
The IP address remains the same for the life of the service. 
Any network traffic to that public IP address is routed to pods behind the service: in this case, the nginx pod.
View the new service:
kubectl get services

student_03_1a1723d29cf2@cloudshell:~ (qwiklabs-gcp-03-00dca398dff3)$ kubectl get services
NAME         TYPE           CLUSTER-IP      EXTERNAL-IP      PORT(S)        AGE
kubernetes   ClusterIP      10.51.240.1     <none>           443/TCP        14m
nginx        LoadBalancer   10.51.241.230   35.226.193.120   80:32091/TCP   76s



Loadbalancer EXTERNAL-IP - 35.226.193.120
Welcome to nginx!
If you see this page, the nginx web server is successfully installed and working. Further configuration is required.
For online documentation and support please refer to nginx.org.
Commercial support is available at nginx.com.
Thank you for using nginx.









You can use the displayed external IP address to test and contact the nginx container remotely.
It may take a few seconds before the External-IP field is populated for your service. This is normal. Just re-run the kubectl get services command every few seconds until the field is populated.
Open a new web browser tab and paste your cluster's external IP address into the address bar. The default home page of the Nginx browser is displayed.



Scale up the number of pods running on your service:
kubectl scale deployment nginx --replicas 3

student_03_1a1723d29cf2@cloudshell:~ (qwiklabs-gcp-03-00dca398dff3)$ kubectl scale deployment nginx --replicas 3
deployment.apps/nginx scaled







Scaling up a deployment is useful when you want to increase available resources for an application that is becoming more popular.
Confirm that Kubernetes has updated the number of pods:
kubectl get pods

student_03_1a1723d29cf2@cloudshell:~ (qwiklabs-gcp-03-00dca398dff3)$ kubectl get pods
NAME                     READY   STATUS    RESTARTS   AGE
nginx-5df596bbf9-8lt54   1/1     Running   0          10m
nginx-5df596bbf9-cvrt7   1/1     Running   0          24s
nginx-5df596bbf9-jlb7t   1/1     Running   0          24s





Confirm that your external IP address has not changed:
kubectl get services

student_03_1a1723d29cf2@cloudshell:~ (qwiklabs-gcp-03-00dca398dff3)$ kubectl get services
NAME         TYPE           CLUSTER-IP      EXTERNAL-IP      PORT(S)        AGE
kubernetes   ClusterIP      10.51.240.1     <none>           443/TCP        20m
nginx        LoadBalancer   10.51.241.230   35.226.193.120   80:32091/TCP   7m58s






Return to the web browser tab in which you viewed your cluster's external IP address. Refresh the page to confirm that the nginx web server is still responding.



















student_04_9e01f0ca6370@cloudshell:~ (qwiklabs-gcp-01-3e3c6747d88a)$ kubectl --help
kubectl controls the Kubernetes cluster manager.

 Find more information at:
https://kubernetes.io/docs/reference/kubectl/overview/

Basic Commands (Beginner):
  create        Create a resource from a file or from stdin
  expose        Take a replication controller, service, deployment or pod and
expose it as a new Kubernetes service
  run           Run a particular image on the cluster
  set           Set specific features on objects

Basic Commands (Intermediate):
  explain       Get documentation for a resource
  get           Display one or many resources
  edit          Edit a resource on the server
  delete        Delete resources by file names, stdin, resources and names, or
by resources and label selector

Deploy Commands:
  rollout       Manage the rollout of a resource
  scale         Set a new size for a deployment, replica set, or replication
controller
  autoscale     Auto-scale a deployment, replica set, stateful set, or
replication controller

Cluster Management Commands:
  certificate   Modify certificate resources.
  cluster-info  Display cluster information
  top           Display resource (CPU/memory) usage
  cordon        Mark node as unschedulable
  uncordon      Mark node as schedulable
  drain         Drain node in preparation for maintenance
  taint         Update the taints on one or more nodes

Troubleshooting and Debugging Commands:
  describe      Show details of a specific resource or group of resources
  logs          Print the logs for a container in a pod
  attach        Attach to a running container
  exec          Execute a command in a container
  port-forward  Forward one or more local ports to a pod
  proxy         Run a proxy to the Kubernetes API server
  cp            Copy files and directories to and from containers
  auth          Inspect authorization
  debug         Create debugging sessions for troubleshooting workloads and
nodes

Advanced Commands:
  diff          Diff the live version against a would-be applied version
  apply         Apply a configuration to a resource by file name or stdin
  patch         Update fields of a resource
  replace       Replace a resource by file name or stdin
  wait          Experimental: Wait for a specific condition on one or many
resources
  kustomize     Build a kustomization target from a directory or URL.

Settings Commands:
  label         Update the labels on a resource
  annotate      Update the annotations on a resource
  completion    Output shell completion code for the specified shell (bash, zsh
or fish)

Other Commands:
  alpha         Commands for features in alpha
  api-resources Print the supported API resources on the server
  api-versions  Print the supported API versions on the server, in the form of
"group/version"
  config        Modify kubeconfig files
  plugin        Provides utilities for interacting with plugins
  version       Print the client and server version information

Usage:
  kubectl [flags] [options]

Use "kubectl <command> --help" for more information about a given command.
Use "kubectl options" for a list of global command-line options (applies to all













student_04_9e01f0ca6370@cloudshell:~ (qwiklabs-gcp-01-3e3c6747d88a)$ kubectl options
The following options can be passed to any command:

      --add-dir-header=false: If true, adds the file directory to the header of
the log messages (DEPRECATED: will be removed in a future release, see
https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/2845-deprecate-klog-specific-flags-in-k8s-components)
      --alsologtostderr=false: log to standard error as well as files
(DEPRECATED: will be removed in a future release, see
https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/2845-deprecate-klog-specific-flags-in-k8s-components)
      --as='': Username to impersonate for the operation. User could be a
regular user or a service account in a namespace.
      --as-group=[]: Group to impersonate for the operation, this flag can be
repeated to specify multiple groups.
      --as-uid='': UID to impersonate for the operation.
      --cache-dir='/home/student_04_9e01f0ca6370/.kube/cache': Default cache
directory
      --certificate-authority='': Path to a cert file for the certificate
authority
      --client-certificate='': Path to a client certificate file for TLS
      --client-key='': Path to a client key file for TLS
      --cluster='': The name of the kubeconfig cluster to use
      --context='': The name of the kubeconfig context to use
      --insecure-skip-tls-verify=false: If true, the server's certificate will
not be checked for validity. This will make your HTTPS connections insecure
      --kubeconfig='': Path to the kubeconfig file to use for CLI requests.
      --log-backtrace-at=:0: when logging hits line file:N, emit a stack trace
(DEPRECATED: will be removed in a future release, see
https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/2845-deprecate-klog-specific-flags-in-k8s-components)
      --log-dir='': If non-empty, write log files in this directory (DEPRECATED:
will be removed in a future release, see
https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/2845-deprecate-klog-specific-flags-in-k8s-components)
      --log-file='': If non-empty, use this log file (DEPRECATED: will be
removed in a future release, see
https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/2845-deprecate-klog-specific-flags-in-k8s-components)
      --log-file-max-size=1800: Defines the maximum size a log file can grow to.
Unit is megabytes. If the value is 0, the maximum file size is unlimited.
(DEPRECATED: will be removed in a future release, see
https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/2845-deprecate-klog-specific-flags-in-k8s-components)
      --log-flush-frequency=5s: Maximum number of seconds between log flushes
      --logtostderr=true: log to standard error instead of files (DEPRECATED:
will be removed in a future release, see
https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/2845-deprecate-klog-specific-flags-in-k8s-components)
      --match-server-version=false: Require server version to match client
version
  -n, --namespace='': If present, the namespace scope for this CLI request
      --one-output=false: If true, only write logs to their native severity
level (vs also writing to each lower severity level) (DEPRECATED: will be
removed in a future release, see
https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/2845-deprecate-klog-specific-flags-in-k8s-components)
      --password='': Password for basic authentication to the API server
      --profile='none': Name of profile to capture. One of
(none|cpu|heap|goroutine|threadcreate|block|mutex)
      --profile-output='profile.pprof': Name of the file to write the profile to
      --request-timeout='0': The length of time to wait before giving up on a
single server request. Non-zero values should contain a corresponding time unit
(e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.
  -s, --server='': The address and port of the Kubernetes API server
      --skip-headers=false: If true, avoid header prefixes in the log messages
(DEPRECATED: will be removed in a future release, see
https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/2845-deprecate-klog-specific-flags-in-k8s-components)
      --skip-log-headers=false: If true, avoid headers when opening log files
(DEPRECATED: will be removed in a future release, see
https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/2845-deprecate-klog-specific-flags-in-k8s-components)
      --stderrthreshold=2: logs at or above this threshold go to stderr
(DEPRECATED: will be removed in a future release, see
https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/2845-deprecate-klog-specific-flags-in-k8s-components)
      --tls-server-name='': Server name to use for server certificate
validation. If it is not provided, the hostname used to contact the server is
used
      --token='': Bearer token for authentication to the API server
      --user='': The name of the kubeconfig user to use
      --username='': Username for basic authentication to the API server
  -v, --v=0: number for the log level verbosity
      --vmodule=: comma-separated list of pattern=N settings for file-filtered
logging
      --warnings-as-errors=false: Treat warnings received from the server as
errors and exit with a non-zero exit code























student_04_9e01f0ca6370@cloudshell:~ (qwiklabs-gcp-01-3e3c6747d88a)$ kubectl create --help
Create a resource from a file or from stdin.

 JSON and YAML formats are accepted.

Examples:
  # Create a pod using the data in pod.json
  kubectl create -f ./pod.json

  # Create a pod based on the JSON passed into stdin
  cat pod.json | kubectl create -f -

  # Edit the data in docker-registry.yaml in JSON then create the resource using
the edited data
  kubectl create -f docker-registry.yaml --edit -o json

Available Commands:
  clusterrole         Create a cluster role
  clusterrolebinding  Create a cluster role binding for a particular cluster
role
  configmap           Create a config map from a local file, directory or
literal value
  cronjob             Create a cron job with the specified name
  deployment          Create a deployment with the specified name
  ingress             Create an ingress with the specified name
  job                 Create a job with the specified name
  namespace           Create a namespace with the specified name
  poddisruptionbudget Create a pod disruption budget with the specified name
  priorityclass       Create a priority class with the specified name
  quota               Create a quota with the specified name
  role                Create a role with single rule
  rolebinding         Create a role binding for a particular role or cluster
role
  secret              Create a secret using specified subcommand
  service             Create a service using a specified subcommand
  serviceaccount      Create a service account with the specified name

Options:
      --allow-missing-template-keys=true: If true, ignore any errors in
templates when a field or map key is missing in the template. Only applies to
golang and jsonpath output formats.
      --dry-run='none': Must be "none", "server", or "client". If client
strategy, only print the object that would be sent, without sending it. If
server strategy, submit server-side request without persisting the resource.
      --edit=false: Edit the API resource before creating
      --field-manager='kubectl-create': Name of the manager used to track field
ownership.
  -f, --filename=[]: Filename, directory, or URL to files to use to create the
resource
  -k, --kustomize='': Process the kustomization directory. This flag can't be
used together with -f or -R.
  -o, --output='': Output format. One of:
json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-as-json|jsonpath-file.
      --raw='': Raw URI to POST to the server.  Uses the transport specified by
the kubeconfig file.
  -R, --recursive=false: Process the directory used in -f, --filename
recursively. Useful when you want to manage related manifests organized within
the same directory.
      --save-config=false: If true, the configuration of current object will be
saved in its annotation. Otherwise, the annotation will be unchanged. This flag
is useful when you want to perform kubectl apply on this object in the future.
  -l, --selector='': Selector (label query) to filter on, supports '=', '==',
and '!='.(e.g. -l key1=value1,key2=value2)
      --show-managed-fields=false: If true, keep the managedFields when printing
objects in JSON or YAML format.
      --template='': Template string or path to template file to use when
-o=go-template, -o=go-template-file. The template format is golang templates
[http://golang.org/pkg/text/template/#pkg-overview].
      --validate=true: If true, use a schema to validate the input before
sending it
      --windows-line-endings=false: Only relevant if --edit=true. Defaults to
the line ending native to your platform.

Usage:
  kubectl create -f FILENAME [options]

Use "kubectl <command> --help" for more information about a given command.
Use "kubectl options" for a list of global command-line options (applies to all
commands).





















student_04_9e01f0ca6370@cloudshell:~ (qwiklabs-gcp-01-3e3c6747d88a)$ kubectl create --help
Create a resource from a file or from stdin.

 JSON and YAML formats are accepted.

Examples:
  # Create a pod using the data in pod.json
  kubectl create -f ./pod.json

  # Create a pod based on the JSON passed into stdin
  cat pod.json | kubectl create -f -

  # Edit the data in docker-registry.yaml in JSON then create the resource using
the edited data
  kubectl create -f docker-registry.yaml --edit -o json

Available Commands:
  clusterrole         Create a cluster role
  clusterrolebinding  Create a cluster role binding for a particular cluster
role
  configmap           Create a config map from a local file, directory or
literal value
  cronjob             Create a cron job with the specified name
  deployment          Create a deployment with the specified name
  ingress             Create an ingress with the specified name
  job                 Create a job with the specified name
  namespace           Create a namespace with the specified name
  poddisruptionbudget Create a pod disruption budget with the specified name
  priorityclass       Create a priority class with the specified name
  quota               Create a quota with the specified name
  role                Create a role with single rule
  rolebinding         Create a role binding for a particular role or cluster
role
  secret              Create a secret using specified subcommand
  service             Create a service using a specified subcommand
  serviceaccount      Create a service account with the specified name

Options:
      --allow-missing-template-keys=true: If true, ignore any errors in
templates when a field or map key is missing in the template. Only applies to
golang and jsonpath output formats.
      --dry-run='none': Must be "none", "server", or "client". If client
strategy, only print the object that would be sent, without sending it. If
server strategy, submit server-side request without persisting the resource.
      --edit=false: Edit the API resource before creating
      --field-manager='kubectl-create': Name of the manager used to track field
ownership.
  -f, --filename=[]: Filename, directory, or URL to files to use to create the
resource
  -k, --kustomize='': Process the kustomization directory. This flag can't be
used together with -f or -R.
  -o, --output='': Output format. One of:
json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-as-json|jsonpath-file.
      --raw='': Raw URI to POST to the server.  Uses the transport specified by
the kubeconfig file.
  -R, --recursive=false: Process the directory used in -f, --filename
recursively. Useful when you want to manage related manifests organized within
the same directory.
      --save-config=false: If true, the configuration of current object will be
saved in its annotation. Otherwise, the annotation will be unchanged. This flag
is useful when you want to perform kubectl apply on this object in the future.
  -l, --selector='': Selector (label query) to filter on, supports '=', '==',
and '!='.(e.g. -l key1=value1,key2=value2)
      --show-managed-fields=false: If true, keep the managedFields when printing
objects in JSON or YAML format.
      --template='': Template string or path to template file to use when
-o=go-template, -o=go-template-file. The template format is golang templates
[http://golang.org/pkg/text/template/#pkg-overview].
      --validate=true: If true, use a schema to validate the input before
sending it
      --windows-line-endings=false: Only relevant if --edit=true. Defaults to
the line ending native to your platform.

Usage:
  kubectl create -f FILENAME [options]

Use "kubectl <command> --help" for more information about a given command.
Use "kubectl options" for a list of global command-line options (applies to all
commands).





















student_04_9e01f0ca6370@cloudshell:~ (qwiklabs-gcp-01-3e3c6747d88a)$ kubectl expose --help
Expose a resource as a new Kubernetes service.

 Looks up a deployment, service, replica set, replication controller or pod by
name and uses the selector for that resource as the selector for a new service
on the specified port. A deployment or replica set will be exposed as a service
only if its selector is convertible to a selector that service supports, i.e.
when the selector contains only the matchLabels component. Note that if no port
is specified via --port and the exposed resource has multiple ports, all will be
re-used by the new service. Also if no labels are specified, the new service
will re-use the labels from the resource it exposes.

 Possible resources include (case insensitive):

 pod (po), service (svc), replicationcontroller (rc), deployment (deploy),
replicaset (rs)

Examples:
  # Create a service for a replicated nginx, which serves on port 80 and
connects to the containers on port 8000
  kubectl expose rc nginx --port=80 --target-port=8000

  # Create a service for a replication controller identified by type and name
specified in "nginx-controller.yaml", which serves on port 80 and connects to
the containers on port 8000
  kubectl expose -f nginx-controller.yaml --port=80 --target-port=8000

  # Create a service for a pod valid-pod, which serves on port 444 with the name
"frontend"
  kubectl expose pod valid-pod --port=444 --name=frontend

  # Create a second service based on the above service, exposing the container
port 8443 as port 443 with the name "nginx-https"
  kubectl expose service nginx --port=443 --target-port=8443 --name=nginx-https

  # Create a service for a replicated streaming application on port 4100
balancing UDP traffic and named 'video-stream'.
  kubectl expose rc streamer --port=4100 --protocol=UDP --name=video-stream

  # Create a service for a replicated nginx using replica set, which serves on
port 80 and connects to the containers on port 8000
  kubectl expose rs nginx --port=80 --target-port=8000

  # Create a service for an nginx deployment, which serves on port 80 and
connects to the containers on port 8000
  kubectl expose deployment nginx --port=80 --target-port=8000

Options:
      --allow-missing-template-keys=true: If true, ignore any errors in
templates when a field or map key is missing in the template. Only applies to
golang and jsonpath output formats.
      --cluster-ip='': ClusterIP to be assigned to the service. Leave empty to
auto-allocate, or set to 'None' to create a headless service.
      --dry-run='none': Must be "none", "server", or "client". If client
strategy, only print the object that would be sent, without sending it. If
server strategy, submit server-side request without persisting the resource.
      --external-ip='': Additional external IP address (not managed by
Kubernetes) to accept for the service. If this IP is routed to a node, the
service can be accessed by this IP in addition to its generated service IP.
      --field-manager='kubectl-expose': Name of the manager used to track field
ownership.
  -f, --filename=[]: Filename, directory, or URL to files identifying the
resource to expose a service
      --generator='service/v2': The name of the API generator to use. There are
2 generators: 'service/v1' and 'service/v2'. The only difference between them is
that service port in v1 is named 'default', while it is left unnamed in v2.
Default is 'service/v2'.
  -k, --kustomize='': Process the kustomization directory. This flag can't be
used together with -f or -R.
  -l, --labels='': Labels to apply to the service created by this call.
      --load-balancer-ip='': IP to assign to the LoadBalancer. If empty, an
ephemeral IP will be created and used (cloud-provider specific).
      --name='': The name for the newly created object.
  -o, --output='': Output format. One of:
json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-as-json|jsonpath-file.
      --override-type='merge': The method used to override the generated object:
json, merge, or strategic.
      --overrides='': An inline JSON override for the generated object. If this
is non-empty, it is used to override the generated object. Requires that the
object supply a valid apiVersion field.
      --port='': The port that the service should serve on. Copied from the
resource being exposed, if unspecified
      --protocol='': The network protocol for the service to be created. Default
is 'TCP'.
  -R, --recursive=false: Process the directory used in -f, --filename
recursively. Useful when you want to manage related manifests organized within
the same directory.
      --save-config=false: If true, the configuration of current object will be
saved in its annotation. Otherwise, the annotation will be unchanged. This flag
is useful when you want to perform kubectl apply on this object in the future.
      --selector='': A label selector to use for this service. Only
equality-based selector requirements are supported. If empty (the default) infer
the selector from the replication controller or replica set.)
      --session-affinity='': If non-empty, set the session affinity for the
service to this; legal values: 'None', 'ClientIP'
      --show-managed-fields=false: If true, keep the managedFields when printing
objects in JSON or YAML format.
      --target-port='': Name or number for the port on the container that the
service should direct traffic to. Optional.
      --template='': Template string or path to template file to use when
-o=go-template, -o=go-template-file. The template format is golang templates
[http://golang.org/pkg/text/template/#pkg-overview].
      --type='': Type for this service: ClusterIP, NodePort, LoadBalancer, or
ExternalName. Default is 'ClusterIP'.

Usage:
  kubectl expose (-f FILENAME | TYPE NAME) [--port=port]
[--protocol=TCP|UDP|SCTP] [--target-port=number-or-name] [--name=name]
[--external-ip=external-ip-of-service] [--type=type] [options]





















student_04_9e01f0ca6370@cloudshell:~ (qwiklabs-gcp-01-3e3c6747d88a)$ kubectl scale --help
Set a new size for a deployment, replica set, replication controller, or
stateful set.

 Scale also allows users to specify one or more preconditions for the scale
action.

 If --current-replicas or --resource-version is specified, it is validated
before the scale is attempted, and it is guaranteed that the precondition holds
true when the scale is sent to the server.

Examples:
  # Scale a replica set named 'foo' to 3
  kubectl scale --replicas=3 rs/foo

  # Scale a resource identified by type and name specified in "foo.yaml" to 3
  kubectl scale --replicas=3 -f foo.yaml

  # If the deployment named mysql's current size is 2, scale mysql to 3
  kubectl scale --current-replicas=2 --replicas=3 deployment/mysql

  # Scale multiple replication controllers
  kubectl scale --replicas=5 rc/foo rc/bar rc/baz

  # Scale stateful set named 'web' to 3
  kubectl scale --replicas=3 statefulset/web

Options:
      --all=false: Select all resources in the namespace of the specified
resource types
      --allow-missing-template-keys=true: If true, ignore any errors in
templates when a field or map key is missing in the template. Only applies to
golang and jsonpath output formats.
      --current-replicas=-1: Precondition for current size. Requires that the
current size of the resource match this value in order to scale. -1 (default)
for no condition.
      --dry-run='none': Must be "none", "server", or "client". If client
strategy, only print the object that would be sent, without sending it. If
server strategy, submit server-side request without persisting the resource.
  -f, --filename=[]: Filename, directory, or URL to files identifying the
resource to set a new size
  -k, --kustomize='': Process the kustomization directory. This flag can't be
used together with -f or -R.
  -o, --output='': Output format. One of:
json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-as-json|jsonpath-file.
  -R, --recursive=false: Process the directory used in -f, --filename
recursively. Useful when you want to manage related manifests organized within
the same directory.
      --replicas=0: The new desired number of replicas. Required.
      --resource-version='': Precondition for resource version. Requires that
the current resource version match this value in order to scale.
  -l, --selector='': Selector (label query) to filter on, supports '=', '==',
and '!='.(e.g. -l key1=value1,key2=value2)
      --show-managed-fields=false: If true, keep the managedFields when printing
objects in JSON or YAML format.
      --template='': Template string or path to template file to use when
-o=go-template, -o=go-template-file. The template format is golang templates
[http://golang.org/pkg/text/template/#pkg-overview].
      --timeout=0s: The length of time to wait before giving up on a scale
operation, zero means don't wait. Any other values should contain a
corresponding time unit (e.g. 1s, 2m, 3h).

Usage:
  kubectl scale [--resource-version=version] [--current-replicas=count]
--replicas=COUNT (-f FILENAME | TYPE NAME) [options]



