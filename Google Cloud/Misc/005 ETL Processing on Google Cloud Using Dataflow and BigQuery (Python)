Overview
In Google Cloud, you can build data pipelines that execute Python code to ingest and transform data from publicly available datasets into BigQuery using these Google Cloud services:
Cloud Storage
Dataflow
BigQuery
In this lab, you use these services to create your own data pipeline, including the design considerations and implementation details, to ensure that your prototype meets the requirements. Be sure to open the Python files and read the comments when instructed.


What you'll do
In this lab, you learn how to:
Build and run Dataflow pipelines (Python) for data ingestion
Build and run Dataflow pipelines (Python) for data transformation and enrichment












======================



Task 1. Ensure that the Dataflow API is successfully enabled
To ensure access to the necessary API, restart the connection to the Dataflow API.

Important: even if the API is already enabled, follow steps 1-4 below to disable, and then reenable the API, in order to restart the API successfully.
In the Cloud Console, enter "Dataflow API" in the top search bar. Click on the result for Dataflow API.
Click Manage.
Click Disable API.
If asked to confirm, click Disable.

Click Enable.
When the API has been enabled again, the page will show the option to disable.
















======================




Task 2. Download the starter code
Run the following command in the Cloud Shell to get Dataflow Python Examples from Google Cloud's professional services GitHub:
gsutil -m cp -R gs://spls/gsp290/dataflow-python-examples .



Now, in Cloud Shell, set a variable equal to your project id.
export PROJECT=qwiklabs-gcp-01-9ed6e7021e69
gcloud config set project $PROJECT





student_00_99bd6514b23e@cloudshell:~ (qwiklabs-gcp-01-9ed6e7021e69)$ gsutil -m cp -R gs://spls/gsp290/dataflow-python-examples .
Copying gs://spls/gsp290/dataflow-python-examples/dataflow_python_examples/data_ingestion_configurable.py...
Copying gs://spls/gsp290/dataflow-python-examples/.DS_Store...                  
Copying gs://spls/gsp290/dataflow-python-examples/dataflow_python_examples/data_lake_to_mart_cogroupbykey.py...
Copying gs://spls/gsp290/dataflow-python-examples/README.md...                  
Copying gs://spls/gsp290/dataflow-python-examples/dataflow_python_examples/data_lake_to_mart.py...
Copying gs://spls/gsp290/dataflow-python-examples/dataflow_python_examples/data_transformation.py...
Copying gs://spls/gsp290/dataflow-python-examples/dataflow_python_examples/data_ingestion.py...
Copying gs://spls/gsp290/dataflow-python-examples/dataflow_python_examples/data_enrichment.py...
Copying gs://spls/gsp290/dataflow-python-examples/dataflow_python_examples/datastore_schema_import.py...
Copying gs://spls/gsp290/dataflow-python-examples/dataflow_python_examples/.DS_Store...
Copying gs://spls/gsp290/dataflow-python-examples/dataflow_python_examples/image_labels.py...
Copying gs://spls/gsp290/dataflow-python-examples/dataflow_python_examples/resources/customer-schema.json...
Copying gs://spls/gsp290/dataflow-python-examples/dataflow_python_examples/resources/image-list.txt...
Copying gs://spls/gsp290/dataflow-python-examples/dataflow_python_examples/resources/lineorder-schema.json...
Copying gs://spls/gsp290/dataflow-python-examples/dataflow_python_examples/resources/orders_denormalized.json...
Copying gs://spls/gsp290/dataflow-python-examples/dataflow_python_examples/resources/orders_schema.json...
Copying gs://spls/gsp290/dataflow-python-examples/dataflow_python_examples/resources/part-schema.json...
Copying gs://spls/gsp290/dataflow-python-examples/dataflow_python_examples/resources/supplier-schema.json...
Copying gs://spls/gsp290/dataflow-python-examples/dataflow_python_examples/resources/usa_names.json...
Copying gs://spls/gsp290/dataflow-python-examples/dataflow_python_examples/resources/usa_names_with_full_state_name.json...
Copying gs://spls/gsp290/dataflow-python-examples/dataflow_python_examples/resources/usa_names_year_as_date.json...
Copying gs://spls/gsp290/dataflow-python-examples/image-list.txt...             
Copying gs://spls/gsp290/dataflow-python-examples/img/1_query_orders.png...     
Copying gs://spls/gsp290/dataflow-python-examples/img/2_query_account_details.png...
Copying gs://spls/gsp290/dataflow-python-examples/img/3_custom_python_code.png...
Copying gs://spls/gsp290/dataflow-python-examples/img/4_output_to_bigquery.png...
Copying gs://spls/gsp290/dataflow-python-examples/img/csv_file.png...           
Copying gs://spls/gsp290/dataflow-python-examples/img/csv_file_to_bigquery.png...
Copying gs://spls/gsp290/dataflow-python-examples/img/csv_join_bigquery_to_bigquery.png...
Copying gs://spls/gsp290/dataflow-python-examples/img/custom_python_code.png... 
Copying gs://spls/gsp290/dataflow-python-examples/img/data_ingestion_configurable.jpg...
Copying gs://spls/gsp290/dataflow-python-examples/img/data_lake_to_data_mart.png...
Copying gs://spls/gsp290/dataflow-python-examples/img/import_state_name_from_bigquery.png...
Copying gs://spls/gsp290/dataflow-python-examples/img/output_to_bigquery.png... 
Copying gs://spls/gsp290/dataflow-python-examples/requirements.txt...           
Copying gs://spls/gsp290/dataflow-python-examples/setup.py...                   
Copying gs://spls/gsp290/dataflow-python-examples/tests/test_image_labels.py... 
Copying gs://spls/gsp290/dataflow-python-examples/tests/test_parsing_logic.py...
\ [38/38 files][527.6 KiB/527.6 KiB] 100% Done                                  
Operation completed over 38 objects/527.6 KiB.                                   
student_00_99bd6514b23e@cloudshell:~ (qwiklabs-gcp-01-9ed6e7021e69)$ export PROJECT=qwiklabs-gcp-01-9ed6e7021e69
gcloud config set project $PROJECT
Updated property [core/project].










======================




Task 3. Create a Cloud Storage bucket
Use the make bucket command in the Cloud Shell to create a new regional bucket in the us-central1 region within your project:
gsutil mb -c regional -l us-central1  gs://$PROJECT













======================





Task 4. Copy files to your bucket
Use the gsutil command in the Cloud Shell to copy files into the Cloud Storage bucket you just created:
gsutil cp gs://spls/gsp290/data_files/usa_names.csv gs://$PROJECT/data_files/
gsutil cp gs://spls/gsp290/data_files/head_usa_names.csv gs://$PROJECT/data_files/












======================



Task 5. Create a BigQuery dataset
In the Cloud Shell, create a dataset in BigQuery Dataset called lake. This is where all of your tables will be loaded in BigQuery:
bq mk lake














======================



Task 6. Build a Dataflow pipeline
In this section you will create an append-only Dataflow which will ingest data into the BigQuery table. You can use the built-in code editor which will allow you to view and edit the code in the Google Cloud console.
https://cdn.qwiklabs.com/xu2ZNOCZ0IgdlDNdPrmJN%2FDIpdFiPVPCSstHGOYHeDM%3D





Open the Cloud Shell Code Editor
Navigate to the source code by clicking on the Open Editor icon in the Cloud Shell:
https://cdn.qwiklabs.com/jBG2dXK1ZILP2ZKKw0EmMovNWjE5JecLn277gF6wy70%3D
If prompted, click on Open in a New Window. It will open the code editor in new window. The Cloud Shell Editor allows you to edit files in the Cloud Shell environment, from the Editor you can return to the Cloud Shell by Clicking on Open Terminal.










======================



Task 7. Data ingestion with a Dataflow Pipeline

You will now build a Dataflow pipeline with a TextIO source and a BigQueryIO destination to ingest data into BigQuery. More specifically, it will:
Ingest the files from Cloud Storage.
Filter out the header row in the files.
Convert the lines read to dictionary objects.
Output the rows to BigQuery.















======================




Task 8. Review pipeline Python code
In the Code Editor navigate to dataflow-python-examples > dataflow_python_examples and open the data_ingestion.py file. Read through the comments in the file, which explain what the code is doing. This code will populate the dataset lake with a table in BigQuery.
https://cdn.qwiklabs.com/wRFYQrAqdsaCRDuCheahYj6OJeCti0a1%2BWAwuqYtZRE%3D












======================




Task 9. Run the Apache Beam pipeline
Return to your Cloud Shell session for this step. You will now do a bit of set up for the required python libraries.
The Dataflow job in this lab requires Python3.8. To ensure you're on the proper version, you will run the Dataflow processes in a Python 3.8 Docker container.



Run the following in Cloud Shell to start up a Python Container:
docker run -it -e PROJECT=$PROJECT -v $(pwd)/dataflow-python-examples:/dataflow python:3.8 /bin/bash

This command will pull a Docker container with the latest stable version of Python 3.8 and execute a command shell to run the next commands within the container. The -v flag provides the source code as a volume for the container so that we can edit in Cloud Shell editor and still access it within the running container.
student_00_99bd6514b23e@cloudshell:~ (qwiklabs-gcp-01-9ed6e7021e69)$ docker run -it -e PROJECT=$PROJECT -v $(pwd)/dataflow-python-examples:/dataflow python:3.8 /bin/bash
Unable to find image 'python:3.8' locally
3.8: Pulling from library/python
6a299ae9cfd9: Pull complete 
e08e8703b2fb: Pull complete 
68e92d11b04e: Pull complete 
5b9fe7fef9be: Pull complete 
09864a904dd0: Pull complete 
a1422769d5be: Pull complete 
fad1ae7101cd: Pull complete 
96467e04897d: Pull complete 
Digest: sha256:afc3b723caef31e03dfa343e8bcdeee8ad4fd11e2672eb3365e5fd59fafa3c09
Status: Downloaded newer image for python:3.8








Once the container finishes pulling, and starts executing in the Cloud Shell, run the following to install apache-beam in that running container:
pip install apache-beam[gcp]==2.24.0



Next, in the running container in the Cloud Shell, change directories into where you linked the source code:
cd dataflow/






Run the ingestion Dataflow pipeline in the cloud
The following will spin up the workers required, and shut them down when complete:
python dataflow_python_examples/data_ingestion.py \
  --project=$PROJECT --region=us-central1 \
  --runner=DataflowRunner \
  --machine_type=e2-standard-2 \
  --staging_location=gs://$PROJECT/test \
  --temp_location gs://$PROJECT/test \
  --input gs://$PROJECT/data_files/head_usa_names.csv \
  --save_main_session



Return to the Cloud Console and open the Navigation menu > Dataflow to view the status of your job.
https://cdn.qwiklabs.com/Hui0DmWpdsANYxcEAlr82Eb8EEfiimitZ%2BZ4A2rVMLQ%3D
Navigation menu > Dataflow

Click on the name of your job to watch it's progress. Once your Job Status is Succeeded, you can move to the next step. This Dataflow pipeline will take approximately five minutes to start, complete the work, and then shutdown.

Navigate to BigQuery (Navigation menu > BigQuery) see that your data has been populated.
Navigation menu > BigQuery
https://cdn.qwiklabs.com/cs%2Bbw2zun8yQhfbJM8osgw%2Fzz0R4dIbQ1j1NoJr6NYU%3D


Click on your project name to see the usa_names table under the lake dataset.
usa_names table
https://cdn.qwiklabs.com/WLaavXMsSZkeqgq%2B3zHLhFzYjz3Spu5X0tCEkFpjrRo%3D


Click on the table then navigate to the Preview tab to see examples of the usa_names data.
Note: If you don't see the usa_names table, try refreshing the page or view the tables using the classic BigQuery UI.








======================





Task 10. Data transformation

You will now build a Dataflow pipeline with a TextIO source and a BigQueryIO destination to ingest data into BigQuery. More specifically, you will:
Ingest the files from Cloud Storage.
Convert the lines read to dictionary objects.
Transform the data which contains the year to a format BigQuery understands as a date.
Output the rows to BigQuery.
Review transformation pipeline python code
In the Code Editor, open data_transformation.py file. Read through the comments in the file which explain what the code is doing.














======================



Task 11. Run the Dataflow transformation pipeline
You will run the Dataflow pipeline in the cloud. This will spin up the workers required, and shut them down when complete.

Run the following commands to do so:
python dataflow_python_examples/data_transformation.py \
  --project=$PROJECT \
  --region=us-central1 \
  --runner=DataflowRunner \
  --machine_type=e2-standard-2 \
  --staging_location=gs://$PROJECT/test \
  --temp_location gs://$PROJECT/test \
  --input gs://$PROJECT/data_files/head_usa_names.csv \
  --save_main_session



Navigate to Navigation menu > Dataflow and click on the name of this job to view the status of your job. This Dataflow pipeline will take approximately five minutes to start, complete the work, and then shutdown.
When your Job Status is Succeeded in the Dataflow Job Status screen, navigate to BigQuery to check to see that your data has been populated.
You should see the usa_names_transformed table under the lake dataset.
Click on the table and navigate to the Preview tab to see examples of the usa_names_transformed data.
Note: If you don't see the usa_names_transformed table, try refreshing the page or view the tables using the classic BigQuery UI.















======================



Task 12. Data enrichment

You will now build a Dataflow pipeline with a TextIO source and a BigQueryIO destination to ingest data into BigQuery. More specifically, you will:
Ingest the files from Cloud Storage.
Filter out the header row in the files.
Convert the lines read to dictionary objects.
Output the rows to BigQuery.















======================






Task 13. Review data enrichment pipeline ython code
In the Code Editor, open data_enrichment.py file.


Check out the comments which explain what the code is doing. This code will populate the data in BigQuery.
Line 83 currently looks like:
values = [x.decode('utf8') for x in csv_row]



Edit it to look like the following:
values = [x for x in csv_row]



When you have finished editing this line, remember to Save this updated file by selecting the File pull down in the Editor and clicking on Save












======================



Task 14. Run the Data Enrichment Dataflow pipeline
Here you'll run the Dataflow pipeline in the cloud.

Run the following in the Cloud Shell to spin up the workers required, and shut them down when complete:
python dataflow_python_examples/data_enrichment.py \
  --project=$PROJECT \
  --region=us-central1 \
  --runner=DataflowRunner \
  --machine_type=e2-standard-2 \
  --staging_location=gs://$PROJECT/test \
  --temp_location gs://$PROJECT/test \
  --input gs://$PROJECT/data_files/head_usa_names.csv \
  --save_main_session



Navigate to Navigation menu > Dataflow to view the status of your job. This Dataflow pipeline will take approximately five minutes to start, complete the work, and then shutdown.
Once your Job Status is Succeed in the Dataflow Job Status screen, navigate to BigQuery to check to see that your data has been populated.
You should see the usa_names_enriched table under the lake dataset.
Click on the table and navigate to the Preview tab to see examples of the usa_names_enriched data.
Note: If you don't see the usa_names_enriched table, try refreshing the page or view the tables using the classic BigQuery UI.














======================

Task 15. Data lake to Mart and Review pipeline python code


Now build a Dataflow pipeline that reads data from two BigQuery data sources, and then joins the data sources. Specifically, you:
Ingest files from two BigQuery sources.
Join the two data sources.
Filter out the header row in the files.
Convert the lines read to dictionary objects.
Output the rows to BigQuery.
In the Code Editor, open data_lake_to_mart.py file. Read through the comments in the file which explain what the code is doing. This code will join two tables and populate the resulting data in BigQuery.
















======================



Task 16. Run the Apache Beam Pipeline to perform the Data Join and create the resulting table in BigQuery
Now run the Dataflow pipeline in the cloud.

Run the following code block, in the Cloud Shell, to spin up the workers required, and shut them down when complete:
python dataflow_python_examples/data_lake_to_mart.py \
  --worker_disk_type="compute.googleapis.com/projects//zones//diskTypes/pd-ssd" \
  --max_num_workers=4 \
  --project=$PROJECT \
  --runner=DataflowRunner \
  --machine_type=e2-standard-2 \
  --staging_location=gs://$PROJECT/test \
  --temp_location gs://$PROJECT/test \
  --save_main_session \
  --region=us-central1




Navigate to Navigation menu > Dataflow and click on the name of this new job to view the status. This Dataflow pipeline will take approximately five minutes to start, complete the work, and then shutdown.
Once your Job Status is Succeeded in the Dataflow Job Status screen, navigate to BigQuery to check to see that your data has been populated.
You should see the orders_denormalized_sideinput table under the lake dataset.
Click on the table and navigate to the Preview section to see examples of orders_denormalized_sideinput data.
Note: If you don't see the orders_denormalized_sideinput table, try refreshing the page or view the tables using the classic BigQuery UI.














======================


















======================





