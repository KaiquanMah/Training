Overview
Google Kubernetes Engine (GKE) provides a managed environment for deploying, managing, and scaling your containerized applications using Google infrastructure. The Kubernetes Engine environment consists of multiple machines (specifically Compute Engine instances) grouped to form a container cluster. In this lab, you get hands-on practice with container creation and application deployment with GKE.

Cluster orchestration with Google Kubernetes Engine
Google Kubernetes Engine (GKE) clusters are powered by the Kubernetes open source cluster management system. Kubernetes provides the mechanisms through which you interact with your container cluster. You use Kubernetes commands and resources to deploy and manage your applications, perform administrative tasks, set policies, and monitor the health of your deployed workloads.
Kubernetes draws on the same design principles that run popular Google services and provides the same benefits: automatic management, monitoring and liveness probes for application containers, automatic scaling, rolling updates, and more. When you run your applications on a container cluster, you're using technology based on Google's 10+ years of experience with running production workloads in containers.


Kubernetes on Google Cloud
-When you run a GKE cluster, you also gain the benefit of advanced cluster management features that Google Cloud provides. These include:
-Load balancing for Compute Engine instances
-Node pools to designate subsets of nodes within a cluster for additional flexibility
-Automatic scaling of your cluster's node instance count
-Automatic upgrades for your cluster's node software
-Node auto-repair to maintain node health and availability
-Logging and Monitoring with Cloud Monitoring for visibility into your cluster
Now that you have a basic understanding of Kubernetes, you will learn how to deploy a containerized application with GKE in less than 30 minutes. Follow the steps below to set up your lab environment.



You can list the active account name with this command:
student_00_7739255ac78a@cloudshell:~ (qwiklabs-gcp-01-262df5bc3e61)$ gcloud auth list
Credentialed Accounts
ACTIVE: *
ACCOUNT: student-00-7739255ac78a@qwiklabs.net
To set the active account, run:
    $ gcloud config set account `ACCOUNT`


You can list the project ID with this command:
student_00_7739255ac78a@cloudshell:~ (qwiklabs-gcp-01-262df5bc3e61)$ gcloud config list project
[core]
project = qwiklabs-gcp-01-262df5bc3e61







Task 1. Set a default compute zone
Your compute zone is an approximate regional location in which your clusters and their resources live. For example, us-central1-a is a zone in the us-central1 region. Start a new session in Cloud Shell.

Set the default compute region:
student_00_7739255ac78a@cloudshell:~ (qwiklabs-gcp-01-262df5bc3e61)$ gcloud config set compute/region us-west1
Updated property [compute/region].

Set the default compute zone:
student_00_7739255ac78a@cloudshell:~ (qwiklabs-gcp-01-262df5bc3e61)$ gcloud config set compute/zone us-west1-c
Updated property [compute/zone].





Task 2. Create a GKE cluster
A cluster consists of at least one cluster master machine and multiple worker machines called nodes. Nodes are Compute Engine virtual machine (VM) instances that run the Kubernetes processes necessary to make them part of the cluster.
Note: Cluster names must start with a letter and end with an alphanumeric, and cannot be longer than 40 characters.
Run the following command:

student_00_7739255ac78a@cloudshell:~ (qwiklabs-gcp-01-262df5bc3e61)$ gcloud container clusters create --machine-type=e2-medium --zone=us-west1-c lab-cluster
Default change: VPC-native is the default mode during cluster creation for versions greater than 1.21.0-gke.1500. To create advanced routes based clusters, please pass the `--no-enable-ip-alias` flag
Note: Your Pod address range (`--cluster-ipv4-cidr`) can accommodate at most 1008 node(s).
Creating cluster lab-cluster in us-west1-c... Cluster is being health-checked (master is healthy)...done.                                                 
Created [https://container.googleapis.com/v1/projects/qwiklabs-gcp-01-262df5bc3e61/zones/us-west1-c/clusters/lab-cluster].
To inspect the contents of your cluster, go to: https://console.cloud.google.com/kubernetes/workload_/gcloud/us-west1-c/lab-cluster?project=qwiklabs-gcp-01-262df5bc3e61
kubeconfig entry generated for lab-cluster.
NAME: lab-cluster
LOCATION: us-west1-c
MASTER_VERSION: 1.27.3-gke.100
MASTER_IP: 34.168.197.252
MACHINE_TYPE: e2-medium
NODE_VERSION: 1.27.3-gke.100
NUM_NODES: 3
STATUS: RUNNING





Task 3. Get authentication credentials for the cluster
After creating your cluster, you need authentication credentials to interact with it.
Authenticate with the cluster:
student_00_7739255ac78a@cloudshell:~ (qwiklabs-gcp-01-262df5bc3e61)$ gcloud container clusters get-credentials lab-cluster
Fetching cluster endpoint and auth data.
kubeconfig entry generated for lab-cluster.




Task 4. Deploy an application to the cluster
You can now deploy a containerized application to the cluster. For this lab, you'll run hello-app in your cluster.
GKE uses Kubernetes objects to create and manage your cluster's resources. Kubernetes provides the Deployment object for deploying stateless applications like web servers. Service objects define rules and load balancing for accessing your application from the internet.
To create a new Deployment hello-server from the hello-app container image, run the following kubectl create command:
This Kubernetes command creates a Deployment object that represents hello-server. In this case, --image specifies a container image to deploy. The command pulls the example image from a Container Registry bucket. gcr.io/google-samples/hello-app:1.0 indicates the specific image version to pull. If a version is not specified, the latest version is used.
student_00_7739255ac78a@cloudshell:~ (qwiklabs-gcp-01-262df5bc3e61)$ kubectl create deployment hello-server --image=gcr.io/google-samples/hello-app:1.0
deployment.apps/hello-server created



To create a Kubernetes Service, which is a Kubernetes resource that lets you expose your application to external traffic, run the following kubectl expose command:
In this command:
--port specifies the port that the container exposes.
type="LoadBalancer" creates a Compute Engine load balancer for your container.
student_00_7739255ac78a@cloudshell:~ (qwiklabs-gcp-01-262df5bc3e61)$ kubectl expose deployment hello-server --type=LoadBalancer --port 8080
service/hello-server exposed









To inspect the hello-server Service, run kubectl get:
Note: It might take a minute for an external IP address to be generated. Run the previous command again if the EXTERNAL-IP column status is pending.
student_00_7739255ac78a@cloudshell:~ (qwiklabs-gcp-01-262df5bc3e61)$ kubectl get service
NAME           TYPE           CLUSTER-IP   EXTERNAL-IP      PORT(S)          AGE
hello-server   LoadBalancer   10.64.9.8    34.168.106.218   8080:31038/TCP   49s
kubernetes     ClusterIP      10.64.0.1    <none>           443/TCP          8m7s


To view the application from your web browser, open a new tab and enter the following address, replacing [EXTERNAL IP] with the EXTERNAL-IP for hello-server.
Expected output: The browser tab displays the message Hello, world! as well as the version and hostname.

http://34.168.106.218:8080/
Hello, world!
Version: 1.0.0
Hostname: hello-server-87476c9bc-2lqkj







Task 5. Deleting the cluster
To delete the cluster, run the following command:
When prompted, type Y to confirm.
Deleting the cluster can take a few minutes. For more information on deleted GKE clusters from the Google Kubernetes Engine (GKE) article, Deleting a cluster.

student_00_7739255ac78a@cloudshell:~ (qwiklabs-gcp-01-262df5bc3e61)$ gcloud container clusters delete lab-cluster
The following clusters will be deleted.
 - [lab-cluster] in [us-west1-c]
Do you want to continue (Y/n)?  Y
Deleting cluster lab-cluster...done.                                                                                                                                                           
Deleted [https://container.googleapis.com/v1/projects/qwiklabs-gcp-01-262df5bc3e61/zones/us-west1-c/clusters/lab-cluster].




