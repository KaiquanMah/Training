Overview
The purpose of this lab is to show learners how to instantiate a Jupyter notebook running on Google Cloud Platform's Vertex AI service. To aid in the demonstration, a dataset with various flight departure and arrival times will be leveraged.

Objectives
In this lab, you learn to perform the following tasks:
Instantiate a Jupyter notebook on Vertex AI.
Execute a BigQuery query from within a Jupyter notebook and process the output using Pandas.



Task 1. Start a JupyterLab Notebook instance
Click on the Navigation Menu.
Navigate to Artificial Intelligence, Vertex AI, then to Workbench.
You'll be redirected to User-Managed Notebooks tab on the main page for Notebooks on Vertex AI.
When the tab loads if you notice a link entitled Enable Notebooks API, click that link to allow the background Notebooks API to be upgraded. The upgrade will occur promptly.
Click on the + New Notebook icon on the top of the page.
In the menu that pops down, select the Python 3 option.
A screen entitled New notebook will be shown. Leave the default options and click on Create.
After a few minutes, the Vertex AI console will have your instance name followed by Open Jupyterlab. Click Open Jupyterlab.
A new tab will open in your browser with the JupyterLab environment. Select Python 3 under Notebook.
https://7f6b0c49f19b6fcd-dot-us-west1.notebooks.googleusercontent.com/lab
Your notebook is now set up.

Notebook name     63-char limit with lowercase letters, digits, or '-' only. Must start with a letter. Cannot end with a '-'.       python-20221228-112813
Region            us-west1 (Oregon)
Zone              us-west1-b

Notebook properties 
Environment             Python 3 (with Intel® MKL)
Machine type            4 vCPUs, 15 GB RAM
Boot disk               100 GB Standard persistent disk
Data disk               100 GB Standard persistent disk
Subnetwork              default(10.138.0.0/20)
Permission              Compute Engine default service account
















Task 2. Execute a BigQuery query
Execute the following Python install command by hitting Shift + Enter in the first cell of the notebook to install the google-cloud-bigquery library at version 2.34.4:
!pip install google-cloud-bigquery==2.34.4

Collecting google-cloud-bigquery==2.34.4
  Downloading google_cloud_bigquery-2.34.4-py2.py3-none-any.whl (206 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 206.6/206.6 kB 6.4 MB/s eta 0:00:00
Requirement already satisfied: google-resumable-media<3.0dev,>=0.6.0 in /opt/conda/lib/python3.7/site-packages (from google-cloud-bigquery==2.34.4) (2.4.0)
Requirement already satisfied: protobuf<4.0.0dev,>=3.12.0 in /opt/conda/lib/python3.7/site-packages (from google-cloud-bigquery==2.34.4) (3.19.6)
Requirement already satisfied: requests<3.0.0dev,>=2.18.0 in /opt/conda/lib/python3.7/site-packages (from google-cloud-bigquery==2.34.4) (2.28.1)
Requirement already satisfied: python-dateutil<3.0dev,>=2.7.2 in /opt/conda/lib/python3.7/site-packages (from google-cloud-bigquery==2.34.4) (2.8.2)
Collecting packaging<22.0dev,>=14.3
  Downloading packaging-21.3-py3-none-any.whl (40 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 40.8/40.8 kB 7.9 MB/s eta 0:00:00
Requirement already satisfied: google-api-core[grpc]!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0dev,>=1.31.5 in /opt/conda/lib/python3.7/site-packages (from google-cloud-bigquery==2.34.4) (1.34.0)
Requirement already satisfied: proto-plus<2.0.0dev,>=1.15.0 in /opt/conda/lib/python3.7/site-packages (from google-cloud-bigquery==2.34.4) (1.22.1)
Requirement already satisfied: grpcio<2.0dev,>=1.38.1 in /opt/conda/lib/python3.7/site-packages (from google-cloud-bigquery==2.34.4) (1.51.1)
Requirement already satisfied: google-cloud-core<3.0.0dev,>=1.4.1 in /opt/conda/lib/python3.7/site-packages (from google-cloud-bigquery==2.34.4) (2.3.2)
Requirement already satisfied: googleapis-common-protos<2.0dev,>=1.56.2 in /opt/conda/lib/python3.7/site-packages (from google-api-core[grpc]!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0dev,>=1.31.5->google-cloud-bigquery==2.34.4) (1.57.0)
Requirement already satisfied: google-auth<3.0dev,>=1.25.0 in /opt/conda/lib/python3.7/site-packages (from google-api-core[grpc]!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0dev,>=1.31.5->google-cloud-bigquery==2.34.4) (2.15.0)
Requirement already satisfied: grpcio-status<2.0dev,>=1.33.2 in /opt/conda/lib/python3.7/site-packages (from google-api-core[grpc]!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0dev,>=1.31.5->google-cloud-bigquery==2.34.4) (1.48.2)
Requirement already satisfied: google-crc32c<2.0dev,>=1.0 in /opt/conda/lib/python3.7/site-packages (from google-resumable-media<3.0dev,>=0.6.0->google-cloud-bigquery==2.34.4) (1.5.0)
Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.7/site-packages (from packaging<22.0dev,>=14.3->google-cloud-bigquery==2.34.4) (3.0.9)
Requirement already satisfied: six>=1.5 in /opt/conda/lib/python3.7/site-packages (from python-dateutil<3.0dev,>=2.7.2->google-cloud-bigquery==2.34.4) (1.16.0)
Requirement already satisfied: urllib3<1.27,>=1.21.1 in /opt/conda/lib/python3.7/site-packages (from requests<3.0.0dev,>=2.18.0->google-cloud-bigquery==2.34.4) (1.26.13)
Requirement already satisfied: charset-normalizer<3,>=2 in /opt/conda/lib/python3.7/site-packages (from requests<3.0.0dev,>=2.18.0->google-cloud-bigquery==2.34.4) (2.1.1)
Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.7/site-packages (from requests<3.0.0dev,>=2.18.0->google-cloud-bigquery==2.34.4) (3.4)
Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.7/site-packages (from requests<3.0.0dev,>=2.18.0->google-cloud-bigquery==2.34.4) (2022.12.7)
Requirement already satisfied: rsa<5,>=3.1.4 in /opt/conda/lib/python3.7/site-packages (from google-auth<3.0dev,>=1.25.0->google-api-core[grpc]!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0dev,>=1.31.5->google-cloud-bigquery==2.34.4) (4.9)
Requirement already satisfied: pyasn1-modules>=0.2.1 in /opt/conda/lib/python3.7/site-packages (from google-auth<3.0dev,>=1.25.0->google-api-core[grpc]!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0dev,>=1.31.5->google-cloud-bigquery==2.34.4) (0.2.8)
Requirement already satisfied: cachetools<6.0,>=2.0.0 in /opt/conda/lib/python3.7/site-packages (from google-auth<3.0dev,>=1.25.0->google-api-core[grpc]!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0dev,>=1.31.5->google-cloud-bigquery==2.34.4) (5.2.0)
Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /opt/conda/lib/python3.7/site-packages (from pyasn1-modules>=0.2.1->google-auth<3.0dev,>=1.25.0->google-api-core[grpc]!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0dev,>=1.31.5->google-cloud-bigquery==2.34.4) (0.4.8)
Installing collected packages: packaging, google-cloud-bigquery
  Attempting uninstall: packaging
    Found existing installation: packaging 22.0
    Uninstalling packaging-22.0:
      Successfully uninstalled packaging-22.0
  Attempting uninstall: google-cloud-bigquery
    Found existing installation: google-cloud-bigquery 3.4.1
    Uninstalling google-cloud-bigquery-3.4.1:
      Successfully uninstalled google-cloud-bigquery-3.4.1
Successfully installed google-cloud-bigquery-2.34.4 packaging-21.3








Restart the kernel to load the updated BigQuery module. On the notebook menu, select Kernel then Restart Kernel. Click Restart on the pop-up window.

Enter the following query in the second cell of the notebook:
%%bigquery df --use_rest_api
SELECT
  depdelay as departure_delay,
  COUNT(1) AS num_flights,
  APPROX_QUANTILES(arrdelay, 10) AS arrival_delay_deciles
FROM
  `cloud-training-demos.airline_ontime_data.flights`
WHERE
 depdelay is not null
GROUP BY
  depdelay
HAVING
  num_flights > 100
ORDER BY
  depdelay ASC


The command makes use of the magic function %%bigquery. Magic functions in notebooks provide an alias for a system command. In this case, %%bigquery runs the query in the cell in BigQuery and stores the output in a Pandas DataFrame object named df.
Run the cell by hitting Shift + Enter, when the cursor is in the cell. Alternatively, if you navigate to the Run tab you can click on Run Selected Cells. Note the keyboard shortcut for this action in case it is not Shift + Enter. There should be no output when executing the command.

Query complete after 0.01s: 100%|██████████| 3/3 [00:00<00:00, 1595.60query/s]                        
Downloading: 100%|██████████| 641/641 [00:00<00:00, 2090.33rows/s]








View the first five rows of the query's output by executing the following code in a new cell:
df.head()
https://cdn.qwiklabs.com/YuD4Gc47kIlLnzdMR%2BYa7vaW6vOBBjhtwrydwOaeOS4%3D
	departure_delay	num_flights	arrival_delay_deciles
0	-60.0	281	[-137.0, -65.0, -60.0, -55.0, -36.0, -16.0, -8...
1	-45.0	262	[-71.0, -55.0, -50.0, -48.0, -45.0, -43.0, -39...
2	-44.0	123	[-62.0, -53.0, -50.0, -48.0, -46.0, -42.0, -40...
3	-43.0	161	[-71.0, -55.0, -51.0, -48.0, -45.0, -43.0, -38...
4	-42.0	193	[-62.0, -51.0, -48.0, -46.0, -43.0, -41.0, -38...








Make a plot with Pandas
We're going to use the Pandas DataFrame containing our query output to build a plot that depicts how arrival delays correspond to departure delays. Before continuing, if you are unfamiliar with Pandas the Ten Minute Getting Started Guide is recommended reading.
https://pandas.pydata.org/pandas-docs/stable/user_guide/10min.html
To get a DataFrame containing the data we need we first have to wrangle the raw query output. Enter the following code in a new cell to convert the list of arrival_delay_deciles into a Pandas Series object. The code also renames the resulting columns.
import pandas as pd
percentiles = df['arrival_delay_deciles'].apply(pd.Series) # for each row's cell, we have a np array
                                                           # turn the array into a pd series => 1 element/value per col
                                                           # we have 11 cols -> 0 to 10
percentiles.rename(columns = lambda x : '{0}%'.format(x*10), inplace=True)     # rename col name from the original integer to 
                                                                               # integer x 10
                                                                               # then add '%' behind/as a suffix
percentiles.head()
	  0%	10%	20%	30%	40%	50%	60%	70%	80%	90%	                100%
0	-137.0	-65.0	-60.0	-55.0	-36.0	-16.0	-8.0	-4.0	1.0	8.0	54.0
1	-71.0	-55.0	-50.0	-48.0	-45.0	-43.0	-39.0	-32.0	-14.0	2.0	45.0
2	-62.0	-53.0	-50.0	-48.0	-46.0	-42.0	-40.0	-33.0	-22.0	-3.0	76.0
3	-71.0	-55.0	-51.0	-48.0	-45.0	-43.0	-38.0	-33.0	-18.0	-5.0	48.0
4	-62.0	-51.0	-48.0	-46.0	-43.0	-41.0	-38.0	-33.0	-20.0	-3.0	32.0







type(df['arrival_delay_deciles'][0])
numpy.ndarray


df['arrival_delay_deciles']
0      [-137.0, -65.0, -60.0, -55.0, -36.0, -16.0, -8...
1      [-71.0, -55.0, -50.0, -48.0, -45.0, -43.0, -39...
2      [-62.0, -53.0, -50.0, -48.0, -46.0, -42.0, -40...
3      [-71.0, -55.0, -51.0, -48.0, -45.0, -43.0, -38...
4      [-62.0, -51.0, -48.0, -46.0, -43.0, -41.0, -38...
                             ...                        
636    [-28.0, -16.0, -13.0, -11.0, -8.0, -6.0, -4.0,...
637    [-27.0, -16.0, -12.0, -9.0, -7.0, -5.0, -3.0, ...
638    [-27.0, -12.0, -9.0, -6.0, -3.0, -2.0, 0.0, 2....
639    [-29.0, -12.0, -9.0, -7.0, -4.0, -2.0, 0.0, 2....
640    [-26.0, -12.0, -8.0, -5.0, -3.0, -1.0, 1.0, 5....
Name: arrival_delay_deciles, Length: 641, dtype: object


df['arrival_delay_deciles'].apply(pd.Series)
0	1	2	3	4	5	6	7	8	9	10
0	-137.0	-65.0	-60.0	-55.0	-36.0	-16.0	-8.0	-4.0	1.0	8.0	54.0
1	-71.0	-55.0	-50.0	-48.0	-45.0	-43.0	-39.0	-32.0	-14.0	2.0	45.0
2	-62.0	-53.0	-50.0	-48.0	-46.0	-42.0	-40.0	-33.0	-22.0	-3.0	76.0
3	-71.0	-55.0	-51.0	-48.0	-45.0	-43.0	-38.0	-33.0	-18.0	-5.0	48.0
4	-62.0	-51.0	-48.0	-46.0	-43.0	-41.0	-38.0	-33.0	-20.0	-3.0	32.0
...	...	...	...	...	...	...	...	...	...	...	...
636	-28.0	-16.0	-13.0	-11.0	-8.0	-6.0	-4.0	-2.0	1.0	7.0	1444.0
637	-27.0	-16.0	-12.0	-9.0	-7.0	-5.0	-3.0	0.0	3.0	9.0	1447.0
638	-27.0	-12.0	-9.0	-6.0	-3.0	-2.0	0.0	2.0	4.0	12.0	1447.0
639	-29.0	-12.0	-9.0	-7.0	-4.0	-2.0	0.0	2.0	6.0	12.0	1431.0
640	-26.0	-12.0	-8.0	-5.0	-3.0	-1.0	1.0	5.0	9.0	20.0	1494.0
641 rows × 11 columns












Since we want to relate departure delay times to arrival delay times we have to concatenate our percentiles table to the departure_delay field in our original DataFrame. Execute the following code in a new cell:
df = pd.concat([df['departure_delay'], percentiles], axis=1)
df.head()
	departure_delay	0%	10%	20%	30%	40%	50%	60%	70%	80%	90%	100%
0	-60.0	-137.0	-65.0	-60.0	-55.0	-36.0	-16.0	-8.0	-4.0	1.0	8.0	54.0
1	-45.0	-71.0	-55.0	-50.0	-48.0	-45.0	-43.0	-39.0	-32.0	-14.0	2.0	45.0
2	-44.0	-62.0	-53.0	-50.0	-48.0	-46.0	-42.0	-40.0	-33.0	-22.0	-3.0	76.0
3	-43.0	-71.0	-55.0	-51.0	-48.0	-45.0	-43.0	-38.0	-33.0	-18.0	-5.0	48.0
4	-42.0	-62.0	-51.0	-48.0	-46.0	-43.0	-41.0	-38.0	-33.0	-20.0	-3.0	32.0






pd.concat([df['departure_delay'], percentiles])
pd.concat([df['departure_delay'], percentiles], axis=0)
	0	0%	10%	100%	20%	30%	40%	50%	60%	70%	80%	90%
0	-60.0	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN
1	-45.0	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN
2	-44.0	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN
3	-43.0	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN
4	-42.0	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN
...	...	...	...	...	...	...	...	...	...	...	...	...
636	NaN	-28.0	-16.0	1444.0	-13.0	-11.0	-8.0	-6.0	-4.0	-2.0	1.0	7.0
637	NaN	-27.0	-16.0	1447.0	-12.0	-9.0	-7.0	-5.0	-3.0	0.0	3.0	9.0
638	NaN	-27.0	-12.0	1447.0	-9.0	-6.0	-3.0	-2.0	0.0	2.0	4.0	12.0
639	NaN	-29.0	-12.0	1431.0	-9.0	-7.0	-4.0	-2.0	0.0	2.0	6.0	12.0
640	NaN	-26.0	-12.0	1494.0	-8.0	-5.0	-3.0	-1.0	1.0	5.0	9.0	20.0
1282 rows × 12 columns


pd.concat([df['departure_delay'], percentiles], axis=0).loc[0,:]
0	0%	10%	100%	20%	30%	40%	50%	60%	70%	80%	90%
0	-60.0	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN
0	NaN	-137.0	-65.0	54.0	-60.0	-55.0	-36.0	-16.0	-8.0	-4.0	1.0	8.0


pd.concat([df['departure_delay'], percentiles], axis=0).iloc[0,:]
0      -60.0
0%       NaN
10%      NaN
100%     NaN
20%      NaN
30%      NaN
40%      NaN
50%      NaN
60%      NaN
70%      NaN
80%      NaN
90%      NaN
Name: 0, dtype: float64








Before plotting the contents of our DataFrame, we'll want to drop extreme values stored in the 0% and 100% fields. Execute the following code in a new cell:
df.drop(labels=['0%', '100%'], axis=1, inplace=True)
	departure_delay	10%	20%	30%	40%	50%	60%	70%	80%	90%
0	-60.0	-65.0	-60.0	-55.0	-36.0	-16.0	-8.0	-4.0	1.0	8.0
1	-45.0	-55.0	-50.0	-48.0	-45.0	-43.0	-39.0	-32.0	-14.0	2.0
2	-44.0	-53.0	-50.0	-48.0	-46.0	-42.0	-40.0	-33.0	-22.0	-3.0
3	-43.0	-55.0	-51.0	-48.0	-45.0	-43.0	-38.0	-33.0	-18.0	-5.0
4	-42.0	-51.0	-48.0	-46.0	-43.0	-41.0	-38.0	-33.0	-20.0	-3.0


df.plot(x='departure_delay', xlim=(-30,50), ylim=(-50,50));
https://cdn.qwiklabs.com/fBBjaBFQG2%2FVe%2FtrdBta4hAMVaf1Tmb7kzmDBA1wgUk%3D



