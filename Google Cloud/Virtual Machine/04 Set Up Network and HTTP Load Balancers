Set Up Network and HTTP Load Balancers
https://google.qwiklabs.com/games/1233/labs/5225

In this hands-on lab, you'll learn the differences between a network load balancer and a HTTP load balancer, and how to set them up for your applications running on Compute Engine virtual machines.
There are several ways you can load balance in Google Cloud. This lab takes you through the setup of the following load balancers.:
L3 Network Load Balancer https://cloud.google.com/load-balancing/docs/network
L7 HTTP(s) Load Balancer https://cloud.google.com/load-balancing/docs/https






Set the default region and zone for all resources
In Cloud Shell, set the default zone:
gcloud config set compute/zone us-central1-a

Set the default region:
gcloud config set compute/region us-central1






Create multiple web server instances
To simulate serving from a cluster of machines, create a simple cluster of Nginx web servers to serve static content using Instance Templates and Managed Instance Groups. Instance Templates define the look of every virtual machine in the cluster (disk, CPUs, memory, etc). Managed Instance Groups instantiate a number of virtual machine instances using the Instance Template.

To create the Nginx web server clusters, create the following:
1 A startup script to be used by every virtual machine instance to setup Nginx server upon startup
2 An instance template to use the startup script
3 A target pool
4 A managed instance group using the instance template



1 Still in Cloud Shell, create a startup script to be used by every virtual machine instance. This script sets up the Nginx server upon startup:
cat << EOF > startup.sh
#! /bin/bash
apt-get update
apt-get install -y nginx
service nginx start
sed -i -- 's/nginx/Google Cloud Platform - '"\$HOSTNAME"'/' /var/www/html/index.nginx-debian.html
EOF



2 Create an instance template, which uses the startup script:
gcloud compute instance-templates create nginx-template \
         --metadata-from-file startup-script=startup.sh
(Output)
Created [...].
NAME           MACHINE_TYPE  PREEMPTIBLE CREATION_TIMESTAMP
nginx-template n1-standard-1             2015-11-09T08:44:59.007-08:00


Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-00-f5cc5aeffcc2/global/instanceTemplates/nginx-template].
NAME            MACHINE_TYPE   PREEMPTIBLE  CREATION_TIMESTAMP
nginx-template  n1-standard-1               2020-09-18T20:49:16.671-07:00







3 Create a target pool. A target pool allows a single access point to all the instances in a group and is necessary for load balancing in the future steps.
gcloud compute target-pools create nginx-pool
(Output)
Created [...].
NAME       REGION       SESSION_AFFINITY BACKUP HEALTH_CHECKS
nginx-pool us-central1

Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-00-f5cc5aeffcc2/regions/us-central1/targetPools/nginx-pool].
NAME        REGION       SESSION_AFFINITY  BACKUP  HEALTH_CHECKS
nginx-pool  us-central1  NONE



4 Create a managed instance group using the instance template:
gcloud compute instance-groups managed create nginx-group \
         --base-instance-name nginx \
         --size 2 \
         --template nginx-template \
         --target-pool nginx-pool
(Output)
Created [...].
NAME         LOCATION       SCOPE  BASE_INSTANCE_NAME  SIZE  TARGET_SIZE  INSTANCE_TEMPLATE  AUTOSCALED
nginx-group  us-central1-a  zone   nginx               0     2            nginx-template     no



Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-00-f5cc5aeffcc2/zones/us-central1-a/instanceGroupManagers/nginx-group].
NAME         LOCATION       SCOPE  BASE_INSTANCE_NAME  SIZE  TARGET_SIZE  INSTANCE_TEMPLATE  AUTOSCALED
nginx-group  us-central1-a  zone   nginx               0     2            nginx-template     no



This creates 2 virtual machine instances with names that are prefixed with nginx-. This may take a couple of minutes.






5 List the compute engine instances and you should see all of the instances created:
gcloud compute instances list
(Output)
NAME       ZONE           MACHINE_TYPE  PREEMPTIBLE INTERNAL_IP EXTERNAL_IP    STATUS
nginx-7wvi us-central1-a n1-standard-1             10.240.X.X  X.X.X.X           RUNNING
nginx-9mwd us-central1-a n1-standard-1             10.240.X.X  X.X.X.X           RUNNING

NAME        ZONE           MACHINE_TYPE   PREEMPTIBLE  INTERNAL_IP  EXTERNAL_IP   STATUS
nginx-ljtm  us-central1-a  n1-standard-1               10.128.0.2   34.66.115.44  STAGING
nginx-n1qb  us-central1-a  n1-standard-1                                          PROVISIONING

NAME        ZONE           MACHINE_TYPE   PREEMPTIBLE  INTERNAL_IP  EXTERNAL_IP     STATUS
nginx-ljtm  us-central1-a  n1-standard-1               10.128.0.2   34.66.115.44    RUNNING
nginx-n1qb  us-central1-a  n1-standard-1               10.128.0.3   162.222.179.24  RUNNING



6 Now configure a firewall so that you can connect to the machines on port 80 via the EXTERNAL_IP addresses:
gcloud compute firewall-rules create www-firewall --allow tcp:80

Creating firewall...â ¹Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-00-f5cc5aeffcc2/global/firewalls/www-firewall].
Creating firewall...done.
NAME          NETWORK  DIRECTION  PRIORITY  ALLOW   DENY  DISABLED
www-firewall  default  INGRESS    1000      tcp:80        False




You should be able to connect to each of the instances via their external IP addresses via http://EXTERNAL_IP/ shown as the result of running the previous command.
http://EXTERNAL_IP/

http://34.66.115.44/
Welcome to Google Cloud Platform - nginx-ljtm!
If you see this page, the Google Cloud Platform - nginx-ljtm web server is successfully installed and working. Further configuration is required.
For online documentation and support please refer to nginx.org.
Commercial support is available at nginx.com.
Thank you for using Google Cloud Platform - nginx-ljtm.


http://162.222.179.24/
Welcome to Google Cloud Platform - nginx-n1qb!
If you see this page, the Google Cloud Platform - nginx-n1qb web server is successfully installed and working. Further configuration is required.
For online documentation and support please refer to nginx.org.
Commercial support is available at nginx.com.
Thank you for using Google Cloud Platform - nginx-n1qb.




















Create a Network Load Balancer
Network load balancing allows you to balance the load of your systems based on incoming IP protocol data, such as address, port, and protocol type. 
You also get some options that are not available, with HTTP(S) load balancing. 
For example, you can load balance additional TCP/UDP-based protocols such as SMTP traffic. 
And if your application is interested in TCP-connection-related characteristics, network load balancing allows your app to inspect the packets, where HTTP(S) load balancing does not.

TLDR:
a. Network load balancer can balance SMTP traffic, which may not be offered by the HTTP/S load balancer
b. Network load balancer can inspect packets -> for what? what sort of info + metadata are inspected?



Create an L3 network load balancer targeting your instance group:
gcloud compute forwarding-rules create nginx-lb \
         --region us-central1 \
         --ports=80 \
         --target-pool nginx-pool
(Output)
Created [https://www.googleapis.com/compute/v1/projects/...].

Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-00-f5cc5aeffcc2/regions/us-central1/forwardingRules/nginx-lb].




List all Compute Engine forwarding rules in your project.
gcloud compute forwarding-rules list
(Output)
NAME     REGION       IP_ADDRESS     IP_PROTOCOL TARGET
nginx-lb us-central1 X.X.X.X        TCP         us-central1/targetPools/nginx-pool

NAME      REGION       IP_ADDRESS     IP_PROTOCOL  TARGET
nginx-lb  us-central1  35.202.167.77  TCP          us-central1/targetPools/nginx-pool

















Create a HTTP(s) Load Balancer
HTTP(S) load balancing provides global load balancing for HTTP(S) requests destined for your instances. You can configure URL rules that route some URLs to one set of instances and route other URLs to other instances. Requests are always routed to the instance group that is closest to the user, provided that group has enough capacity and is appropriate for the request. If the closest group does not have enough capacity, the request is sent to the closest group that does have capacity.

1 First, create a health check. Health checks verify that the instance is responding to HTTP or HTTPS traffic:
gcloud compute http-health-checks create http-basic-check
(Output)
Created [https://www.googleapis.com/compute/v1/projects/...].
NAME             HOST PORT REQUEST_PATH
http-basic-check      80   /

Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-00-f5cc5aeffcc2/global/httpHealthChecks/http-basic-check].
NAME              HOST  PORT  REQUEST_PATH
http-basic-check        80    /



2 Define an HTTP service and map a port name to the relevant port for the instance group. Now the load balancing service can forward traffic to the named port:
gcloud compute instance-groups managed \
       set-named-ports nginx-group \
       --named-ports http:80
(Output)
Updated [https://www.googleapis.com/compute/v1/projects/...].

Updated [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-00-f5cc5aeffcc2/zones/us-central1-a/instanceGroups/nginx-group].



3 Create a backend service:
gcloud compute backend-services create nginx-backend \
      --protocol HTTP --http-health-checks http-basic-check --global
(Output)
Created [https://www.googleapis.com/compute/v1/projects/...].
NAME          BACKENDS PROTOCOL
nginx-backend          HTTP

Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-00-f5cc5aeffcc2/global/backendServices/nginx-backend].
NAME           BACKENDS  PROTOCOL
nginx-backend            HTTP




4 Add the instance group into the backend service:
gcloud compute backend-services add-backend nginx-backend \
    --instance-group nginx-group \
    --instance-group-zone us-central1-a \
    --global
(Output)
Updated [https://www.googleapis.com/compute/v1/projects/...].

Updated [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-00-f5cc5aeffcc2/global/backendServices/nginx-backend].



5 Create a default URL map that directs all incoming requests to all your instances:
gcloud compute url-maps create web-map \
    --default-service nginx-backend
(Output)
Created [https://www.googleapis.com/compute/v1/projects/...].
NAME    DEFAULT_SERVICE
Web-map nginx-backend

Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-00-f5cc5aeffcc2/global/urlMaps/web-map].
NAME     DEFAULT_SERVICE
web-map  backendServices/nginx-backend



6 Create a target HTTP proxy to route requests to your URL map:
gcloud compute target-http-proxies create http-lb-proxy \
    --url-map web-map
(Output)
Created [https://www.googleapis.com/compute/v1/projects/...].
NAME          URL_MAP
http-lb-proxy web-map

Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-00-f5cc5aeffcc2/global/targetHttpProxies/http-lb-proxy].
NAME           URL_MAP
http-lb-proxy  web-map



7 Create a global forwarding rule to handle and route incoming requests. 
A forwarding rule sends traffic to a specific target HTTP or HTTPS proxy depending on the IP address, IP protocol, and port specified. 
The global forwarding rule does not support multiple ports.
gcloud compute forwarding-rules create http-content-rule \
        --global \
        --target-http-proxy http-lb-proxy \
        --ports 80
(Output)
Created [https://www.googleapis.com/compute/v1/projects/...].

Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-00-f5cc5aeffcc2/global/forwardingRules/http-content-rule].



8 After creating the global forwarding rule, it can take several minutes for your configuration to propagate.
gcloud compute forwarding-rules list
(Output)
NAME              REGION IP_ADDRESS    IP_PROTOCOL TARGET
http-content-rule        X.X.X.X       TCP         http-lb-proxy
nginx-lb   us-central1  X.X.X.X       TCP         us-central1/....
Take note of the http-content-rule IP_ADDRESS for the forwarding rule.

NAME               REGION       IP_ADDRESS     IP_PROTOCOL  TARGET
http-content-rule               34.98.102.72   TCP          http-lb-proxy
nginx-lb           us-central1  35.202.167.77  TCP          us-central1/targetPools/nginx-pool



http://IP_ADDRESS/

http://34.98.102.72/
Welcome to Google Cloud Platform - nginx-n1qb!
If you see this page, the Google Cloud Platform - nginx-n1qb web server is successfully installed and working. Further configuration is required.
For online documentation and support please refer to nginx.org.
Commercial support is available at nginx.com.
Thank you for using Google Cloud Platform - nginx-n1qb.


http://35.202.167.77/
Welcome to Google Cloud Platform - nginx-n1qb!
If you see this page, the Google Cloud Platform - nginx-n1qb web server is successfully installed and working. Further configuration is required.
For online documentation and support please refer to nginx.org.
Commercial support is available at nginx.com.
Thank you for using Google Cloud Platform - nginx-n1qb.


