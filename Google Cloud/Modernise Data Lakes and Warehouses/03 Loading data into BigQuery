Loading data into BigQuery


Overview
BigQuery is Google's fully managed, NoOps, low cost analytics database. With BigQuery you can query terabytes and terabytes of data without having any infrastructure to manage or needing a database administrator. BigQuery uses SQL and can take advantage of the pay-as-you-go model. BigQuery allows you to focus on analyzing data to find meaningful insights.
In this lab you will ingest subsets of the NYC taxi trips data into tables inside of BigQuery.

What you'll learn
Loading data into BigQuery from various sources
Loading data into BigQuery using the CLI and Console
Using DDL to create tables







Open BigQuery Console
In the Google Cloud Console, select Navigation menu > BigQuery.
The Welcome to BigQuery in the Cloud Console message box opens. This message box provides a link to the quickstart guide and lists UI updates.
Click Done.



Task 1. Create a new dataset to store tables
To create a dataset, click on the View actions icon (the three vertical dots) next to your project ID and select Create dataset.
Next, name your Dataset ID nyctaxi and leave all other options at their default values, and then click Create dataset.
You'll now see the nyctaxi dataset under your project name.








Task 2. Ingest a new dataset from a CSV
In this section, you will load a local CSV into a BigQuery table.
Download a subset of the NYC taxi 2018 trips data locally onto your computer from this link.
https://storage.googleapis.com/cloud-training/OCBL013/nyc_tlc_yellow_trips_2018_subset_1.csv
In the BigQuery Console, Select the nyctaxi dataset then click Create Table


Specify the below table options:

Source:
Create table from: Upload
Choose File: select the file you downloaded locally earlier
File format: CSV

Destination:
Table name: 2018trips Leave all other settings at default.

Schema:
Check Auto Detect (tip: Not seeing the checkbox? Ensure the file format is CSV and not Avro)

Advanced Options
Leave at default values

Click Create Table.
You should now see the 2018trips table below the nyctaxi dataset.

Select the 2018trips table and view details:
How many rows are in the table?
10,018


Table info
Table ID     qwiklabs-gcp-02-781290bf1d8c.nyctaxi.2018trips 
Table size   1.23 MB 
Long-term storage size     0 B 
Number of rows             10,018 
Created                      Aug 22, 2022, 8:35:05 PM UTC+8 
Last modified                  Aug 22, 2022, 8:35:05 PM UTC+8 
Table expiration               NEVER 
Data location                    US 
Default collation  
Description
  
  
  
  

Select Preview and confirm all columns have been loaded (sampled below):
You have successfully loaded a CSV file into a new BigQuery table.

$ bq show --format=prettyjson nyctaxi.2018trips | jq '.schema.fields' 
[
  {
    "mode": "NULLABLE",
    "name": "vendor_id",
    "type": "INTEGER"
  },
  {
    "mode": "NULLABLE",
    "name": "pickup_datetime",
    "type": "TIMESTAMP"
  },
  {
    "mode": "NULLABLE",
    "name": "dropoff_datetime",
    "type": "TIMESTAMP"
  },
  {
    "mode": "NULLABLE",
    "name": "passenger_count",
    "type": "INTEGER"
  },
  {
    "mode": "NULLABLE",
    "name": "trip_distance",
    "type": "FLOAT"
  },
  {
    "mode": "NULLABLE",
    "name": "rate_code",
    "type": "INTEGER"
  },
  {
    "mode": "NULLABLE",
    "name": "store_and_fwd_flag",
    "type": "BOOLEAN"
  },
  {
    "mode": "NULLABLE",
    "name": "payment_type",
    "type": "INTEGER"
  },
  {
    "mode": "NULLABLE",
    "name": "fare_amount",
    "type": "FLOAT"
  },
  {
    "mode": "NULLABLE",
    "name": "extra",
    "type": "FLOAT"
  },
  {
    "mode": "NULLABLE",
    "name": "mta_tax",
    "type": "FLOAT"
  },
  {
    "mode": "NULLABLE",
    "name": "tip_amount",
    "type": "FLOAT"
  },
  {
    "mode": "NULLABLE",
    "name": "tolls_amount",
    "type": "FLOAT"
  },
  {
    "mode": "NULLABLE",
    "name": "imp_surcharge",
    "type": "FLOAT"
  },
  {
    "mode": "NULLABLE",
    "name": "total_amount",
    "type": "FLOAT"
  },
  {
    "mode": "NULLABLE",
    "name": "pickup_location_id",
    "type": "INTEGER"
  },
  {
    "mode": "NULLABLE",
    "name": "dropoff_location_id",
    "type": "INTEGER"
  }
]





SELECT *
FROM nyctaxi.2018trips
LIMIT 5

[{
  "vendor_id": "1",
  "pickup_datetime": "2018-05-04T05:39:26Z",
  "dropoff_datetime": "2018-05-04T05:39:26Z",
  "passenger_count": "1",
  "trip_distance": "0.0",
  "rate_code": "5",
  "store_and_fwd_flag": "true",
  "payment_type": "2",
  "fare_amount": "0.0",
  "extra": "0.0",
  "mta_tax": "0.0",
  "tip_amount": "0.0",
  "tolls_amount": "0.0",
  "imp_surcharge": "0.0",
  "total_amount": "0.0",
  "pickup_location_id": "143",
  "dropoff_location_id": "264"
}, {
  "vendor_id": "1",
  "pickup_datetime": "2018-08-02T18:49:24Z",
  "dropoff_datetime": "2018-08-02T18:49:24Z",
  "passenger_count": "2",
  "trip_distance": "0.0",
  "rate_code": "5",
  "store_and_fwd_flag": "false",
  "payment_type": "2",
  "fare_amount": "0.0",
  "extra": "0.0",
  "mta_tax": "0.0",
  "tip_amount": "0.0",
  "tolls_amount": "0.0",
  "imp_surcharge": "0.3",
  "total_amount": "0.3",
  "pickup_location_id": "148",
  "dropoff_location_id": "264"
}, {
  "vendor_id": "1",
  "pickup_datetime": "2018-03-05T20:19:23Z",
  "dropoff_datetime": "2018-03-05T20:22:12Z",
  "passenger_count": "1",
  "trip_distance": "0.4",
  "rate_code": "5",
  "store_and_fwd_flag": "false",
  "payment_type": "1",
  "fare_amount": "0.0",
  "extra": "0.0",
  "mta_tax": "0.0",
  "tip_amount": "25.0",
  "tolls_amount": "0.0",
  "imp_surcharge": "0.3",
  "total_amount": "25.3",
  "pickup_location_id": "243",
  "dropoff_location_id": "243"
}, {
  "vendor_id": "1",
  "pickup_datetime": "2018-04-18T18:02:44Z",
  "dropoff_datetime": "2018-04-18T18:02:47Z",
  "passenger_count": "1",
  "trip_distance": "18.1",
  "rate_code": "1",
  "store_and_fwd_flag": "false",
  "payment_type": "3",
  "fare_amount": "2.5",
  "extra": "1.0",
  "mta_tax": "0.5",
  "tip_amount": "0.0",
  "tolls_amount": "0.0",
  "imp_surcharge": "0.3",
  "total_amount": "4.3",
  "pickup_location_id": "132",
  "dropoff_location_id": "132"
}, {
  "vendor_id": "2",
  "pickup_datetime": "2018-07-12T18:36:02Z",
  "dropoff_datetime": "2018-07-12T18:36:24Z",
  "passenger_count": "1",
  "trip_distance": "0.08",
  "rate_code": "1",
  "store_and_fwd_flag": "false",
  "payment_type": "2",
  "fare_amount": "2.5",
  "extra": "1.0",
  "mta_tax": "0.5",
  "tip_amount": "0.0",
  "tolls_amount": "0.0",
  "imp_surcharge": "0.3",
  "total_amount": "4.3",
  "pickup_location_id": "234",
  "dropoff_location_id": "234"
}]















Running SQL Queries
Next, practice with a basic query on the 2018trips table.

In the Query Editor, write a query to list the top 5 most expensive trips of the year:
#standardSQL
SELECT
  *
FROM
  nyctaxi.2018trips
ORDER BY
  fare_amount DESC
LIMIT  5

What was the highest fare amount in the year?
300


[{
  "vendor_id": "2",
  "pickup_datetime": "2018-03-12T16:40:36Z",
  "dropoff_datetime": "2018-03-12T17:48:58Z",
  "passenger_count": "1",
  "trip_distance": "37.39",
  "rate_code": "5",
  "store_and_fwd_flag": "false",
  "payment_type": "1",
  "fare_amount": "300.0",
  "extra": "0.0",
  "mta_tax": "0.5",
  "tip_amount": "0.0",
  "tolls_amount": "38.26",
  "imp_surcharge": "0.3",
  "total_amount": "339.06",
  "pickup_location_id": "223",
  "dropoff_location_id": "265"
}, {
  "vendor_id": "1",
  "pickup_datetime": "2018-05-16T01:22:11Z",
  "dropoff_datetime": "2018-05-16T01:23:16Z",
  "passenger_count": "1",
  "trip_distance": "0.0",
  "rate_code": "5",
  "store_and_fwd_flag": "false",
  "payment_type": "1",
  "fare_amount": "150.0",
  "extra": "0.0",
  "mta_tax": "0.0",
  "tip_amount": "30.05",
  "tolls_amount": "0.0",
  "imp_surcharge": "0.3",
  "total_amount": "180.35",
  "pickup_location_id": "265",
  "dropoff_location_id": "265"
}, {
  "vendor_id": "2",
  "pickup_datetime": "2018-02-13T11:02:40Z",
  "dropoff_datetime": "2018-02-13T11:02:41Z",
  "passenger_count": "1",
  "trip_distance": "0.0",
  "rate_code": "5",
  "store_and_fwd_flag": "false",
  "payment_type": "1",
  "fare_amount": "145.0",
  "extra": "0.0",
  "mta_tax": "0.5",
  "tip_amount": "29.16",
  "tolls_amount": "0.0",
  "imp_surcharge": "0.3",
  "total_amount": "174.96",
  "pickup_location_id": "264",
  "dropoff_location_id": "265"
}, {
  "vendor_id": "2",
  "pickup_datetime": "2018-08-06T17:27:38Z",
  "dropoff_datetime": "2018-08-06T18:40:24Z",
  "passenger_count": "1",
  "trip_distance": "31.13",
  "rate_code": "5",
  "store_and_fwd_flag": "false",
  "payment_type": "1",
  "fare_amount": "140.0",
  "extra": "0.0",
  "mta_tax": "0.0",
  "tip_amount": "0.0",
  "tolls_amount": "21.76",
  "imp_surcharge": "0.3",
  "total_amount": "162.06",
  "pickup_location_id": "219",
  "dropoff_location_id": "265"
}, {
  "vendor_id": "2",
  "pickup_datetime": "2018-11-07T17:02:28Z",
  "dropoff_datetime": "2018-11-07T18:06:16Z",
  "passenger_count": "0",
  "trip_distance": "20.46",
  "rate_code": "5",
  "store_and_fwd_flag": "false",
  "payment_type": "1",
  "fare_amount": "138.0",
  "extra": "0.0",
  "mta_tax": "0.5",
  "tip_amount": "27.76",
  "tolls_amount": "0.0",
  "imp_surcharge": "0.3",
  "total_amount": "166.56",
  "pickup_location_id": "93",
  "dropoff_location_id": "265"
}]
































Task 3. Ingest a new dataset from Google Cloud Storage
Now, let's try to load another subset of the same 2018 trip data that is available on Cloud Storage. And this time, let's use the CLI tool to do it.

In your Cloud Shell, run the following command :
bq load \
--source_format=CSV \
--autodetect \
--noreplace  \
nyctaxi.2018trips \
gs://cloud-training/OCBL013/nyc_tlc_yellow_trips_2018_subset_2.csv

Waiting on bqjob_r1b0d604896b163da_00000182c5943072_1 ... (1s) Current status: DONE   

Note: With the above load job, you are specifying that this subset is to be appended to the existing 2018trips table that you created above.
When the load job is complete, you will get a confirmation on the screen.
Back on your BigQuery console, select the 2018trips table and view details. Confirm that the row count has now almost doubled.
You may want to run the same query like earlier to see if the top 5 most expensive trips have changed.













Task 4. Create tables from other tables with DDL
The 2018trips table now has trips from throughout the year. What if you were only interested in January trips? For the purpose of this lab, we will keep it simple and focus only on pickup date and time. Let's use DDL to extract this data and store it in another table

In the Query Editor, run the following CREATE TABLE command :

#standardSQL
CREATE TABLE
  nyctaxi.january_trips AS
SELECT
  *
FROM
  nyctaxi.2018trips
WHERE
  EXTRACT(Month
  FROM
    pickup_datetime)=1;
    
    





Now run the below query in your Query Editor find the longest distance traveled in the month of January:
#standardSQL
SELECT
  *
FROM
  nyctaxi.january_trips
ORDER BY
  trip_distance DESC
LIMIT
  1
  
  
  
[{
  "vendor_id": "2",
  "pickup_datetime": "2018-01-11T09:30:17Z",
  "dropoff_datetime": "2018-01-11T10:13:13Z",
  "passenger_count": "6",
  "trip_distance": "28.04",
  "rate_code": "2",
  "store_and_fwd_flag": "false",
  "payment_type": "1",
  "fare_amount": "52.0",
  "extra": "0.0",
  "mta_tax": "0.5",
  "tip_amount": "6.0",
  "tolls_amount": "5.76",
  "imp_surcharge": "0.3",
  "total_amount": "64.56",
  "pickup_location_id": "261",
  "dropoff_location_id": "132"
}]  
  


You've successfully created a new dataset and ingested data into BigQuery from CSV, Google Cloud Storage, and other BigQuery tables.

