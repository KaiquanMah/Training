Creating a dual-prompt get_response() function
The following exercises will be based on calling the chat.completions endpoint of the OpenAI API with two prompts (a system prompt and a user prompt). To prepare for this, in this exercise you will create a dual-prompt get_response() function that receives two prompts as input (system_prompt and user_prompt) and returns the response as an output. You will then apply this function to any example of your choice.
The OpenAI package has been pre-loaded for you.




Assign the role and content of each message in the messages list.
Try out the function by passing a system_prompt and a user_prompt of your choice.


client = OpenAI(api_key="<OPENAI_API_TOKEN>")

def get_response(system_prompt, user_prompt):
  # Assign the role and content for each message
  messages = [{"role": "system", "content": system_prompt},
      		  {"role": "user", "content": user_prompt}]  
  response = client.chat.completions.create(
      model="gpt-4o-mini", messages= messages, temperature=0)
  
  return response.choices[0].message.content

# Try the function with a system and user prompts of your choice 
system_prompt = "you are a caring mental health chatbot. do not swear or give negative responses."
user_prompt = "please share how to work in a challenging project environment with so many conflicts coming our way"
response = get_response(system_prompt, user_prompt)



print(f"System prompt: {system_prompt}")
print(f"User prompt: {user_prompt}")
print(f"response: {response}")





<script.py> output:
    System prompt: you are a caring mental health chatbot. do not swear or give negative responses.
    User prompt: please share how to work in a challenging project environment with so many conflicts coming our way
    response: Navigating a challenging project environment with conflicts can be tough, but there are several strategies you can employ to help manage the situation effectively:
    
    1. **Open Communication**: Foster an environment where team members feel comfortable expressing their thoughts and concerns. Regular check-ins can help identify issues early on.
    
    2. **Active Listening**: Make sure to listen to all perspectives. Acknowledging others' viewpoints can help reduce tension and promote understanding.
    
    3. **Set Clear Goals**: Ensure that everyone is on the same page regarding project objectives. Clear goals can help align the team and reduce misunderstandings.
    
    4. **Establish Roles and Responsibilities**: Clearly define each team member's role to minimize overlap and confusion. This can help prevent conflicts related to responsibilities.
    
    5. **Encourage Collaboration**: Promote teamwork by encouraging collaboration on tasks. This can help build relationships and reduce conflicts.
    
    6. **Conflict Resolution Skills**: Equip yourself and your team with conflict resolution techniques. This might include negotiation skills or mediation strategies to address disagreements constructively.
    
    7. **Stay Positive**: Maintain a positive attitude, even in challenging situations. Your outlook can influence the team’s morale and approach to conflicts.
    
    8. **Seek Support**: If conflicts escalate, don’t hesitate to seek support from a manager or a mediator who can provide an objective perspective.
    
    9. **Focus on Solutions**: When conflicts arise, shift the focus from the problem to finding solutions. Encourage brainstorming sessions to generate ideas for resolution.
    
    10. **Reflect and Learn**: After resolving conflicts, take time to reflect on what happened and what could be improved in the future. This can help the team grow and become more resilient.
    
    Remember, conflicts are a natural part of any project, and handling them with care can lead to stronger relationships and a more cohesive team. If you ever feel overwhelmed, it’s okay to take a step back and seek support for yourself as well.



