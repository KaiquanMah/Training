What is a hash?
Every commit to a repository has a unique identifier called a hash (since it is generated by running the changes through a pseudo-random number generator called a hash function). This hash is normally written as a 40-character hexadecimal string like 7c35a3ce607a14953f070f0f83b5d74c2296ef93, but most of the time, you only have to give Git the first 6 or 8 characters in order to identify the commit you mean.

Hashes are what enable Git to share data efficiently between repositories. If two files are the same, their hashes are guaranteed to be the same. Similarly, if two commits contain the same files and have the same ancestors, their hashes will be the same as well. Git can therefore tell what information needs to be saved where by comparing hashes rather than comparing entire files.

Use cd to go into the dental directory and then run git log. What are the first four characters of the hash of the most recent commit?
#1227




$ pwd
/home/repl
$ ls
dental

$ cd dental
$ pwd
/home/repl/dental

$ git log
commit 122795ac7c534a1053266a15f03013f61d85d189
Author: Rep Loop <repl@datacamp.com>
Date:   Mon Oct 7 19:38:49 2019 +0000

    Added year to report title.

commit e57600b3cb171f0782ad1357e8b2ca6202850566
Author: Rep Loop <repl@datacamp.com>
Date:   Mon Oct 7 19:38:49 2019 +0000

    Adding fresh data for western region.

commit 56d0ec1357d5ef5ec6e04e2f2af29fc69c3c1489
Author: Rep Loop <repl@datacamp.com>
Date:   Mon Oct 7 19:38:49 2019 +0000

    Adding fresh data for southern and western regions.

commit e7ea8bc2a1d553436606ee35fd977f86aaf14dfa
Author: Rep Loop <repl@datacamp.com>
Date:   Mon Oct 7 19:38:49 2019 +0000

    Fixed bug and regenerated results.
    
    
    
