What is Git's equivalent of a relative path?
A hash is like an absolute path: it identifies a specific commit. 
Another way to identify a commit is to use the equivalent of a relative path. 
The special label HEAD, which we saw in the previous chapter, always refers to the most recent commit. 
The label HEAD~1 then refers to the commit before it, while 
HEAD~2 refers to the commit before that, and so on.

Note that the symbol between HEAD and the number is a tilde ~, not a minus sign -, and that there cannot be spaces before or after the tilde.

You are in the dental repository. Using a single Git command, show the commit made just before the most recent one. Which of the following files did it change?





$ cd dental

$ git show HEAD
commit 122795ac7c534a1053266a15f03013f61d85d189
Author: Rep Loop <repl@datacamp.com>
Date:   Mon Oct 7 19:38:49 2019 +0000

    Added year to report title.

diff --git a/report.txt b/report.txt
index e713b17..4c0742a 100644
--- a/report.txt
+++ b/report.txt
@@ -1,4 +1,4 @@
-# Seasonal Dental Surgeries 2017-18
+# Seasonal Dental Surgeries (2017) 2017-18

 TODO: write executive summary.
 
 
 
 
 
 
 
 $ git show HEAD~1
commit e57600b3cb171f0782ad1357e8b2ca6202850566
Author: Rep Loop <repl@datacamp.com>
Date:   Mon Oct 7 19:38:49 2019 +0000

    Adding fresh data for western region.

diff --git a/data/western.csv b/data/western.csv
index f6d6374..f7c4509 100644
--- a/data/western.csv
+++ b/data/western.csv
@@ -27,3 +27,6 @@ Date,Tooth
 2017-10-05,molar
 2017-10-06,incisor
 2017-10-07,incisor
+2017-10-15,molar
+2017-10-17,bicuspid
+2017-10-18,bicuspid



#western.csv
