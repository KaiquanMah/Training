How can I merge two branches with conflicts?
When there is a conflict during a merge, Git tells you that there's a problem, and running git status after the merge reminds you which files have conflicts that you need to resolve by printing both modified: beside the files' names.

Inside the file, Git leaves markers that look like this to tell you where the conflicts occurred:
<<<<<<< destination-branch-name
...changes from the destination branch...
=======
...changes from the source branch...
>>>>>>> source-branch-name

In many cases, the destination branch name will be HEAD because you will be merging into the current branch. To resolve the conflict, edit the file to remove the markers and make whatever other changes are needed to reconcile the changes, then commit those changes.




1. You are in the master branch of the dental repository. Merge the changes from the alter-report-title branch (the source) into the master branch (the destination).
$ git branch
  alter-report-title* master
  summary-statistics
$ ls
bin  data  report.txt  results
$ git merge alter-report-title master
Auto-merging report.txt
CONFLICT (content): Merge conflict in report.txt
Automatic merge failed; fix conflicts and then commit the result.



2. Use git status to see which file has conflicts.
$ git status
On branch master
You have unmerged paths.
  (fix conflicts and run "git commit")

Unmerged paths:
  (use "git add <file>..." to mark resolution)

        both modified:   report.txt

no changes added to commit (use "git add" and/or "git commit -a")



3. It turns out that report.txt has some conflicts. Use nano report.txt to open it and remove some lines so that only the second title is kept. Save your work with Ctrl+O and Enter, and then leave the editor with Ctrl+X. You can easily remove entire lines with Ctrl+K.
$nano report.txt
#We checked the file /home/repl/dental/report.txt. The title # Dental Work by Season 2017-18 disappeared from report.txt, while that was the title to keep! Edit the file again with nano report.txt and make some more changes.


4. Add the merged file to the staging area.
$ git status
On branch master
You have unmerged paths.
  (fix conflicts and run "git commit")

Unmerged paths:
  (use "git add <file>..." to mark resolution)

        both modified:   report.txt

no changes added to commit (use "git add" and/or "git commit -a")



$ git add report.txt
$ git status
On branch master
All conflicts fixed but you are still merging.
  (use "git commit" to conclude merge)

Changes to be committed:

        modified:   report.txt




5. Commit your changes with a log message.

$ git commit -m "updated report"
[master 658b2e5] updated report


$ git status
On branch master
nothing to commit, working directory clean

