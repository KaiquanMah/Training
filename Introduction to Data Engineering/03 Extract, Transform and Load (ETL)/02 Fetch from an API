Fetch from an API
In the last video, you've seen that you can extract data from an API by sending a request to the API and parsing the response which was in JSON format. In this exercise, you'll be doing the same by using the requests library to send a request to the Hacker News API.
Hacker News is a social news aggregation website, specifically for articles related to computer science or the tech world in general. Each post on the website has a JSON representation, which you'll see in the response of the request in the exercise.
https://github.com/HackerNews/API
https://news.ycombinator.com/

Use the correct method of the requests module to get the Hacker News post's JSON object.
Print out the response, parsed as a JSON.
Assign the "score" key of the post to post_score.






In [3]: help(requests)
Help on package requests:

NAME
    requests

DESCRIPTION
    Requests HTTP Library
    ~~~~~~~~~~~~~~~~~~~~~
    
    Requests is an HTTP library, written in Python, for human beings. Basic GET
    usage:
    
       >>> import requests
       >>> r = requests.get('https://www.python.org')
       >>> r.status_code
       200
       >>> 'Python is a programming language' in r.content
       True
    
    ... or POST:
    
       >>> payload = dict(key1='value1', key2='value2')
       >>> r = requests.post('https://httpbin.org/post', data=payload)
       >>> print(r.text)
       {
         ...
         "form": {
           "key2": "value2",
           "key1": "value1"
         },
         ...
       }
    
    The other HTTP methods are supported - see `requests.api`. Full documentation
    is at <http://python-requests.org>.
    
    :copyright: (c) 2017 by Kenneth Reitz.
    :license: Apache 2.0, see LICENSE for more details.

PACKAGE CONTENTS
    __version__
    _internal_utils
    adapters
    api
    auth
    certs
    compat
    cookies
    exceptions
    help
    hooks
    models
    packages
    sessions
    status_codes
    structures
    utils

FUNCTIONS
    check_compatibility(urllib3_version, chardet_version)

DATA
    __author_email__ = 'me@kennethreitz.org'
    __build__ = 139520
    __cake__ = '‚ú® üç∞ ‚ú®'
    __copyright__ = 'Copyright 2018 Kenneth Reitz'
    __description__ = 'Python HTTP for Humans.'
    __license__ = 'Apache 2.0'
    __title__ = 'requests'
    __url__ = 'http://python-requests.org'
    codes = <lookup 'status_codes'>

VERSION
    2.21.0

AUTHOR
    Kenneth Reitz

FILE
    /usr/local/lib/python3.6/dist-packages/requests/__init__.py














import requests
# Fetch the Hackernews post
resp = requests.get("https://hacker-news.firebaseio.com/v0/item/16222426.json")

# Print the response parsed as JSON
print(resp.json())
{'by': 'neis', 
 'descendants': 0, 
 'id': 16222426, 
 'score': 17, 
 'time': 1516800333, 
 'title': 'Duolingo-Style Learning for Data Science: DataCamp for Mobile', 
 'type': 'story', 
 'url': 'https://medium.com/datacamp/duolingo-style-learning-for-data-science-datacamp-for-mobile-3861d1bc02df'}




# Assign the score of the test to post_score
post_score = resp.json()["score"]
print(post_score)
    17



You might have noticed that the response is not a real response. This is a result of DC's sandboxing environment. However, you can interract with the real API using the exact same method.

