Average rating per course
A great way to recommend courses is to recommend top-rated courses, as DataCamp students often like courses that are highly rated by their peers.
In this exercise, you'll complete a transformation function transform_avg_rating() that aggregates the rating data using the pandas DataFrame's .groupby() method. The goal is to get a DataFrame with two columns, a course id and its average rating:
course_id	avg_rating
123	4.72
111	4.62
...	...
In this exercise, you'll complete this transformation function, and apply it on raw rating data extracted via the helper function extract_rating_data() which extracts course ratings from the rating table.


Complete the transform_avg_rating() function by grouping by the course_id column, and taking the mean of the rating column.
Use extract_rating_data() to extract raw ratings data. It takes in as argument the database engine db_engines.
Use transform_avg_rating() on the raw rating data you've extracted.


# Complete the transformation function
def transform_avg_rating(rating_data):
  # Group by course_id and extract average rating per course
  avg_rating = rating_data.groupby('course_id').rating.mean()
  # Return sorted average ratings per course
  sort_rating = avg_rating.sort_values(ascending=False).reset_index()
  return sort_rating

# Extract the rating data into a DataFrame    
rating_data = extract_rating_data(db_engines)

# Use transform_avg_rating on the extracted data and print results
avg_rating_data = transform_avg_rating(rating_data)
print(avg_rating_data) 

<script.py> output:
        course_id    rating
    0          46  4.800000
    1          23  4.800000
    2          96  4.692765
    3          56  4.661765
    4          24  4.653061
    5          26  4.646259
    6          61  4.629213
    7          85  4.627119
    8          87  4.626374
    9          81  4.621339
    10         31  4.610209
    11         86  4.608696
    12          7  4.601472
    13         44  4.593866
    14         14  4.593220
    15         76  4.589744
    16         35  4.588235
    17         37  4.581818
    18         71  4.580645
    19         28  4.578947
    20         32  4.575688
    21          3  4.572611
    22         95  4.554396
    23         25  4.546875
    24         36  4.546190
    25         83  4.545455
    26         38  4.542857
    27         66  4.540984
    28         16  4.539474
    29          1  4.537634
    ..        ...       ...
    69         30  4.407407
    70         82  4.400000
    71         39  4.396552
    72         79  4.395833
    73         99  4.391304
    74         20  4.371295
    75         97  4.365591
    76         18  4.353497
    77         47  4.350000
    78         19  4.347953
    79         12  4.340909
    80         72  4.340278
    81         10  4.339286
    82         89  4.338462
    83         15  4.313043
    84          4  4.305233
    85         80  4.298913
    86         69  4.296000
    87         73  4.294118
    88         62  4.283019
    89        100  4.282609
    90          5  4.281250
    91         98  4.269006
    92          8  4.257143
    93          2  4.253012
    94         54  4.238095
    95         92  4.222222
    96         29  4.208333
    97         17  4.147059
    98         42  4.107570
    
    [99 rows x 2 columns]





The result of this transformation could now be loaded into another table and used by data products to recommend courses. It would be a very non-personal recommendation, though.

