Retrieving GEOData
Download the code from http://www.py4e.com/code3/geodata.zip - then unzip the file and 
edit where.data to add an address nearby where you live - don't reveal where you live. 

Then run the geoload.py to lookup all of the entries in where.data (including the new one) and produce the geodata.sqlite. 
Then run geodump.py to read the database and produce where.js. 
You can run the programs and then scroll back to take your screen shots when the program finishes. 

Then open where.html to visualize the map. 
Take screen shots as described below. Make sure that your added location shows in all three of your screen shots.
This is a relatively simple assignment. Don't take off points for little mistakes. If they seem to have done the assignment give them full credit. Feel free to make suggestions if there are small mistakes. Please keep your comments positive and useful. If you do not take grading seriously, the instructors may delete your response and you will lose points.


Screen shot (JPG or PNG - Maximum 1MB) of the **geoload.py** program output in the command line including your highlighted added location.
(Please use PNG or JPG files 1024KB max)

Screen shot (JPG or PNG - Maximum 1MB) of the **geodump.py** program output in the command line including your highlighted added location.
(Please use PNG or JPG files 1024KB max)

Screen shot (JPG or PNG - Maximum 1MB) of the **map zoomed into the location that you added** after you open where.html in a browser
(Please use PNG or JPG files 1024KB max)



=========================================================
where.data

AGH University of Science and Technology
Academy of Fine Arts Warsaw Poland
American University in Cairo
...
kansas state university
universidad complutense de madrid
university of Patras
university of padua
Hanken




=========================================================
geoload.py

import urllib.request, urllib.parse, urllib.error
import http
import sqlite3
import json
import time
import ssl
import sys

api_key = False
# If you have a Google Places API key, enter it here
# api_key = 'AIzaSy___IDByT70'

if api_key is False:
    api_key = 42
    serviceurl = "http://py4e-data.dr-chuck.net/json?"
else :
    serviceurl = "https://maps.googleapis.com/maps/api/geocode/json?"

# Additional detail for urllib
# http.client.HTTPConnection.debuglevel = 1

#Create SQLite table
conn = sqlite3.connect('geodata.sqlite')
cur = conn.cursor()
cur.execute('''
CREATE TABLE IF NOT EXISTS Locations (address TEXT, geodata TEXT)''')


# Ignore SSL certificate errors
ctx = ssl.create_default_context()
ctx.check_hostname = False
ctx.verify_mode = ssl.CERT_NONE

fh = open("where.data")
count = 0
for line in fh:
    if count > 200 :
        print('Retrieved 200 locations, restart to retrieve more')
        break

    address = line.strip()
    # print(address) #added to visualise data
    print('')   #added as an empty line separator
    # https://www.geeksforgeeks.org/memoryview-in-python/#:~:text=memoryview%20objects%20allow%20Python%20code,needing%20to%20copy%20it%20first.
    # memoryview objects allow Python code to access the internal data of an object that supports the buffer protocol without copying. The memoryview() function allows direct read and write access to an object's byte-oriented data without needing to copy it first.

    # ***still not sure why we need to 'encode' when querying the SQLite DB***
    cur.execute("SELECT geodata FROM Locations WHERE address= ?",
        (memoryview(address.encode()), ))

    #if 'address' is already found in the SQLite DB, move to the next 'address' in the 'where.data' file
    #without incrementing counter
    try:
        data = cur.fetchone()[0]
        print("Found in database ",address)
        continue
    #otherwise, 'pass' and move on to the code segments below
    #In Python, pass is a null statement. The interpreter does not ignore a pass statement, but nothing happens and the statement results into no operation.
    #https://www.educative.io/edpresso/what-is-pass-statement-in-python
    except:
        pass



    parms = dict()
    parms["address"] = address
    if api_key is not False: parms['key'] = api_key
    url = serviceurl + urllib.parse.urlencode(parms)
    # print(parms) #added to visualise data

    print('Retrieving', url)
    uh = urllib.request.urlopen(url, context=ctx)
    data = uh.read().decode()
    # print(data) #added to visualise data
    print('Retrieved', len(data), 'characters', data[:20].replace('\n', ' '))
    count = count + 1
    # print('Count :', count) #added to visualise process

    try:
        js = json.loads(data)
        # print(js) #added to visualise data
    except:
        print(data)  # We print in case unicode causes an error
        continue

    if 'status' not in js or (js['status'] != 'OK' and js['status'] != 'ZERO_RESULTS') :
        print('==== Failure To Retrieve ====')
        print(data)
        break

    cur.execute('''INSERT INTO Locations (address, geodata)
            VALUES ( ?, ? )''', (memoryview(address.encode()), memoryview(data.encode()) ) )
    conn.commit()
    if count % 10 == 0 :
        print('Pausing for a bit...')
        time.sleep(5)

print("Run geodump.py to read the data from the database so you can vizualize it on a map.")




'''
#After addding 'Hanken' to row 299 of 'where.data'
#output from running 'geoload.py' during the 1st iteration is as follows

Retrieving http://py4e-data.dr-chuck.net/json?address=Universitas+Gadjah+Mada&key=42
Retrieved 2319 characters {    "results" : [
Retrieved 200 locations, restart to retrieve more
Run geodump.py to read the data from the database so you can vizualize it on a map.
'''






'''
#sample output from running 'geoload.py' during the 2nd iteration is as follows

#print("Found in database ",address)
Found in database  AGH University of Science and Technology
...


# print(address)
Hanken

# print(parms)
{'address': 'Hanken', 'key': 42}
# print('Retrieving', url)
Retrieving http://py4e-data.dr-chuck.net/json?address=Hanken&key=42
# print(data)
{
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "22",
               "short_name" : "22",
               "types" : [ "street_number" ]
            },
            {
               "long_name" : "Arkadiankatu",
               "short_name" : "Arkadiankatu",
               "types" : [ "route" ]
            },
            {
               "long_name" : "Helsinki",
               "short_name" : "Helsinki",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Finland",
               "short_name" : "FI",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "00100",
               "short_name" : "00100",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Arkadiankatu 22, 00100 Helsinki, Finland",
         "geometry" : {
            "location" : {
               "lat" : 60.1707416,
               "lng" : 24.9244352
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 60.17209058029151,
                  "lng" : 24.9257841802915
               },
               "southwest" : {
                  "lat" : 60.1693926197085,
                  "lng" : 24.9230862197085
               }
            }
         },
         "place_id" : "ChIJ83-U5DMKkkYR5wT2816WJNc",
         "plus_code" : {
            "compound_code" : "5WCF+7Q Helsinki, Finland",
            "global_code" : "9GG65WCF+7Q"
         },
         "types" : [ "establishment", "point_of_interest", "university" ]
      }
   ],
   "status" : "OK"
}

# print('Retrieved', len(data), 'characters', data[:20].replace('\n', ' '))
Retrieved 1721 characters {    "results" : [
# print('Count :', count)
Count : 98
# print(js)
{'results': [{'address_components': [{'long_name': '22', 'short_name': '22', 'types': ['street_number']}, {'long_name': 'Arkadiankatu', 'short_name': 'Arkadiankatu', 'types': ['route']}, {'long_name': 'Helsinki', 'short_name': 'Helsinki', 'types': ['locality', 'political']}, {'long_name': 'Finland', 'short_name': 'FI', 'types': ['country', 'political']}, {'long_name': '00100', 'short_name': '00100', 'types': ['postal_code']}], 'formatted_address': 'Arkadiankatu 22, 00100 Helsinki, Finland', 'geometry': {'location': {'lat': 60.1707416, 'lng': 24.9244352}, 'location_type': 'ROOFTOP', 'viewport': {'northeast': {'lat': 60.17209058029151, 'lng': 24.9257841802915}, 'southwest': {'lat': 60.1693926197085, 'lng': 24.9230862197085}}}, 'place_id': 'ChIJ83-U5DMKkkYR5wT2816WJNc', 'plus_code': {'compound_code': '5WCF+7Q Helsinki, Finland', 'global_code': '9GG65WCF+7Q'}, 'types': ['establishment', 'point_of_interest', 'university']}], 'status': 'OK'}
#print("Run geodump.py to read the data from the database so you can vizualize it on a map.")
Run geodump.py to read the data from the database so you can vizualize it on a map.
'''
















=========================================================
geodump.py

import sqlite3
import json
import codecs

conn = sqlite3.connect('geodata.sqlite')
cur = conn.cursor()

cur.execute('SELECT * FROM Locations')
fhand = codecs.open('where.js', 'w', "utf-8")

#rewrite the whole 'where.js' file
#'myData = [' would be in the 1st row
fhand.write("myData = [\n")
count = 0

#from the SQLite DB
for row in cur :
    data = str(row[1].decode())
    # print(data) #visualise data
    # print(row) #visualise data

    #load the json data into a dictionary
    try: js = json.loads(str(data))
    except: continue


    if not('status' in js and js['status'] == 'OK') : continue

    #analyse the longitude, latitude values
    lat = js["results"][0]["geometry"]["location"]["lat"]
    lng = js["results"][0]["geometry"]["location"]["lng"]
    if lat == 0 or lng == 0 : continue

    #address > remove single quote "'" if found
    where = js['results'][0]['formatted_address']
    where = where.replace("'", "")

    try :
        print(where, lat, lng)

        count = count + 1
        #newline for the second or subsequent record
        if count > 1 : fhand.write(",\n")

        #construct the row to write to the 'where.js' file
        output = "[" + str(lat) + "," + str(lng) + ", '" + where + "']"
        fhand.write(output)
    except:
        continue

#newline, then '];' on the same line
#then another newline
fhand.write("\n];\n")
# close connections to the SQLite DB cursor and 'where.js' file handle
cur.close()
fhand.close()

print(count, "records written to where.js")
print("Open where.html to view the data in a browser")




'''
print(data)
{
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "30",
               "short_name" : "30",
               "types" : [ "street_number" ]
            },
            {
               "long_name" : "aleja Adama Mickiewicza",
               "short_name" : "aleja Adama Mickiewicza",
               "types" : [ "route" ]
            },
            {
               "long_name" : "Krowodrza",
               "short_name" : "Krowodrza",
               "types" : [ "political", "sublocality", "sublocality_level_1" ]
            },
            {
               "long_name" : "Kraków",
               "short_name" : "Kraków",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Kraków",
               "short_name" : "Kraków",
               "types" : [ "administrative_area_level_2", "political" ]
            },
            {
               "long_name" : "Małopolskie",
               "short_name" : "Małopolskie",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Poland",
               "short_name" : "PL",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "30-059",
               "short_name" : "30-059",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "aleja Adama Mickiewicza 30, 30-059 Kraków, Poland",
         "geometry" : {
            "location" : {
               "lat" : 50.06688579999999,
               "lng" : 19.9136192
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 50.0682347802915,
                  "lng" : 19.9149681802915
               },
               "southwest" : {
                  "lat" : 50.0655368197085,
                  "lng" : 19.9122702197085
               }
            }
         },
         "place_id" : "ChIJIZu1VqdbFkcR0RezIbqNDLI",
         "plus_code" : {
            "compound_code" : "3W87+QC Kraków, Poland",
            "global_code" : "9F2X3W87+QC"
         },
         "types" : [ "establishment", "point_of_interest", "university" ]
      }
   ],
   "status" : "OK"
}





print(row)
(b'AGH University of Science and Technology', b'{\n   "results" : [\n      {\n         "address_components" : [\n            {\n               "long_name" : "30",\n               "short_name" : "30",\n               "types" : [ "street_number" ]\n            },\n            {\n               "long_name" : "aleja Adama Mickiewicza",\n               "short_name" : "aleja Adama Mickiewicza",\n               "types" : [ "route" ]\n            },\n            {\n               "long_name" : "Krowodrza",\n               "short_name" : "Krowodrza",\n               "types" : [ "political", "sublocality", "sublocality_level_1" ]\n            },\n            {\n               "long_name" : "Krak\xc3\xb3w",\n               "short_name" : "Krak\xc3\xb3w",\n               "types" : [ "locality", "political" ]\n            },\n            {\n               "long_name" : "Krak\xc3\xb3w",\n               "short_name" : "Krak\xc3\xb3w",\n               "types" : [ "administrative_area_level_2", "political" ]\n            },\n            {\n               "long_name" : "Ma\xc5\x82opolskie",\n               "short_name" : "Ma\xc5\x82opolskie",\n               "types" : [ "administrative_area_level_1", "political" ]\n            },\n            {\n               "long_name" : "Poland",\n               "short_name" : "PL",\n               "types" : [ "country", "political" ]\n            },\n            {\n               "long_name" : "30-059",\n               "short_name" : "30-059",\n               "types" : [ "postal_code" ]\n            }\n         ],\n         "formatted_address" : "aleja Adama Mickiewicza 30, 30-059 Krak\xc3\xb3w, Poland",\n         "geometry" : {\n            "location" : {\n               "lat" : 50.06688579999999,\n               "lng" : 19.9136192\n            },\n            "location_type" : "ROOFTOP",\n            "viewport" : {\n               "northeast" : {\n                  "lat" : 50.0682347802915,\n                  "lng" : 19.9149681802915\n               },\n               "southwest" : {\n                  "lat" : 50.0655368197085,\n                  "lng" : 19.9122702197085\n               }\n            }\n         },\n         "place_id" : "ChIJIZu1VqdbFkcR0RezIbqNDLI",\n         "plus_code" : {\n            "compound_code" : "3W87+QC Krak\xc3\xb3w, Poland",\n            "global_code" : "9F2X3W87+QC"\n         },\n         "types" : [ "establishment", "point_of_interest", "university" ]\n      }\n   ],\n   "status" : "OK"\n}\n')

#so row[1] extracts only the JSON data into the 'data' variable




print(type(json.loads(str(data))))
<class 'dict'>
'''













==========================================================
where.js

myData = [
[50.06688579999999,19.9136192, 'aleja Adama Mickiewicza 30, 30-059 Kraków, Poland'],
[52.2394019,21.0150792, 'Krakowskie Przedmieście 5, 00-068 Warszawa, Poland'],
[30.0189275,31.499707, 'AUC Avenue، Road، New Cairo 1, Cairo Governorate 11835, Egypt'],
[42.340075,-71.0895367, 'Northeastern, Boston, MA 02115, USA'],
[32.778949,35.019648, 'Technion/ Sports Building, Haifa'],
[33.1561058,131.826132, 'Japan, 〒875-0002 Ōita-ken, Usuki-shi, Shitanoe, 1232−2 ＵＭＤ'],
[42.4036847,-71.120482, 'South Hall Tufts University, 30 Lower Campus Rd, Somerville, MA 02144, USA'],
...
[40.4454368,-3.7299424, 'Av. Séneca, 2, 28040 Madrid, Spain'],
[38.28923,21.785369, 'Panepistimioupoli Patron 265 04, Greece'],
[45.406766,11.8774462, 'Via VIII Febbraio, 2, 35122 Padova PD, Italy'],
[60.1707416,24.9244352, 'Arkadiankatu 22, 00100 Helsinki, Finland']
];













==========================================================
where.html

<html>
  <head>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <title>A Map of Information</title>
    <link href="https://google-developers.appspot.com/maps/documentation/javascript/examples/default.css" rel="stylesheet">

    <!-- If you are in China, you may need to use theis site for the Google Maps code
    <script src="https://maps.google.cn/maps/api/js" type="text/javascript"></script> -->
    
    <script src="https://maps.googleapis.com/maps/api/js"></script>
    <script src="where.js"></script>
    <script>

      function initialize() {
        alert("To see the title of a marker, hover over the marker but don't click.");
        var myLatlng = new google.maps.LatLng(37.39361,-122.099263)
        var mapOptions = {
          zoom: 3,
          center: myLatlng,
          mapTypeId: google.maps.MapTypeId.ROADMAP
        }
        var map = new google.maps.Map(document.getElementById('map_canvas'), mapOptions);

        i = 0;
        var markers = [];
        for ( pos in myData ) {
            i = i + 1;
            var row = myData[pos];
		    window.console && console.log(row);
            // if ( i < 3 ) { alert(row); }
            var newLatlng = new google.maps.LatLng(row[0], row[1]);
            var marker = new google.maps.Marker({
                position: newLatlng,
                map: map,
                title: row[2]
            });
            markers.push(marker);
<!-- New options for MarkerClusterer function to display markers -->
	    var options = {
			imagePath: 'http://rawgit.com/googlemaps/js-marker-clusterer/gh-pages/images/m'
			}	
        }
<!-- New var -->
	var markerCluster = new MarkerClusterer(map, markers, options);
      }
    </script>
  </head>
  <body onload="initialize()">
<div id="map_canvas" style="height: 500px"></div>
<p><b>About this Map</b></p>
<p>
This is a cool map from 
<a href="https://www.py4e.com">www.py4e.com</a>.
</p>
</body>
</html>


















