Field Paths and Sets
Previously, we confirmed -- via a Python loop -- that for each prize, either all laureates have a 1/3 share, or none do. Now, let's do this via an aggregation (result should be an empty list):

list(db.prizes.aggregate([
    {"$project": {"allThree": {"$setEquals": [____, ____]},
                  "noneThree": {"$not": {"$setIsSubset": [____, ____]}}}},
    {"$match": {"$nor": [{"allThree": True}, {"noneThree": True}]}}]))

Which values fill the blanks?

#YES  "$laureates.share", ["3"], ["3"], "$laureates.share"
#Python has separate syntax for sets and lists, but JSON, and by extension MongoDB, does not. Also, how does MongoDB distinguish between the literal string "foo" and the value of the document field "foo" (a field path) in an operator expression?
#Field paths in operator expressions are prepended by "$" to distinguish them from literal string values, and JSON/MongoDB "sets" are delimited by square brackets, just like lists.























Organizing prizes
In the slides at the beginning of this lesson, we saw a two-stage aggregation pipeline to determine the number of prizes awarded in total. How many prizes were awarded (at least partly) to organizations?

#Fill out pipeline to determine the number of prizes awarded (at least partly) to organizations. To do this, you'll need to $match on the "gender" that designates organizations, use field paths, and use a None-id'ed grouping. Recall that to specify the value of a field "my_field", you use the field path "$my_field".
# Count prizes awarded (at least partly) to organizations as a sum over sizes of "prizes" arrays.
pipeline = [
    {"$match": {"gender": "org"}},
    {"$project": {"n_prizes": {"$size": "$prizes"}}},
    {"$group": {"_id": None, "n_prizes_total": {"$sum": "$n_prizes"}}}
]

print(list(db.laureates.aggregate(pipeline)))

<script.py> output:
    [{'n_prizes_total': 27, '_id': None}]





























Gap years, aggregated
In a previous exercise, you collected instances of prize categories not being awarded in particular years. You implemented this using a for loop in Python. You will now implement this as an aggregation pipeline that:

1. Filters for original prize categories (i.e. sans economics),
2. Projects category and year,
3. Groups distinct prize categories awarded by year,
4. Projects prize categories not awarded by year,
5. Filters for years with missing prize categories, and
6. Returns a cursor of documents in reverse chronological order, one per year, each with a list of missing prize categories for that year.

Remember to use field paths (prepend field names with "$") to extract field values in expressions.

#https://docs.mongodb.com/manual/reference/operator/aggregation/size/
#https://docs.mongodb.com/manual/reference/operator/aggregation/setDifference/
#https://docs.mongodb.com/manual/reference/operator/query/exists/




from collections import OrderedDict

original_categories = sorted(set(db.prizes.distinct("category", {"year": "1901"})))

pipeline = [
    {"$match": {"category": {"$in": original_categories}}},
    {"$project": {"category": 1, "year": 1}},
    
    
    
    #Make the $group stage output a document for each prize year (set "_id" to the correct field path) with the set of categories awarded that year.
    # Collect the set of category values for each prize year.
    {"$group": {"_id": "$year", 
                "categories": {"$addToSet": "$category"}}},
    
    
    
    #Given your intermediate collection of year-keyed documents, $project a field named "missing" with the (original) categories not awarded that year.
    # Project categories *not* awarded (i.e., that are missing this year).
    {"$project": {"missing": {"$setDifference": [original_categories, "$categories"]}}},
    
    
    #Use a $match stage to only pass through documents with at least one missing prize category.
    # Only include years with at least one missing category
    {"$match": {"missing.0": {"$exists": True}}},
    
    
    #Finally, add a $sort stage to sort documents in reverse chronological (descending) order.
    # Sort in reverse chronological order. Note that "_id" is a distinct year at this stage.
    {"$sort": OrderedDict([("_id", -1)])},
]



for doc in db.prizes.aggregate(pipeline):
    print("{year}: {missing}".format(year=doc["_id"],missing=", ".join(sorted(doc["missing"]))))
