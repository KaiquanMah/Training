Glenn, George, and others in the G.B. crew

There are two laureates with Berkeley, California as a prize affiliation city that have the initials G.S. - Glenn Seaborg and George Smoot. How many laureates in total have a first name beginning with "G" and a surname beginning with "S"?

Evaluate the expression
db.laureates.count_documents({"firstname": Regex(____), "surname": Regex(____)})
in the console, filling in the blanks appropriately.



In [1]: db.laureates.count_documents({"firstname": Regex("^G"), "surname": Regex("^S")})
Out[1]: 9
9 laureates







Germany, then and now
Just as we saw with Poland, there are laureates who were born somewhere that was in Germany at the time but is now not, and others born somewhere that was not in Germany at the time but now is.

1. Use a regular expression object to filter for laureates with "Germany" in their "bornCountry" value.
from bson.regex import Regex

# Filter for laureates with "Germany" in their "bornCountry" value
criteria = {"bornCountry": Regex("Germany")}
print(set(db.laureates.distinct("bornCountry", criteria)))

<script.py> output:
    {'Germany', 
    'W&uuml;rttemberg (now Germany)', 
    'Mecklenburg (now Germany)', 
    'Hesse-Kassel (now Germany)', 
    'Schleswig (now Germany)', 
    'Bavaria (now Germany)', 
    'Germany (now Poland)', 
    'East Friesland (now Germany)', 
    'Germany (now France)', 
    'Prussia (now Germany)', 
    'Germany (now Russia)', 
    'West Germany (now Germany)'}



2. Use a regular expression object to filter for laureates with a "bornCountry" value starting with "Germany".
# Filter for laureates with a "bornCountry" value starting with "Germany"
criteria = {"bornCountry": Regex("^Germany")}
print(set(db.laureates.distinct("bornCountry", criteria)))


<script.py> output:
    {'Germany (now Poland)', 
    'Germany', 
    'Germany (now France)', 
    'Germany (now Russia)'}




3. Use a regular expression object to filter for laureates born in what was at the time Germany but is now another country.
# Fill in a string value to be sandwiched between the strings "^" and "now"
criteria = {"bornCountry": Regex("^" + "Germany \(" + "now")}
print(set(db.laureates.distinct("bornCountry", criteria)))

<script.py> output:
    {'Germany (now Poland)', 
    'Germany (now Russia)', 
    'Germany (now France)'}



4. Use a regular expression object to filter for laureates born in what is now Germany but at the time was another country.
#Filter for currently-Germany countries of birth. Fill in a string value to be sandwiched between the strings "now" and "$"
criteria = {"bornCountry": Regex("now" + " Germany\)" + "$")}
print(set(db.laureates.distinct("bornCountry", criteria)))


<script.py> output:
    {'W&uuml;rttemberg (now Germany)', 
    'Mecklenburg (now Germany)', 
    'Hesse-Kassel (now Germany)', 
    'Schleswig (now Germany)', 
    'Prussia (now Germany)', 
    'East Friesland (now Germany)', 
    'Bavaria (now Germany)', 
    'West Germany (now Germany)'}




#Wunderbar! There are twelve distinct values that represent countries that were or became part of Germany. Also, some laureates were born in parts of modern-day Poland, France, and Russia that were at the time part of Germany. Finally, it's true â€“ the home of Oktoberfest, Bavaria, was really its own country at one time!





















The prized transistor
Three people shared a Nobel prize "for their researches on semiconductors and their discovery of the transistor effect". We can filter on "transistor" as a substring of a laureate's "prizes.motivation" field value to find these laureates.

from bson.regex import Regex

# Save a filter for laureates with prize motivation values containing "transistor" as a substring
criteria = {"prizes.motivation": Regex("transistor")}

# Save the field names corresponding to a laureate's first name and last name
first, last = "firstname", "surname"
print([(laureate[first], laureate[last]) for laureate in db.laureates.find(criteria)])


<script.py> output:
    [('William Bradford', 'Shockley'), 
    ('John', 'Bardeen'), 
    ('Walter Houser', 'Brattain')]
Great! Shockley and Bareen and Brattain were a great team.

