High-share categories
In the year 3030, everybody wants to be a Nobel laureate. Over the last thousand years, many new categories have been added. You serve a MongoDB prizes collection with the same schema as we've seen. Many people theorize that they have a better chance in "high-share" categories. They are hitting your server with similar, long-running queries. It's time to cover those queries with an index.

Which of the following indexes is best suited to speeding up the operation 
db.prizes.distinct("category", {"laureates.share": {"$gt": "3"}})?

#YES [("laureates.share", 1), ("category", 1)]
#For a distinct query the filter argument is passed as a second argument, whereas the projected field is passed first.












Recently single?
A prize might be awarded to a single laureate or to several. For each prize category, report the most recent year that a single laureate -- rather than several -- received a prize in that category.

In [2]: db.prizes.find_one({})
Out[2]: 
{'_id': ObjectId('5bc56145f35b634065ba1997'),
 'category': 'chemistry',
 'laureates': [{'firstname': 'Frances H.',
   'id': '963',
   'motivation': '"for the directed evolution of enzymes"',
   'share': '2',
   'surname': 'Arnold'},
  {'firstname': 'George P.',
   'id': '964',
   'motivation': '"for the phage display of peptides and antibodies"',
   'share': '4',
   'surname': 'Smith'},
  {'firstname': 'Sir Gregory P.',
   'id': '965',
   'motivation': '"for the phage display of peptides and antibodies"',
   'share': '4',
   'surname': 'Winter'}],
 'year': '2018'}
 
 
 
 
 # Specify an index model for compound sorting
index_model = [("category", 1), ("year", -1)]
db.prizes.create_index(index_model)
Out[1]: 'category_1_year_-1'


# Collect the last single-laureate year for each category
report = ""
for category in sorted(db.prizes.distinct("category")):
    doc = db.prizes.find_one(
        {"category": category, "laureates.share": "1"},
        sort=[("year", -1)]
    )
    report += "{category}: {year}\n".format(**doc)

print(report)

<script.py> output:
    chemistry: 2011
    economics: 2017
    literature: 2017
    medicine: 2016
    peace: 2017
    physics: 1992
#Simply singular! It seems that physics is the most consistently shared prize category in modern times.


















Born and affiliated
Some countries are, for one or more laureates, both their country of birth ("bornCountry") and a country of affiliation for one or more of their prizes ("prizes.affiliations.country"). You will find the five countries of birth with the highest counts of such laureates.

from collections import Counter

# Ensure an index on country of birth
db.laureates.create_index([("bornCountry", 1)])


#Complete the skeleton dictionary comprehension to construct n_born_and_affiliated, the count of laureates as described above for each distinct country of birth.
# Collect a count of laureates for each country of birth
n_born_and_affiliated = {
    country: db.laureates.count_documents({
        "bornCountry": country,
        "prizes.affiliations.country": country
    })
    
    for country in db.laureates.distinct("bornCountry")
}

five_most_common = Counter(n_born_and_affiliated).most_common(5)
print(five_most_common)


<script.py> output:
    [('USA', 241), ('United Kingdom', 56), ('France', 26), ('Germany', 19), ('Japan', 17)]
#As you may guess, simple string matching of country names for this dataset is problematic, but this is a solid first pass.

