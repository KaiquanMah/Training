##return days between 2 dates
# finish your daysBetweenDates
# procedure. It will need to take into account leap years
# in addition to the correct number of days in each month.

def nextDay(year, month, day):
    """Simple version: assume every month has 30 days"""
    if day < 30:
        # give me the date of the first day every month
        return year, month, day + 1
    else:
        # when days < 30 and it is december
        # just increment year by 1
        # then month = 1
        # day = 1
        if month == 12:         
            return year + 1, 1, 1
            
        # when days < 30 and it is not december
        # just increment the month by 1
        else:
            return year, month + 1, 1








#added daysInMonth		
def daysInMonth(year,month):
	if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12
		return 31
	else:
		if month == 2:
      # uses the isLeapYear function below
			if isLeapYear(year):
				return 29
			else:
				return 28	#elseif month is Feb but not a leap year, return 28
	return 30






#added isLeapYear
def isLeapYear(year):
	if year % 400 == 0:
		return True
	if year % 0 == 0:
		return False
  # every 4 years is a leap year  
  # so return True
	if year % 4 == 0:
		return True
	return False			#ie else return False






def dateIsBefore(year1, month1, day1, year2, month2, day2):
    """Returns True if year1-month1-day1 is before year2-month2-day2. Otherwise, returns False."""
    # compare year
    if year1 < year2:
        return True
    if year1 == year2:
        # compare month
        if month1 < month2:
            return True
        if month1 == month2:
            # compare day
            return day1 < day2
    return False        







#assertion				#gives an assertion error msg if fail
#assert <expression>
#	False => fail

assert not dateIsBefore(year2, month2, day2, year1, month1, day1)
days = 0









def daysBetweenDates(year1, month1, day1, year2, month2, day2):
    """Returns the number of days between year1/month1/day1
       and year2/month2/day2. Assumes inputs are valid dates
       in Gregorian calendar."""
    # program defensively! Add an assertion if the input is not valid!
    assert not dateIsBefore(year2, month2, day2, year1, month1, day1)
    # initialise 'days' as 0
    days = 0
    while dateIsBefore(year1, month1, day1, year2, month2, day2):
        # as long as date 1 is before date 2
        # find the next day
        year1, month1, day1 = nextDay(year1, month1, day1)
        # increment 'day counter so far' by 1
        days += 1
    return days





# create a unit test function
def test():
    # enter some sample unit test vaues
    # => input arguments and expected result
    test_cases = [((2012,1,1,2012,2,28), 58), 
                  ((2012,1,1,2012,3,1), 60),
                  ((2011,6,30,2012,6,30), 366),
                  ((2011,1,1,2012,8,8), 585 ),
                  ((1900,1,1,1999,12,31), 36523)]
    
    # for each input arguments + expected result combo
    for (args, answer) in test_cases:
        result = daysBetweenDates(*args)
        if result != answer:
            print "Test with data:", args, "failed"
        else:
            print "Test case passed!"



# define another unit test function using 'assert'
def mytest():
	#tests with 30-day months
	assert daysBetweenDates(2017,1,1, 2017,1,1) == 0
	assert daysBetweenDates(2017,1,1, 2017,1,2) == 1
	assert nextDay(2017,1,1) == (2017,1,2)
	assert nextDay(2017,4,30) == (2017,5,1)
	assert nextDay(2017,12,31) == (2018,1,1)
	assert nextDay(2017,2,28) == (2017,3,1)
	assert nextDay(2017,9,30) == (2017,10,1)	
	assert nextDay(2016,2,28) == (2016,2,29)			#leap year
	assert daysBetweenDates(2016,1,1, 2017,1,1) == 366	#leap year
	assert daysBetweenDates(2017,1,1, 2018,1,1) == 365
	assert daysBetweenDates(2017,1,24, 2018,6,29) == 156
	print "Tests finished"



# call the 'test' unit test function
test()
