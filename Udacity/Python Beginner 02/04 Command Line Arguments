#command line arguments

#enter these in the python code editor
#argv_demo.py file
'' Accept command line arguments to the module '''

program = 'argv_demo.py'
source = 'default.src'
dest = 'default.dst'


def show_config():
    print('Here is the current configuration:')
    print('Program: %s' % program)
    print('Source: %s' % source)
    print('Destination: %s' % dest)
	
    if __name__ == '__main__':				#test module to make sure it is working properly; execute this block of code directly in the command line interface
      import sys
      print('Here is sys.argv: %s' % sys.argv)		#sys.argv allows command line arguments to be passed to a function in a module/script
      
        if len(sys.argv) > 2: # Two or more arguments passed
            # I JUST WANT THE 1ST ITEM + THE 1ST 2 ARGUMENTS
            program, source, dest = sys.argv[:3]

        elif len(sys.argv) > 1: # Only one argument passed
            # I JUST WANT THE 1ST ITEM + SOLE ARGUMENT
            program, source = sys.argv[:2]

        else: # No arguments passed
            # I JUST WANT THE 1ST ITEM
            program = sys.argv[0]


show_config()						# show_config() will print out information about the current configuration, 
                        # the value of the program, source, and dest variables

	
  
  
  
  
  
  
  
#enter these in the command prompt window	

#current prompt is: C:\Python34\myscripts>
python argv_demo.py						#we used python scriptname.py to run the script, so __name__ == __main__ is TRUE as it is in the main namespace when run directly

#output is:
#Here is sys.argv: ['argv_demo.py']		#without even passing any arguments, except to Python itself, the name of the program, sys.argv, contains just the name of the script
#Here is the current configuration:		#execute from show_config()
#Program: argv_demo.py
#Source: default.src
#Destination: default.dst




#enter these in the command prompt window	

#current prompt is: C:\Python34\myscripts>
python argv_demo.py one.src

#output is:
#Here is sys.argv: ['argv_demo.py', 'one.src']	#show you the arguments
#Here is the current configuration:
#Program: argv_demo.py
#Source: one.src
#Destination: default.dst




#enter these in the command prompt window	

#current prompt is: C:\Python34\myscripts>
python argv_demo.py one.src two.dst
#output is:
#Here is sys.argv: ['argv_demo.py', 'one.src', 'two.dst']
#Here is the current configuration:
#Program: argv_demo.py
#Source: one.src
#Destination: two.src





#enter these in the command prompt window	

#current prompt is: C:\Python34\myscripts>
argv_demo.py one.src two.dst			#eg dont use python as a prefix; execute script implicitly
#The output is:							#sys.argv will not populate properly
#Here is sys.argv: ['C:\\Python34\myscripts\argv_demo.py']
#Here is the current configuration:
#Program: C:\Python34\myscripts\argv_demo.py
#Source: default.src
#Destination: default.dst


