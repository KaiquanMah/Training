#docstrings
''' The module docstring appears at top of the file		#''' with words at the start of the file will be the docstring of the file
														#single/multi-line docstring
If a longer description of more than one line is needed,
then leave a blank line after the first line
and then start a new paragraph with your longer description.

Blank lines should also be used to separate multiple
paragraphs as necessary.

PEP 257 defines the technical details of docstrings.	#PEP=python enhancement proposal
'''








class DocumentMe():
	'''The class docstring follows the same rules. '''
	
	def _init_(self): 
		  ‘’’Method docstrings can also be used ‘’’
		  self. text = ''' Triple-quoted strings can also be
      used to hold WYSIWYG
      formatted string. '''


  def funk () :
      ''' Normal functions should have docstrings too. '''
      pass

      ''' Docstrings can be used as long comments, as well. '''
    
    
  print ('The module docstring:', __doc__ )
  print ('The class docstring:' , DocumentMe.__doc__)		#classname.__doc__
  print ('A method docstring:' , DocumentMe.__init__.__doc__)
  print ('A function docstring:' , funk.__doc__)			#functionname.__doc__
  print ('Docstrings are used by Python\'s help function:')


help(__name__)			#help on the name attribute
help(DocumentME)		#help on function and class
help(funk)
	












#code comments
''' Module docstrings are a part of comments.

Comments are documented in PEP 8. '''

class Simple():
    ''' Class docstrings should be included as comments. '''
	
	# Comments can be included at the same level of indentation.
	# Block comments start each line the same way.
	
	def __init__(self, value): # Inline comments share a line with code.
		''' Method docstrings are also important comments. '''
		self.value = value

    def double(self): # Avoid obvious comments
		''' Return double the initial value '''
		return 2 * self.value # triple the value
        # Comments that conflict with the code
        # are worse than no comments at all

	def __mul__(self, value):
		''' Implement the * operator for self.value * value '''
		return self.value * value

	def __rmul__(self, value):
		''' Implement the * operator for reversed operands '''
		return value * self.value    
		

def triple(value):
    ''' Return three times the value '''
    return 3 * value
	
	
simple = Simple(10) # Create an instance of the Simple class
print ('Double the simple value is:', simple.double()) # double using method
print ('Triple the simple value is:', triple(simple)) # triple using function
print ('Comments do not appear in the automatically generated help')

help(__name__)






#https://www.python.org/dev/peps/pep-0257/
#PEP257
