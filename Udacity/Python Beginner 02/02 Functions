# Define functions
# Functions are defined with the "def" keyword in Python
# return keyword exits from function with a value
# functions can accept an unlimited number of arguments


def subproc():					#sub routine = sub procedure
    print('I do something')
    print('But return nothing')
	
subproc()
#print
#I do something
#But return nothing


print(subproc())
#no params to find
#sub procedure only prints and does not return an explicit value, so

#print
#I do something
#But return nothing
#None











#all codes for functions section should be typed in the code editor
import random					#import 'random' module
faces = ('heads', 'tails')


def funcproc():
	return random.choice(faces) 	#return causes an exit from the function with the value


for flipcoin in range(5):
    print(funcproc(), end=' ')
print()		#print a blank line

#print
#tails tails heads heads heads










def iadd(arg1, arg2):				#give arguments legal names
    '''Perform inline + operations'''			#''' underneath function name is for doc string of your function
    return arg1 + arg2
	
#iadd was a defined function for concatenation
print('iadd(3, 5) ->', iadd(3,5))	#iadd(3, 5) -> 8
print('iadd("dy", "namic") ->', iadd("dy", "namic")) #iadd("dy", "namic") -> dynamic








def isum(*args):
    '''Return a total of the numeric args'''
    print('args ->', args)
    
    total = 0
    for arg in args:
		    total += arg
        
	  return total


print('isum(1,2,3,4,5) ->', isum(1,2,3,4,5))
#print args -> (1, 2, 3, 4, 5)			#inner isum prints the arguments first
#print isum(1,2,3,4,5) -> 15			#then the outer print statement prints the total isum number returned from the function





params = (5,4,3,2,1)
print('isum(*params) ->', isum(*params))
#args -> (5, 4, 3, 2, 1)				#inner isum prints args as defined in the isum function
#isum(*params) -> 15					#outer print statement runs and prints the returned isum value












def ilist(alpha, beta='default', gamma='assumed'):
    return alpha, beta, gamma
	

print("ilist ('required") ->", ilist('required'])		#print ilist ('required") -> ('required', 'default', 'assumed')		#alpha is based on what you enter; beta and gamma have assigned values




print("ilist('pos1', 'pos2', 'pos3') ->", 
	ilist('pos1', 'pos2', 'pos3')) 		#print ilist ( 'pos1', 'pos2', 'pos3' ) -> ( 'pos1', ‘pos2', 'pos3')		#if subsequent elements are defined, these subsequent elements will override even the elements defined in the original function




print("ilist(gamma='pos1', alpha='pos2', beta='pos3') ->",
      ilist(gamma='pos1', alpha='pos2', beta='pos3'))	
#print ilist (gamma='pos1', alpha='pos2', beta='pos3') -> ('pos2', 'pos3', 'pos1')
# python knows to assign the values to the right input arguments
# then print out accordingly based on the variable values
# instead of taking the position's value blindly => which would otherwise have been ('pos1', 'pos2', 'pos3')

	  
    
    
alphabet = {'alpha':'α', 'beta':'β', 'gamma':'Y'}
print('ilist(**alphabet) ->', ilist(**alphabet))		
#print ilist(**alphabet) -> ( 'α', 'β', 'Y' )







#pass a (iflex) dictionary into a function
def iflex(**kwargs):
    print('kwargs ->', kwargs)
    
    for key in kwargs:
		    print(key, '->', kwargs[key])		#keyword and value
	  return tuple(kwargs.values())


alphabet = ()	
print('iflex(**alphabet) ->', iflex(**alphabet))



#kwargs -> { }
#iflex(**alphabet) -> ()





alphabet = {'delta':'α', 'sigma': '∑', 'pi': 'm'}
print('iflex(**alphabet) ->', iflex(**alphabet))

#*****complicated***
#iflex prints kwargs and all the key and values

#kwargs -> ( ' delta': ' σ', ' sigma' : ' ∑ ', 'pi' : ' m ' }

#then go into the for loop and print each dictionary's key and value combination
#delta -> σ
#sigma -> ∑
#pi -> m

#then come out of iflex function and execute the print iflex line; values at the back are values returned by the iflex function
#iflex(**alphabet) -> ('σ', '∑', 'm')]




