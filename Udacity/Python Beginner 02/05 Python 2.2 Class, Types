#class and type
#with python 2.2, types have been unified with classes -> ALL are now types


# back to python shell and code editor; no command line interface
#argv_demo.py
''' Python classes are all types.

The builtin classes have their own types.
User-defined classes can inherit their type
from the builtin classes or the generic type.

The type function can display the type of an object.
The type function can also define a new type.
The class statement is typically used to define a new type.
'''

print('The type of 1 is:', type(1))
print('The type of [] is:', type([]))



#output in shell
#The type of 1 is: <class 'int’>
#The type of [] is: <class 'list'>















#https://www.geeksforgeeks.org/python-type-function/
#type(object)
#type(name, bases, dict)
# Parameters :
#   name : name of class, which later corresponds to the __name__ attribute of the class.
#   bases : tuple of classes from which the current class derives. Later corresponds to the __bases__ attribute.
#   dict : a dictionary that holds the namespaces for the class. Later corresponds to the __dict__ attribute.

A_class = type('A_class', (), {})		#string to identify the class, a () tuple to specify base classes, and a {} dictionary to specify class attributes
print('The type of A_class is:', type(A_class))

an_inst = A_class()
print('The type of an_inst is:', type(an_inst))

#The type of A_class is: <class 'type’>
#The type of an inst is: <class ‘__main__.A class’>







A_type = type('A_type', (), {'start':1,'a_method':
                           lambda self: 'This is an instance of ' +
                           str(self.__class__)})


type_inst = A_type()
print('The type of A_type is:', type(A_type))
#The type of A_type is: <class 'type' >
				   
print('The type of type_inst is:', type(type_inst))
#The type of type_inst is: <class’__ main__.A_type’>						   




print('Calling a_method returns:', type_inst.a_method())
#Calling a_method returns:
#This is an instance of <class ‘__main__.A_type’>









class Basic():
    start = 1

    def a_method(self):
		  return 'This is an instance of ' + str(self.__class__)


basic_inst = Basic()
print('The type of Basic is:', type(Basic))
#The type of Basic is: <class 'type' >

print('The type of basic_inst is:', type(basic_inst))
#The type of basic_inst is: <class ‘__main__. Basic’>

print('Calling a_method returns:', basic_inst.a_method())
#Calling a_method returns: This is an instance of <class ‘__main__.Basic’>








