# Bytes
# Values must be integers from 0-255 to represent a byte

#encode decode method 1
bytes_literal = b'Copyright \xc2\xa9'	#b will appear in front of your string
print('bytes_literal =', bytes_literal) 

print('bytes_literal.decode() ->',			#decode using unicode/UTF-8
	bytes_literal.decode())
	
print('bytes_literal.decode("utf-16") ->',	#decode using unicode/UTF-16
	bytes_literal.decode('utf-16'))

	
  
  

#encode decode method 2
str_literal = 'Trademark ®'
bytes_encoded = str_literal.encode()		#encode a string; variablename.encode()

print('bytes_encoded =', bytes_encoded)		
print('bytes_encoded.decode() ->',			#decode a string; variablename.decode()
	bytes_encoded.decode())
	
print('bytes(str_literal) ->',				#decode a string; bytes(variablename, 'decoding method')
	bytes(str_literal, 'utf-8')) 





#encode decode method 3
bytes_construct = bytes(str_literal, 'utf-8')	#decode; bytes(variablename, 'decoding method')
print('bytes_construct.decode() ->',
	bytes_construct.decode())

	
  
  
#encode decode method 4
bytes_from_hex = bytes.fromhex('54 72 61 64 65 6d 61 72 6b 20 c2 ae')	#decode using hexadecimals
print('bytes_from_hex.decode() ->',
	bytes_from_hex.decode())
	





# A bytes sequence behaves similar to a string							#count or give position of a character
print('str_literal.count("T") ->',
	str_literal.count('T'))

print('str_literal.index("T") ->',
	str_literal.index('T'))


# However, byte values are used instead of string values				#count or give position of a byte character
print('bytes_encoded.count(0x54) ->',
	bytes_encoded.count(0x54))
print('bytes_encoded.index(0x54) ->',
	bytes_encoded.index(0x54)) 
	
  
  
  
  
  
	
Click Run and select Run Module. 
The following output is displayed in the Python Shell: 

bytes_literal = b 'Copyright \xc2\xa9' 

bytes_literal.decode() 
-> Copyright © 
bytes_literal.decode("utf-8") 
-> Copyright © 

bytes_literal.decode("utf-16") 
-> (in this instance the output shows a set of Asian characters) 








bytes_encoded = b 'Trademark ® \xc2\xae' 
bytes_encoded.decode() 
-> Trademark ® 


# notes forgot to specify these lines here
str_literal = 'str_literal = 'Trademark ®'
bytes_construct = bytes(str_literal, 'utf-8')
bytes_from_hex = bytes.fromhex('54 72 61 64 65 6d 61 72 6b 20 c2 ae')	#decode using hexadecimals


# then bytes adds a 'b' in front of your string
bytes(str_literal) 
-> b 'Trademark ® \xc2\xae' 

bytes_construct.decode() 
-> Trademark ® 

bytes_from_hex.decode() 
-> Trademark ® 



str_literal.count("T") 
-> 1 
str_literal.index("T") 
-> 0 
bytes_encoded.count(0x54) 
-> 1 
bytes_encoded.index(0x54) 
-> 0]



