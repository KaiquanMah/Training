# Bytearray
# The bytearray class provides a mutable sequence 
# Values must be integers from 0-255 to represent a byte 

#5 ways to create a bytearray object
empty_array = bytearray() 		#empty array
null_array = bytearray(11)		#initialise array with 11 elements which are 0/null values
ints_array = bytearray((84, 114, 97, 100, 101, 109, 97, 114, 107, 32, 194, 174)) 	#initialise array by specifying sequence of bytes as integers
str_array  =  bytearray('Trademark ®', 'utf-8') 	#initialise array by specifying your String and encoding method
bytes_array = bytearray(b'Trademark ® \xc2\xae') 		#initialise array by specifying your bytes object


print('bytes_array =', bytes_array) 				#print bytes_array in encoded form
print('bytes_array.decode() ->', 					#print bytes_array in decoded form
	bytes_array.decode()) 

	
  
  
  
# A bytearray sequence behaves similar to a string 
str_literal = 'Trademark ®'

print('str_literal.count("T") ->', 
	str_literal.count('T')) 
print('str_literal.index("T") ->',
	str_literal.index('T')) 


# However, byte values can also be used instead of string values 
print('bytes_array.count(0x54) ->', 
	bytes_array.count(0x54)) 
print('bytes_array.index(0x54) ->', 
	bytes_array.index(0x54)) 






# Bytearray objects have methods to mutate them (i.e. add or remove elements from an array)
bytes_array.append(32)							#append = add; append(32) = add a space to the end
print('bytes_array =', bytes_array) 			#bytes_array = bytearray(b'Trademark \xc2\xae')

bytes_array.extend((194, 174)) 					#extend = add; extend((194, 174)) = add 2 more bytes corresponding to the numbers to the end
print('bytes_array =', bytes_array) 			#bytes_array = bytearray(b'Trademark \xc2\xae \xc2\xae')
print('bytes_array.decode() ->', 				#decode array
	bytes_array.decode())						#bytes_array = bytearray.decode() -> Trademark ® ® 

bytes_array.remove(0x54)						#remove(a specific character) will remove a specific character; hexadecimal 0x54 is 'T'
print('bytes_array=', bytes_array)				#bytes_array = bytearray.decode() -> rademark ® ® 

bytes_array.insert(0, 0x54)						#insert(at a specific position, character to insert)
print('bytes_array =', bytes_array)				#bytes_array = bytearray.decode() -> Trademark ® ® 

bytes_array.pop()								#pop() removes last byte 
bytes_array.pop()
print('bytes_array.decode() ->', 				#bytes_array = bytearray.decode() -> Trademark ®
	bytes_array.decode())						
