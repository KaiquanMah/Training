# List
# The list class provides a mutable sequence of elements
# List - can append or reverse order of elements

empty_list = list()						#OR empty_list = []
print('empty_list ->', empty_list) 


list_str = list('hello') 
print('list_str ->', list_str) 


list_tup = list((1, 2, (3, 5, 7))) 		#Tuple contains parantheses; 2 tuples here
print('list_tup ->', list_tup) 			#Tuple 1- (1, 2, (3, 5, 7)), Tuple 2- (3, 5, 7)


list_syn = [3, 4, 'a', 'b']				#list of numbers and letters/strings
print('list_syn ->', list_syn)
print("'a' in list_syn ->", 'a' in list_syn)	#print LHS "", then print TRUE/FALSE depending on whether integer/letter is found in the specified list object
print("1 not in list_syn ->", 1 not in list_syn)


empty_list.append(5)					#append 1 element to the end of the list
print('empty_list ->', empty_list)

empty_list.append([6, 7])				#append = add the new elements by appending 1 list within the list you want
print('empty_list ->', empty_list)

last_elem = empty_list.pop()			#pop() removes the inner list
print('last_elem ->', last_elem)		#you can store the inner list in a new variable
print('empty_list ->', empty_list)

empty_list.extend([6, 7])				#extend  = add the new elements without adding 1 list within the list you want
print('empty_list ->', empty_list)

first_elem = empty_list.pop(0) print('first_elem ->', first_elem)		#pop(index no) removes the element in the position specified in the index no
print('empty_list ->', empty_list)

empty_list.insert(0, 10)				#insert(position no, element) to the list you want
print('empty_list ->', empty_list)
empty_list.insert(3, 100)
print('empty_list ->', empty_list)
empty_list.remove(7)					#remove(element)
print('empty_list ->', empty_list)
empty_list.clear()						#clear will clear all elements from the list and make it an empty list
print('empty_list ->', empty_list)




#list_str = list('hello') 
print('list_str ->', list_str)			#print the individual elements of the string
										#list_string -> ['h', 'e', 'l', 'l', 'o']
print('min(list_str) ->', min(list_str))	#min(list object) finds the smallest element
print('max(list_str) ->', max(list_str))	#max(list object) finds the largest element





#sorting
print('sorted(list_str) ->', sorted(list_str))	#sorted(list object) is a copy; not the original list
print('list_str ->', list_str)					#sort element from smallest to largest

list_str.sort()									#list object.sort() sorts the original list
print('list_str ->', list_str)


list_str.reverse()								#reverse order of the elements
print('list_str ->', list_str)
print('list_str.count("o") ->', list_str.count("o"))	#count no of elements with that character
print('list_str.index("o") ->', list_str.index("o"))	#find position of the element; error if element is not found in the list
print('len(list_str) ->', len(list_str))				#len(list object) = count no of elements in the list object



