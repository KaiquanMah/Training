#Data type
y = 0xA			#hexadecimal
y = 0o12		#octal (Py 2 uses 012 - NOT 0o)
y = 0b1012		#binary

#Comparison
==
!=
>
>=
<
<=

#Arithmetic
+ - * / ** (power) // (integer divisor) % (remainder)
5 // 10 = 0
5 % 10 = 5

divmod(number1,number2) = ( // output, % output)
abs(number1)		#absolute value
int(number1)		#convert to integer
float(number1)		#convert to float
type(variablename)	#check data type: int or float
round(number1, # of significant digits)		#round up number to # of significant digits


x += y	#x = x+y; update x by adding y to existing value of x
x -= y
x *= y
x /= y



#infinity
float('inf')		#infinity
float('-inf')		#negative infinity
float('-nan')		#not a number

#check infinity 	or 		not a number
print(math.isinf(variablename with inf assigned))		#check if something is infinity OR negative infinity
print(math.isinf(variablename with -inf assigned))
print(math.isnan(variablename with nan value assigned))	#check if something is not a number

#math functions
print(math.factorial(number))
print(math.log(number))
print(math.log10(number))
print(math.exp(number))
print(math.sqrt(number))

#trigo functions
print(math.cos(number))
print(math.acos(number))			#arccos

#hyperbolic functions
print(math.asinh(number))
print(math.acosh(number))

#angular conversion
print(math.degrees(number))
print(math.radians(number))

#boolean
bool(x)			#TRUE if x is 1 or NOT 0; 
#FALSE if x is 0, 
#0.0, 
#None, 
#' '		empty sequence, 
#[]			empty sequence, 
#()			empty sequence, 
#{}			empty mapping, 
#set([])	empty mapping

#Bitwise operators	(work on integers; dont work on floats)
number1 | number2		#Or
number1 ^ number2		#Xor
number1 & number2		#And
number1 << number2		#Left Shift
number1 >> number2		#Right Shift
number1 ~ number2		#Inversion
