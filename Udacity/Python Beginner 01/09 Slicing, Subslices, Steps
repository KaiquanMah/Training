# Slicing
# Slicing allows access to one or more elements of a sequence 
# Immutable sequences include tuples, strings, and bytes

a_tuple = ('a', 1, 2, (3, 4))
a_string = 'immutable'
a_bytes = b'sequence'



# Mutable sequences include lists and bytearrays
a_list = [5, 6, 7, 8, (4, 5)]
a_byte_array = bytearray(b'mutable')



# Accessing is allowed in all sequences		#[index no starting from 0]
print('a_tuple[0] ->', a_tuple[0])			#a_tuple[0] -> a
print('a_string[1] ->', a_string[1])		#a_string[1] -> m
print('a_bytes[2] ->', a_bytes[2])			#return byte value of an element
print('a_list[3] ->', a_list[3])			#a_list[3] -> 8
print('a_byte_array[4] ->', a_byte_array[4])	



# Negative slicing
# Negative indexes are from the end
print('a_tuple[-1] ->', a_tuple[-1])		#-1 refers to last element; (3, 4)
print('a_string[-2] ->', a_string[-2])		#-2 = 2md last element; l
print('a_bytes[-3] ->', a_bytes[-3])
print('a_list[-4] ->', a_list[-4])			#6
print('a_byte_array[-5] ->', a_byte_array[-5])



# Subslices can be accessed with two indexes
print('a_list[0:2] ->', a_list[0:2])		#list[start at position no:up to but not including position no]
print('a_list[:2] ->', a_list[:2])			#up to, but not including 3rd element
print('a_list[2:5] ->', a_list[2:5])
print('a_list[2:] ->', a_list[2:])			#from element 3 onwards
print('a_list[:] ->', a_list[:])			#ALL elements

list_ref = a_list							#variable links instead of copying and pasting to create the list; any updates will be updated in the variable and the original list
print('a_list is list_ref ->', a_list is list_ref)		#a_list is list_ref -> TRUE; because they reference the same object

list_copy = a_list[:]						#variable copy and paste contents from the original list; updates to list or variable will not be reflected in the other list/variable
print('a_list is list_copy ->', a_list is list_copy)	#a_list is list_copy -> FALSE; because they reference different objects













# Steps can be taken with a third parameter
print('a_list[::2] ->', a_list[::2])		#ALL elements in steps of 2, ie skip every other entry
print('a_list[1:4:2] ->', a_list[1:4:2])	#start from 2nd element up to but not including 5th element, in steps of 2
print('a_string[::-1] ->', a_string[::-1])	#ALL elements in reverse order


# Use additional slices to access elements with sequences
print('a_list ->', a_list)					#a_list -> [5, 6, 7, 8, (4, 5)]]
print('a_list[4] ->', a_list[4])			#a_list[4] -> [(4, 5)]]
print('a_list[4][0] ->', a_list[4][0])		#[position of element within outer list][position of element within inner list]; so we get 4
print('a_list[4][1] ->', a_list[4][1])		#we get 5


# Mutable sequences can be updated with slices
print('a_list ->', a_list)

a_list[0] = 'five'							#assign a new value in place of the original value at this position in the list object
print('a_list ->', a_list)					#a_list -> ['five', 6, 7, 8, (4, 5)]

a_list[1:4] = [10, 11, 12]					#replace from position no, up to but not including position no
print('a_list ->', a_list)					#a_list -> ['five', 10, 11, 12, (4, 5)]









# A slice object can be used in the [ ] for slicing
# https://www.programiz.com/python-programming/methods/built-in/slice
# use the python slice function to define the slice object 'a_slice'
# slice(start, stop, step)
# slice takes in 3 input parameters
#   start (optional) - Starting integer where the slicing of the object starts. Default to None if not provided.
#   stop - Integer until which the slicing takes place. The slicing stops at index stop -1 (last element).
#   step (optional) - Integer value which determines the increment between each index for slicing. Defaults to None if not provided.

a_slice = slice(4)							#slice(elements up to but not including position no), assign slice to variable
print('a_slice ->', a_slice)				#a_slice ->(None, 4, None); No specified starting position so start from 0; up to position 4; no steps so increment by +1 per step as per default


# from above
# a_list was ['five', 10, 11, 12, (4, 5)]
# and the slice was up to BUT NOT INCLUDING position 4
# so
print('a_list[a_slice] ->', a_list[a_slice]) #a_list[a_slice] -> ['five', 10, 11, 12]




a_slice = slice(1,5)						#slice(start at, end at but not including)
print('a_slice ->', a_slice)				#a_slice ->(1, 5, None); start at position 1 and end at but not including position 5
# position 1 was '10'
# position 4 was (4, 5)
# no element at position 5
print('a_list[a_slice] ->', a_list[a_slice])	#a_list[a_slice] -> [10, 11, 12, (4, 5)]



a_slice = slice(1,5,2)						#slice(start at, end at but not including, step value)
print('a_slice ->', a_slice)				#a_slice -> (1,5,2)
print('a_list[a_slice] ->', a_list[a_slice])	#a_list[a_slice] -> [10, 12]



