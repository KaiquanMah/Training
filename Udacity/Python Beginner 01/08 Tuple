# Tuple
# The tuple class provides a immutable sequence of elements
# Tuple - cant append or reverse order of elements


empty_tuple = tuple()			#OR empty_tuple = ()	#create empty tuple
print('empty_tuple ->', empty_tuple)


tuple_str = tuple('hello')				#each character in the string element breaks up into individual character elements
print('tuple_str ->', tuple_str)		#tuple_str -> ('h','e','l','l','o')


tuple_list = tuple([1, 2, [3, 5, 7]])	#inner list within outer tuple; inner list remains as a list and not as a tuple
print('tuple_list ->', tuple_list)		#tuple_list -> (1, 2, [3, 5, 7])


singleton_tuple = (1,)					#singleton = only 1 element in the tuple
print('singleton_tuple ->', singleton_tuple)	
#singleton_tuple -> (1,)





tuple_syn = (3, 4, 'a', 'b')
print('tuple_syn ->', tuple_syn)
print("'a' in tuple_syn ->", 'a' in tuple_syn)	
#'a' is found in the tuple, so TRUE		
#'a' in tuple_syn -> TRUE
print("1 not in tuple_syn ->", 1 not in tuple_syn)		
#1 in tuple_syn -> TRUE


#tuple_str = tuple('hello')
print('tuple_str ->', tuple_str)		#tuple_str -> ('h','e','l','l','o')
print('min(tuple_str) ->', min(tuple_str))	#min(tuple_str) -> e
print('max(tuple_str) ->', max(tuple_str))	#min(tuple_str) -> o
print('sorted(tuple_str) ->', sorted(tuple_str))	#sort from smallest element to largest element; give you the list sequence and not a tuple sequence		#tuple does not allow reverse sequence
print('tuple_str.count("o") ->', tuple_str.count("o"))	#count no of 'o'
print('tuple_str.index("o") ->', tuple_str.index("o"))	#position of 'o'
print('len(tuple_str) ->', len(tuple_str))				#no of elements in the tuple
