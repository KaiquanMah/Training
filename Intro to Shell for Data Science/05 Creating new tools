How can I edit a file?
Unix has a bewildering variety of text editors. For this course, we will use a simple one called Nano. If you type nano filename, it will open filename for editing (or create it if it doesn't already exist). You can move around with the arrow keys, delete characters using backspace, and do other operations with control-key combinations:
Ctrl + K: delete a line.
Ctrl + U: un-delete a line.
Ctrl + O: save the file ('O' stands for 'output').
Ctrl + X: exit the editor.


Run nano names.txt to edit a new file in your home directory and enter the following four lines:
Lovelace
Hopper
Johnson
Wilson
To save what you have written, type Ctrl + O to write the file out, then Enter to confirm the filename, then Ctrl + X and Enter to exit the editor.



In the file
^G Get help
^R Read file
^C Write out
^W Where is
^K Cut text
^U Uncut Text
^\ Replace
^T To spell
^J Justify
^X Exit


After exit from the file
^G Get help
^C Cancel
M-D DOS format
M-T Mac format
M-A Append
M-P Prepend
M-B Backup
^T To files










-----------------------------------------------------------------------------------------------------
How can I record what I just did?
When you are doing a complex analysis, you will often want to keep a record of the commands you used. You can do this with the tools you have already seen:

Run history.
Pipe its output to tail -n 10 (or however many recent steps you want to save).
Redirect that to a file called something like figure-5.history.

This is better than writing things down in a lab notebook because it is guaranteed not to miss any steps. It also illustrates the central idea of the shell: simple tools that produce and consume lines of text can be combined in a wide variety of ways to solve a broad range of problems.


Copy the files seasonal/spring.csv and seasonal/summer.csv to your home directory.
$ cp seasonal/s* ~
$ ls
backup  bin  course.txt  people  seasonal  spring.csv  summer.csv


Use grep with the -h flag (to stop it from printing filenames) and -v Tooth (to select lines that don't match the header line) to select the data records from spring.csv and summer.csv in that order and redirect the output to temp.csv.
$ grep -h -v Tooth spring.csv summer.csv > temp.csv
$ cat temp.csv
2017-01-25,wisdom
2017-02-19,canine
2017-02-24,canine
2017-02-28,wisdom
2017-03-04,incisor
2017-03-12,wisdom
2017-03-14,incisor
2017-03-21,molar
2017-04-29,wisdom
2017-05-08,canine
2017-05-20,canine
2017-05-21,canine
2017-05-25,canine
2017-06-04,molar
2017-06-13,bicuspid
2017-06-14,canine
2017-07-10,incisor
2017-07-16,bicuspid
2017-07-23,bicuspid
2017-08-13,bicuspid
2017-08-13,incisor
2017-08-13,wisdom
2017-09-07,molar
2017-01-11,canine
2017-01-18,wisdom
2017-01-21,bicuspid
2017-02-02,molar
2017-02-27,wisdom
2017-02-27,wisdom
2017-03-07,bicuspid
2017-03-15,wisdom
2017-03-20,canine
2017-03-23,molar
2017-04-02,bicuspid
2017-04-22,wisdom
2017-05-07,canine
2017-05-09,canine
2017-05-11,incisor
2017-05-14,incisor
2017-05-19,canine
2017-05-23,incisor
2017-05-24,incisor
2017-06-18,incisor
2017-07-25,canine
2017-08-02,canine
2017-08-03,bicuspid
2017-08-04,canine




$ history | tail -n 3 > steps.txt
$ cat steps.txt
    4  cat temp.csv
    5  tail -n 3 history > steps.txt
    6  history | tail -n 3 > steps.txt
    
    
    
    
    
    
    
    
    
    
    
    
    
    
------------------------------------------------------------------------------
How can I save commands to re-run later?
You have been using the shell interactively so far. But since the commands you type in are just text, you can store them in files for the shell to run over and over again. To start exploring this powerful capability, put the following command in a file called headers.sh:
head -n 1 seasonal/*.csv
This command selects the first row from each of the CSV files in the seasonal directory.

Once you have created this file, you can run it by typing:
bash headers.sh
This tells the shell (which is just a program called bash) to run the commands contained in the file headers.sh, which produces the same output as running the commands directly.
$ bash headers.sh
==> seasonal/autumn.csv <==Date,Tooth

==> seasonal/spring.csv <==
Date,Tooth

==> seasonal/summer.csv <==
Date,Tooth

==> seasonal/winter.csv <==
Date,Tooth



Use nano dates.sh to create a file called dates.sh that contains this command:
cut -d , -f 1 seasonal/*.csv
to extract the first column from all of the CSV files in seasonal.


Use bash to run the file dates.sh.
$ bash dates.sh
Date
2017-01-05
2017-01-17
2017-01-18
2017-02-01
2017-02-22
2017-03-10
2017-03-13
2017-04-30
2017-05-02
2017-05-10
2017-05-19
2017-05-25
2017-06-22
2017-06-25
2017-07-10
2017-07-10
2017-07-20
2017-07-21
2017-08-09
2017-08-16
Date
2017-01-25
2017-02-19
2017-02-24
2017-02-28
2017-03-04
2017-03-12
2017-03-14
2017-03-21
2017-04-29
2017-05-08
2017-05-20
2017-05-21
2017-05-25
2017-06-04
2017-06-13
2017-06-14
2017-07-10
2017-07-16
2017-07-23
2017-08-13
2017-08-13
2017-08-13
2017-09-07
Date
2017-01-11
2017-01-18
2017-01-21
2017-02-02
2017-02-27
2017-02-27
2017-03-07
2017-03-15
2017-03-20
2017-03-23
2017-04-02
2017-04-22
2017-05-07
2017-05-09
2017-05-11
2017-05-14
2017-05-19
2017-05-23
2017-05-24
2017-06-18
2017-07-25
2017-08-02
2017-08-03
2017-08-04
Date
2017-01-03
2017-01-05
2017-01-21
2017-02-05
2017-02-17
2017-02-25
2017-03-12
2017-03-25
2017-03-26
2017-04-04
2017-04-18
2017-04-26
2017-04-26
2017-04-26
2017-04-27
2017-05-08
2017-05-13
2017-05-14
2017-06-17
2017-07-01
2017-07-17
2017-08-10
2017-08-11
2017-08-11
2017-08-13














------------------------------------------------------------------------------
How can I re-use pipes?
A file full of shell commands is called a *shell script, or sometimes just a "script" for short. Scripts don't have to have names ending in .sh, but this lesson will use that convention to help you keep track of which files are scripts.

Scripts can also contain pipes. For example, if all-dates.sh contains this line:
cut -d , -f 1 seasonal/*.csv | grep -v Date | sort | uniq
then:
bash all-dates.sh > dates.out
will extract the unique dates from the seasonal data files and save them in dates.out.



A file teeth.sh in your home directory has been prepared for you, but contains some blanks. Use Nano to edit the file and replace the two ____ placeholders with seasonal/*.csv and -c so that this script prints a count of the number of times each tooth name appears in the CSV files in the seasonal directory.
cut -d , -f 2 seasonal/*.csv | grep -v Tooth | sort | uniq -c

Use bash to run teeth.sh and > to redirect its output to teeth.out.
bash teeth.sh > teeth.out

Run cat teeth.out to inspect your results.
$ cat teeth.out
     15 bicuspid
     31 canine
     18 incisor
     11 molar
     17 wisdom
     
     
Nice! This all may feel contrived at first, but the nice thing is that you are automating parts of your workflow step by step. Something that comes in really handy as a data scientist!

     










------------------------------------------------------------------------------
How can I pass filenames to scripts?
A script that processes specific files is useful as a record of what you did, but one that allows you to process any files you want is more useful. To support this, you can use the special expression $@ (dollar sign immediately followed by at-sign) to mean "all of the command-line parameters given to the script".

For example, if unique-lines.sh contains this:
sort $@ | uniq
then when you run:
bash unique-lines.sh seasonal/summer.csv
the shell replaces $@ with seasonal/summer.csv and processes one file. 

If you run this:
bash unique-lines.sh seasonal/summer.csv seasonal/autumn.csv
it processes two data files, and so on.


Edit the script count-records.sh with Nano and fill in the two ____ placeholders with $@ and -l respectively so that it counts the number of lines in one or more files, excluding the first line of each.
https://explainshell.com/explain?cmd=tail+-q+-n+%2B2+test.log
-q        never output headers giving file names
-n +2 start from second line onwards
tail -q -n +2 $@ | wc -l


Run count-records.sh on seasonal/*.csv and redirect the output to num-records.out using >.
$ bash count-records.sh seasonal/*.csv > num-records.out
$ cat num-records.out
92














---------------------------------------------------------------------------
How can I process a single argument?
As well as $@, the shell lets you use $1, $2, and so on to refer to specific command-line parameters. You can use this to write commands that feel simpler or more natural than the shell's. For example, you can create a script called column.sh that selects a single column from a CSV file when the user provides the filename as the first parameter and the column as the second:

cut -d , -f $2 $1
and then run it using:
bash column.sh seasonal/autumn.csv 1
Notice how the script uses the two parameters in reverse order.


The script get-field.sh is supposed to take a filename, the number of the row to select, the number of the column to select, and print just that field from a CSV file. For example:
bash get-field.sh seasonal/summer.csv 4 2
should select the second field from line 4 of seasonal/summer.csv. Which of the following commands should be put in get-field.sh to do that?

give me the first 4 records
then give me the last record
then give me col 2
head -n $2 $1 | tail -n 1 | cut -d , -f $3












---------------------------------------------------------------
How can one shell script do many things?
Our shells scripts so far have had a single command or pipe, but a script can contain many lines of commands. For example, you can create one that tells you how many records are in the shortest and longest of your data files, i.e., the range of your datasets' lengths.

Note that in Nano, "copy and paste" is achieved by navigating to the line you want to copy, pressing CTRL + K to cut the line, then CTRL + U twice to paste two copies of it.



Use Nano to edit the script range.sh and replace the two ____ placeholders with $@ and -v so that it lists the names and number of lines in all of the files given on the command line without showing the total number of lines in all files. (Do not try to subtract the column header lines from the files.)
wc -l $@ | grep -v Total


Add sort -n and head -n 1 in that order to the pipeline in range.sh to display the name and line count of the shortest file given to it.
wc -l $@ | grep -v Total | sort -n | head -n 1


Add a second line to range.sh to print the name and record count of the longest file in the directory as well as the shortest. This line should be a duplicate of the one you have already written, but with sort -n -r rather than sort -n.
sort -n -r        reverse the result of comparisons
wc -l $@ | grep -v Total | sort -n | head -n 1
wc -l $@ | grep -v Total | sort -n -r | head -n 1




Run the script on the files in the seasonal directory using seasonal/*.csv to match all of the files and redirect the output using > to a file called range.out in your home directory.
$ bash range.sh seasonal/* > range.out
$ cat range.out
  21 seasonal/autumn.csv
  26 seasonal/winter.csv











-------------------------------------------------------
How can I write loops in a shell script?
Shell scripts can also contain loops. You can write them using semi-colons, or split them across lines without semi-colons to make them more readable:

# Print the first and last data records of each file.
for filename in $@
do
    head -n 2 $filename | tail -n 1
    tail -n 1 $filename
done

(You don't have to indent the commands inside the loop, but doing so makes things clearer.)


The first line of this script is a comment to tell readers what the script does. Comments start with the # character and run to the end of the line. Your future self will thank you for adding brief explanations like the one shown here to every script you write.
for filename in $@
do
    cut -d , -f 1 $filename | grep -v Date | sort | head -n 1
    cut -d , -f 1 $filename | grep -v Date | sort | tail -n 1
done






Run date-range.sh on all four of the seasonal data files using seasonal/*.csv to match their names.
$ bash date-range.sh seasonal/*
2017-01-05
2017-08-16
2017-01-25
2017-09-07
2017-01-11
2017-08-04
2017-01-03
2017-08-13





Run date-range.sh on all four of the seasonal data files using seasonal/*.csv to match their names, and pipe its output to sort to see that your scripts can be used just like Unix's built-in commands.

$ bash date-range.sh seasonal/* | sort
2017-01-03
2017-01-05
2017-01-11
2017-01-25
2017-08-04
2017-08-13
2017-08-16
2017-09-07








----------------------------------------------------
What happens when I don't provide filenames?
A common mistake in shell scripts (and interactive commands) is to put filenames in the wrong place.
If you type:
tail -n 3
then since tail hasn't been given any filenames, it waits to read input from your keyboard.

This means that if you type:
head -n 5 | tail -n 3 somefile.txt
then tail goes ahead and prints the last three lines of somefile.txt, but head waits forever for keyboard input, since it wasn't given a filename and there isn't anything ahead of it in the pipeline.

Suppose you do accidentally type:
head -n 5 | tail -n 3 somefile.txt
What should you do next?
Use Ctrl + C to stop the running head program.
Yes! You should use Ctrl + C to stop a running program.

