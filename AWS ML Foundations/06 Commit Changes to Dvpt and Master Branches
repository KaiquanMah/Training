Scenario #3
Let's walk through the git commands that go along with each step in the scenario you just observed in the video above.

Step 1: Andrew commits his changes to the documentation branch, switches to the development branch, and pulls down the latest changes from the cloud on this development branch, including the change I merged previously for the friends group feature.
Commit changes on documentation branch
git commit -m "standardized all docstrings in process.py"

Switch to develop branch
git checkout develop

Pull latest changes on develop down
git pull





Step 2: Then, Andrew merges his documentation branch on the develop branch on his local repository, and then pushes his changes up to update the develop branch on the remote repository.
Merge documentation branch to develop
git merge --no-ff documentation

Push changes up to remote repository
git push origin develop




Step 3: After the team reviewed both of your work, they merge the updates from the development branch to the master branch. Now they push the changes to the master branch on the remote repository. These changes are now in production.
Merge develop to master
git merge --no-ff develop

Push changes up to remote repository
git push origin master



Resources
There's a great article on a successful git branching strategy that you should really read here.
http://nvie.com/posts/a-successful-git-branching-model/


Note on Merge Conflicts
For the most part, git makes merging changes between branches really simple. However, there are some cases where git will be confused on how to combine two changes, and asks you for help. This is called a merge conflict.
Mostly commonly, this happens when two branches modify the same file.
For example, in this situation, let’s say I deleted a line that Andrew modified on his branch. Git wouldn’t know whether to delete the line or modify it. Here, you need to tell git which change to take, and some tools even allow you to edit the change manually. If it isn’t straightforward, you may have to consult with the developer of the other branch to handle a merge conflict.
You can learn more about merge conflicts and methods to handle them here.
https://help.github.com/articles/about-merge-conflicts/













Model Versioning
In the previous example, you may have noticed that each commit was documented with a score for that model. This is one simple way to help you keep track of model versions. Version control in data science can be tricky, because there are many pieces involved that can be hard to track, such as large amounts of data, model versions, seeds, hyperparameters, etc.
Here are some resources for useful ways and tools for managing versions of models and large data. These are here for you to explore, but are not necessary to know now as you start your journey as a data scientist. On the job, you’ll always be learning new skills, and many of them will be specific to the processes set in your company.

How to Version Control Your Production Machine Learning Models
https://blog.algorithmia.com/how-to-version-control-your-production-machine-learning-models/

Versioning Data Science
https://shuaiw.github.io/2017/07/30/versioning-data-science.html
