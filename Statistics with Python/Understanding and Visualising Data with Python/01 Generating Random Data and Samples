Question 1
In the code block below, generate 3 normal random variables with mean 100 and standard deviation 1. 
This will require about 4 lines of code. Use the functions provided in this outline.
Import the numpy library
Set the seed to 123 to initialize environment so random variables are replicated according to the grader. (hint: np.random.seed(?))
Generate three random normal variables with mean 100 and standard deviation 1 and assign them to a variable named sample. (hint: sample = np.random.normal(?,?,?))
Print the variable sample.


Reference Documentation
https://docs.scipy.org/doc/numpy-1.15.1/reference/generated/numpy.random.seed.html
https://docs.scipy.org/doc/numpy-1.15.1/reference/generated/numpy.random.normal.html

# Write your function here
mean = 100
sd = 1

import numpy as np
np.random.seed(123)
variables = np.random.normal(mean, sd, 3)
print("Variables : ", variables)

Variables :  [  98.9143694   100.99734545  100.2829785 ]







2.
Question 2
Generating random samples from a population lies at the heart of statistics. In the code block below, draw a sample of size 10 from a set containing the integers 1 through 100.
This will require about 5 lines of code. Use the functions provided in this outline.  
Import the numpy library
Set the seed to 123 to initialize environment so random variables are replicated according to the grader. (hint: np.random.seed(?))
Create a vector called population, and put the numbers 1-100 into the population list. (hint: np.arange(?,?))
Generate a sample with length 10 from the population. (hint: sample = np.random.choice(?, ?)) and assign the output to a variable named sample.
Print the variable sample.

Reference Documentation
https://docs.scipy.org/doc/numpy-1.15.1/reference/generated/numpy.random.seed.html
https://docs.scipy.org/doc/numpy-1.15.1/reference/generated/numpy.arange.html
https://docs.scipy.org/doc/numpy-1.15.1/reference/generated/numpy.random.choice.html


import numpy as np
np.random.seed(123)
#https://numpy.org/doc/stable/reference/generated/numpy.arange.html
#up to and not including the 'stop #'
population = np.arange(1, 101)

#sample size
m = 10
sample = np.random.choice(a = population, size = m)
print("Sample :", sample)


Sample : [67 93 99 18 84 58 87 98 97 48]




