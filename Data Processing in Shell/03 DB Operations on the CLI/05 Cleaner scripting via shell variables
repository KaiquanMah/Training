Cleaner scripting via shell variables
Because SQL queries, by nature, can be long and complex, we will frequently need to deal with line breaks while passing in SQL queries to csvkit commands.
One way to work around this is to store the SQL queries as a shell variable, then pass in the shell variable in place of the SQL query where needed.

Fill in the csvsql command by calling upon the bash variable containing the SQL query instead of writing out the SQL query in full.
# Preview CSV file
ls
Spotify_MusicAttributes.csv  backup  bin


#wrong ans - have to write in a single line
# Store SQL query as shell variable
sqlquery = "SELECT * 
            FROM Spotify_MusicAttributes 
            ORDER BY duration_ms 
            LIMIT 1"

# Apply SQL query to Spotify_MusicAttributes.csv
csvsql --query "$sqlquery" Spotify_MusicAttributes.csv


CREATE TABLE "Spotify_MusicAttributes" (
        track_id VARCHAR NOT NULL,
        danceability DECIMAL NOT NULL,
        duration_ms DECIMAL NOT NULL,
        instrumentalness DECIMAL NOT NULL,
        loudness DECIMAL NOT NULL,
        tempo DECIMAL NOT NULL,
        time_signature DECIMAL NOT NULL
);










#right ans - have to write in a single line
# Store SQL query as shell variable
sqlquery="SELECT * FROM Spotify_MusicAttributes ORDER BY duration_ms LIMIT 1"

# Apply SQL query to Spotify_MusicAttributes.csv
csvsql --query "$sqlquery" Spotify_MusicAttributes.csv
track_id,danceability,duration_ms,instrumentalness,loudness,tempo,time_signature
118GQ70Sp6pMqn6w1oKuki,0.787,124016.0,0.784,-10.457,119.988,4.0



Going forward, we will make use of this way of storing and passing SQL queries for cleaner, more readable coding!

