Chaining commands using operators
The more we use command-line tools, the more we start stringing complex commands together. Sometimes it's for convenience, but other times, the output of one command can be used as input to another. Let's get some hands on practice with this by filling in the correct chain operators for the circumstances described in the instructions below.


Use the chain operator that allows csvlook to run first, and if it succeeds, then run csvstat.
# If csvlook succeeds, then run csvstat 
csvlook Spotify_Popularity.csv && csvstat Spotify_Popularity.csv
$ csvlook Spotify_Popularity.csv && csvstat Spotify_Popularity.csv
| track_id               | popularity |
| ---------------------- | ---------- |
| 118GQ70Sp6pMqn6w1oKuki |          7 |
| 6S7cr72a7a8RVAXzDCRj6m |          7 |
| 7h2qWpMJzIVtiP30E8VDW4 |          7 |
| 3KVQFxJ5CWOcbxdpPYdi4o |          7 |
| 0JjNrI1xmsTfhaiU1R6OVc |          7 |
| 3HjTcZt29JUHg5m60QhlMw |          7 |
| 42LWRdkWxM9aWmDImWvH6C |          7 |
| 32dMH9MvlTJaABrPHY52Yb |          7 |
| 5RCPsfzmEpTXMCTNk7wEfQ |          7 |
| 0y0mwXrdEzjUK5Nq8GDPnY |          7 |
| 3RSMqu36JZnmMkrnNmnqyd |          6 |
| 1o0fkWCltFHVeFIRHqvR5b |          6 |
| 2iGShSeV6WcDbez5SLJ2bJ |          6 |
| 2rNTo0tGUMW6rn0uHzV5er |          6 |
| 5Egkx8edirN0pR2R58C2ME |          6 |
| 67r3lnzstENsRYlZWq6DYP |          6 |
| 4X8W9SSu9D5MujoxwIwqw6 |          6 |
| 4lncSzeN8WOH2iHEO593iZ |          6 |
| 1L67mcddFQ65MfA3wO3MHV |          6 |
| 21DU83QG4jB4mQKh76X32h |          6 |
| 08nyEVO684j7pcTAhEY2zJ |          6 |
| 4LMVmlX8WXPu8OyPwzkNpR |          6 |
| 7JYCpIzpoidDOnnmxmHwtj |          6 |
| 0mmFibEg5NuULMwTVN2tRU |          6 |
  1. "track_id"

        Type of data:          Text
        Contains null values:  False
        Unique values:         24
        Longest value:         22 characters
        Most common values:    118GQ70Sp6pMqn6w1oKuki (1x)
                               6S7cr72a7a8RVAXzDCRj6m (1x)
                               7h2qWpMJzIVtiP30E8VDW4 (1x)
                               3KVQFxJ5CWOcbxdpPYdi4o (1x)
                               0JjNrI1xmsTfhaiU1R6OVc (1x)

  2. "popularity"

        Type of data:          Number
        Contains null values:  False
        Unique values:         2
        Smallest value:        6
        Largest value:         7
        Sum:                   154
        Mean:                  6.417
        Median:                6
        StDev:                 0.504
        Most common values:    6 (14x)
                               7 (10x)

Row count: 24









Use the chain operator that to pass the output of csvsort as input to csvlook.
# Use the output of csvsort as input to csvlook
csvsort -c 2 Spotify_Popularity.csv | csvlook
| track_id               | popularity |
| ---------------------- | ---------- |
| 3RSMqu36JZnmMkrnNmnqyd |          6 |
| 1o0fkWCltFHVeFIRHqvR5b |          6 |
| 2iGShSeV6WcDbez5SLJ2bJ |          6 |
...
| 0y0mwXrdEzjUK5Nq8GDPnY |          7 |










Use the 2 chain operators that takes the top 15 results from the sorted output and saves it to a new file.
# Take top 15 rows from sorted output and save to new file
csvsort -c 2 Spotify_Popularity.csv | head -n 15 > Spotify_Popularity_Top15.csv


# Preview the new file 
csvlook Spotify_Popularity_Top15.csv

| track_id               | popularity |
| ---------------------- | ---------- |
| 3RSMqu36JZnmMkrnNmnqyd |          6 |
| 1o0fkWCltFHVeFIRHqvR5b |          6 |
| 2iGShSeV6WcDbez5SLJ2bJ |          6 |
...
| 0mmFibEg5NuULMwTVN2tRU |          6 |


As you might have noticed from the third exercise, you can chain together more than two commands at a time! The only limit is your imagination!

