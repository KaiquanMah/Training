Installation and documentation for csvkit
First step in learning about any libraries, tools, or suite of tools is to make sure we are using the latest and most stable version.
Second step is to make sure we know how to access the documentation so we know where to go when we get stuck.
Let's do both in this exercise for csvkit and the various commands in this suite of data processing command-line tools.

Upgrade csvkit to the latest version using Python package manager pip.
# Upgrade csvkit using pip  
pip install --upgrade csvkit 


Collecting csvkit
  Downloading https://files.pythonhosted.org/packages/66/d8/206e4da52bcf9cc29dfa3a93837b14b37ba42f58ccbd22a42a3b3ae0381a/csvkit-1.0.4.tar.gz (3.8MB)
     |████████████████████████████████| 3.8MB 31.7MB/s
Requirement already satisfied, skipping upgrade: agate>=1.6.1 in /usr/local/lib/python3.5/dist-packages (from csvkit) (1.6.1)
Requirement already satisfied, skipping upgrade: agate-excel>=0.2.2 in /usr/local/lib/python3.5/dist-packages (from csvkit) (0.2.3)
Requirement already satisfied, skipping upgrade: agate-dbf>=0.2.0 in /usr/local/lib/python3.5/dist-packages (from csvkit) (0.2.1)
Requirement already satisfied, skipping upgrade: agate-sql>=0.5.3 in /usr/local/lib/python3.5/dist-packages (from csvkit) (0.5.4)
Requirement already satisfied, skipping upgrade: six>=1.6.1 in /usr/local/lib/python3.5/dist-packages (from csvkit) (1.13.0)
Requirement already satisfied, skipping upgrade: python-slugify>=1.2.1 in /usr/local/lib/python3.5/dist-packages (from agate>=1.6.1->csvkit) (4.0.0)
Requirement already satisfied, skipping upgrade: parsedatetime>=2.1 in /usr/local/lib/python3.5/dist-packages (from agate>=1.6.1->csvkit) (2.5)
Requirement already satisfied, skipping upgrade: pytimeparse>=1.1.5 in /usr/local/lib/python3.5/dist-packages (from agate>=1.6.1->csvkit) (1.1.8)
Requirement already satisfied, skipping upgrade: leather>=0.3.2 in /usr/local/lib/python3.5/dist-packages (from agate>=1.6.1->csvkit) (0.3.3)
Requirement already satisfied, skipping upgrade: Babel>=2.0 in /usr/local/lib/python3.5/dist-packages (from agate>=1.6.1->csvkit) (2.7.0)
Requirement already satisfied, skipping upgrade: isodate>=0.5.4 in /usr/local/lib/python3.5/dist-packages (from agate>=1.6.1->csvkit) (0.6.0)
Requirement already satisfied, skipping upgrade: xlrd>=0.9.4 in /usr/local/lib/python3.5/dist-packages (from agate-excel>=0.2.2->csvkit) (1.2.0)
Requirement already satisfied, skipping upgrade: openpyxl>=2.3.0 in /usr/local/lib/python3.5/dist-packages (from agate-excel>=0.2.2->csvkit) (2.6.4)
Requirement already satisfied, skipping upgrade: dbfread>=2.0.5 in /usr/local/lib/python3.5/dist-packages (from agate-dbf>=0.2.0->csvkit) (2.0.7)
Requirement already satisfied, skipping upgrade: sqlalchemy>=1.0.8 in /usr/local/lib/python3.5/dist-packages (from agate-sql>=0.5.3->csvkit) (1.3.11)
Requirement already satisfied, skipping upgrade: text-unidecode>=1.3 in /usr/local/lib/python3.5/dist-packages (from python-slugify>=1.2.1->agate>=1.6.1->csvkit)(1.3)
Requirement already satisfied, skipping upgrade: pytz>=2015.7 in /usr/local/lib/python3.5/dist-packages (from Babel>=2.0->agate>=1.6.1->csvkit) (2019.3)
Requirement already satisfied, skipping upgrade: et-xmlfile in /usr/local/lib/python3.5/dist-packages (from openpyxl>=2.3.0->agate-excel>=0.2.2->csvkit) (1.0.1)
Requirement already satisfied, skipping upgrade: jdcal in /usr/local/lib/python3.5/dist-packages (from openpyxl>=2.3.0->agate-excel>=0.2.2->csvkit) (1.4.1)
Building wheels for collected packages: csvkit
  Building wheel for csvkit (setup.py) ... done
  Created wheel for csvkit: filename=csvkit-1.0.4-cp35-none-any.whl size=41150 sha256=11370acbe3cb97bc2548aa399ce11103511322a9a363d78394b331a9c3356388
  Stored in directory: /home/repl/.cache/pip/wheels/5f/be/3f/d151aff6c6cce1aa1d56233d68c4b9d38b045bbe5fda018d45
Successfully built csvkit
Installing collected packages: csvkit
Successfully installed csvkit-1.0.4
WARNING: You are using pip version 19.3.1; however, version 20.0.1 is available.
You should consider upgrading via the 'pip install --upgrade pip' command.



















Print the manual for in2csv on the command line.
# Print manual for in2csv
in2csv --help


usage: in2csv [-h] [-d DELIMITER] [-t] [-q QUOTECHAR] [-u {0,1,2,3}] [-b]
              [-p ESCAPECHAR] [-z FIELD_SIZE_LIMIT] [-e ENCODING] [-L LOCALE]
              [-S] [--blanks] [--date-format DATE_FORMAT]
              [--datetime-format DATETIME_FORMAT] [-H] [-K SKIP_LINES] [-v]
              [-l] [--zero] [-V] [-f FILETYPE] [-s SCHEMA] [-k KEY] [-n]
              [--sheet SHEET] [--write-sheets WRITE_SHEETS]
              [--encoding-xls ENCODING_XLS] [-y SNIFF_LIMIT] [-I]
              [FILE]

Convert common, but less awesome, tabular data formats to CSV.

positional arguments:
  FILE                  The CSV file to operate on. If omitted, will accept
                        input on STDIN.

optional arguments:
  -h, --help            show this help message and exit
  -d DELIMITER, --delimiter DELIMITER
                        Delimiting character of the input CSV file.
  -t, --tabs            Specify that the input CSV file is delimited with
                        tabs. Overrides "-d".
  -q QUOTECHAR, --quotechar QUOTECHAR
                        Character used to quote strings in the input CSV file.
  -u {0,1,2,3}, --quoting {0,1,2,3}
                        Quoting style used in the input CSV file. 0 = Quote
                        Minimal, 1 = Quote All, 2 = Quote Non-numeric, 3 =
                        Quote None.
  -b, --no-doublequote  Whether or not double quotes are doubled in the input
                        CSV file.
  -p ESCAPECHAR, --escapechar ESCAPECHAR
                        Character used to escape the delimiter if --quoting 3
                        ("Quote None") is specified and to escape the
                        QUOTECHAR if --no-doublequote is specified.
  -z FIELD_SIZE_LIMIT, --maxfieldsize FIELD_SIZE_LIMIT
                        Maximum length of a single field in the input CSV
                        file.
  -e ENCODING, --encoding ENCODING
                        Specify the encoding of the input CSV file.
  -L LOCALE, --locale LOCALE
                        Specify the locale (en_US) of any formatted numbers.
  -S, --skipinitialspace
                        Ignore whitespace immediately following the delimiter.
  --blanks              Do not convert "", "na", "n/a", "none", "null", "." to
                        NULL.
  --date-format DATE_FORMAT
                        Specify a strptime date format string like "%m/%d/%Y".
  --datetime-format DATETIME_FORMAT
                        Specify a strptime datetime format string like
                        "%m/%d/%Y %I:%M %p".
  -H, --no-header-row   Specify that the input CSV file has no header row.
                        Will create default headers (a,b,c,...).
  -K SKIP_LINES, --skip-lines SKIP_LINES
                        Specify the number of initial lines to skip (e.g.
                        comments, copyright notices, empty rows).
  -v, --verbose         Print detailed tracebacks when errors occur.
  -l, --linenumbers     Insert a column of line numbers at the front of the
                        output. Useful when piping to grep or as a simple
                        primary key.
  --zero                When interpreting or displaying column numbers, use
                        zero-based numbering instead of the default 1-based
                        numbering.
  -V, --version         Display version information and exit.
  -f FILETYPE, --format FILETYPE
                        The format of the input file. If not specified will be
                        inferred from the file type. Supported formats: csv,
                        dbf, fixed, geojson, json, ndjson, xls, xlsx.
  -s SCHEMA, --schema SCHEMA
                        Specify a CSV-formatted schema file for converting
                        fixed-width files. See documentation for details.
  -k KEY, --key KEY     Specify a top-level key to use look within for a list
                        of objects to be converted when processing JSON.
  -n, --names           Display sheet names from the input Excel file.
  --sheet SHEET         The name of the Excel sheet to operate on.
  --write-sheets WRITE_SHEETS
                        The names of the Excel sheets to write to files, or
                        "-" to write all sheets.
  --encoding-xls ENCODING_XLS
                        Specify the encoding of the input XLS file.
  -y SNIFF_LIMIT, --snifflimit SNIFF_LIMIT
                        Limit CSV dialect sniffing to the specified number of
                        bytes. Specify "0" to disable sniffing entirely.
  -I, --no-inference    Disable type inference (and --locale, --date-format,
                        --datetime-format) when parsing CSV input.






















Print the manual for csvlook on the command line.
# Print manual for csvlook
csvlook --help




Some command-line flags only pertain to specific input formats.
usage: csvlook [-h] [-d DELIMITER] [-t] [-q QUOTECHAR] [-u {0,1,2,3}] [-b]
               [-p ESCAPECHAR] [-z FIELD_SIZE_LIMIT] [-e ENCODING] [-L LOCALE]
               [-S] [--blanks] [--date-format DATE_FORMAT]
               [--datetime-format DATETIME_FORMAT] [-H] [-K SKIP_LINES] [-v]
               [-l] [--zero] [-V] [--max-rows MAX_ROWS]
               [--max-columns MAX_COLUMNS]
               [--max-column-width MAX_COLUMN_WIDTH] [-y SNIFF_LIMIT] [-I]
               [FILE]

Render a CSV file in the console as a Markdown-compatible, fixed-width table.

positional arguments:
  FILE                  The CSV file to operate on. If omitted, will accept
                        input on STDIN.

optional arguments:
  -h, --help            show this help message and exit
  -d DELIMITER, --delimiter DELIMITER
                        Delimiting character of the input CSV file.
  -t, --tabs            Specify that the input CSV file is delimited with
                        tabs. Overrides "-d".
  -q QUOTECHAR, --quotechar QUOTECHAR
                        Character used to quote strings in the input CSV file.
  -u {0,1,2,3}, --quoting {0,1,2,3}
                        Quoting style used in the input CSV file. 0 = Quote
                        Minimal, 1 = Quote All, 2 = Quote Non-numeric, 3 =
                        Quote None.
  -b, --no-doublequote  Whether or not double quotes are doubled in the input
                        CSV file.
  -p ESCAPECHAR, --escapechar ESCAPECHAR
                        Character used to escape the delimiter if --quoting 3
                        ("Quote None") is specified and to escape the
                        QUOTECHAR if --no-doublequote is specified.
  -z FIELD_SIZE_LIMIT, --maxfieldsize FIELD_SIZE_LIMIT
                        Maximum length of a single field in the input CSV
                        file.
  -e ENCODING, --encoding ENCODING
                        Specify the encoding of the input CSV file.
  -L LOCALE, --locale LOCALE
                        Specify the locale (en_US) of any formatted numbers.
  -S, --skipinitialspace
                        Ignore whitespace immediately following the delimiter.
  --blanks              Do not convert "", "na", "n/a", "none", "null", "." to
                        NULL.
  --date-format DATE_FORMAT
                        Specify a strptime date format string like "%m/%d/%Y".
  --datetime-format DATETIME_FORMAT
                        Specify a strptime datetime format string like
                        "%m/%d/%Y %I:%M %p".
  -H, --no-header-row   Specify that the input CSV file has no header row.
                        Will create default headers (a,b,c,...).
  -K SKIP_LINES, --skip-lines SKIP_LINES
                        Specify the number of initial lines to skip (e.g.
                        comments, copyright notices, empty rows).
  -v, --verbose         Print detailed tracebacks when errors occur.
  -l, --linenumbers     Insert a column of line numbers at the front of the
                        output. Useful when piping to grep or as a simple
                        primary key.
  --zero                When interpreting or displaying column numbers, use
                        zero-based numbering instead of the default 1-based
                        numbering.
  -V, --version         Display version information and exit.
  --max-rows MAX_ROWS   The maximum number of rows to display before
                        truncating the data.
  --max-columns MAX_COLUMNS
                        The maximum number of columns to display before
                        truncating the data.
  --max-column-width MAX_COLUMN_WIDTH
                        Truncate all columns to at most this width. The
                        remainder will be replaced with ellipsis.
  -y SNIFF_LIMIT, --snifflimit SNIFF_LIMIT
                        Limit CSV dialect sniffing to the specified number of
                        bytes. Specify "0" to disable sniffing entirely.
  -I, --no-inference    Disable type inference when parsing the input.





Both -hand --help are acceptable ways to print the manual for any commands in the csvkit suite.

