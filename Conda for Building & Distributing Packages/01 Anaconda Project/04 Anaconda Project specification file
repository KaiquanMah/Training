Anaconda Project specification file
The core of an Anaconda Project is a YAML file containing a specification of the conda packages, commands, and downloads that make up the Project.
The YAML file is called anaconda-project.yml and each separate project you create will be in it's own subdirectory containing a distinct anaconda-project.yml file for that project.
In the terminal you will see that we have navigated to the babynames directory. Use ls to inspect the contents of this directory. Further, inspect the anaconda-project.yml file. You should see YAML tags for packages, commands, and downloads.
Choose the correct command below that was used when you executed anaconda-project run search-names <NAME> in the previous exercise. You can use tools like nano, vim, emacs, cat, less, or more to read the file.


search-names.exe
python search-names
main.py
#yes python main.py




$ cd babynames
$ pwd
/home/repl/babynames$ ls
anaconda-project.yml  main.py
$ cat anaconda-project.yml
# This is an Anaconda project file.
#
# Here you can describe your project and how to run it.
# Use `anaconda-project run` to run the project.
# The file is in YAML format, please see http://www.yaml.org/start.html for more.
#

#
# Set the 'name' key to name your project
#
name: babynames
#
# Set the 'icon' key to give your project an icon
#
icon:
#
# Set a one-sentence-or-so 'description' key with project details
#
description:
#
# In the commands section, list your runnable scripts, notebooks, and other code.
# Use `anaconda-project add-command` to add commands.
#
commands: {search-names: {unix: python main.py, env_spec: default}}
#
# In the variables section, list any environment variables your code depends on.
# Use `anaconda-project add-variable` to add variables.
#
variables: {}
#
# In the services section, list any services that should be
# available before your code runs.
# Use `anaconda-project add-service` to add services.
#
services: {}
#
# In the downloads section, list any URLs to download to local files
# before your code runs.
# Use `anaconda-project add-download` to add downloads.
#
downloads: {NAMES: {url: 'https://s3.amazonaws.com/assets.datacamp.com/production/course_6859/datasets/names.zip'}}
#
# In the packages section, list any packages that must be installed
# before your code runs.
# Use `anaconda-project add-packages` to add packages.
#
packages:
- python=3
- pandas
#
# In the channels section, list any Conda channel URLs to be searched
# for packages.
#
# For example,
#
# channels:
#    - mychannel
#
channels: []
#
# In the platforms section, list platforms the project should workon
# Examples: "linux-64", "osx-64", "win-64"
# Use `anaconda-project add-platforms` to add platforms.
#
platforms:
- linux-64
- osx-64
- win-64
#
# You can define multiple, named environment specs.
# Each inherits any global packages or channels,
# but can have its own unique ones also.
# Use `anaconda-project add-env-spec` to add environment specs.
#
env_specs:
  default:
    description: Default environment spec for running commands
    packages: []
    channels: []
    platforms: []

