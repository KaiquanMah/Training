Version number
By convention Python version numbers are stored using the __version__ attribute of the package. While there are several methods by which you can determine and write version numbers in your projects, in this exercise you're going to write it as a string in the __init__.py file.
The setup.py will read from __init__.py when the package is installed using the find_version() function defined in version.py. This avoids having to define the version number in two places.
https://packaging.python.org/guides/single-sourcing-package-version/

Edit the __init__.py file and assign __version__ to the string '0.1'.

$ cd mortgage_forecasts
$ ls
__init__.py  models.py  utils.py


$ cat utils.py
'''Auxilary tools for working with rate models.'''

import pandas as pd
from scipy.stats import norm

def compute_margin(stderr, confint=0.95):
    '''Compute margin of error from standard error

    Paramters
    ---------
    stderr: The standard error of a prediction
    confint: The desired confidence interval
             (defaults to 0.95)

    Returns
    -------
    margin_of_error: fractional margin of error'''

    z = norm.ppf((1+confint)/2)
    return stderr * z

def read_data(filename):
    '''Read mortgage rate data

    Parameters
    ----------
    filename: path to CSV file
              Formatted as https://fred.stlouisfed.org/series/MORTGAGE30US

    Returns
    -------
    rates: Pandas Series with datetime index'''

    df = pd.read_csv(filename, index_col='DATE', parse_dates=True)
    rates = df['MORTGAGE30US']
    monthly = rates.resample('MS').first()
    return monthly
    
    
    
    
    
    
    
$ cat models.py
'''Models for predicting 30-year mortgage rates.'''

import warnings
warnings.filterwarnings("ignore")
import statsmodels.api as sm
import pandas as pd

from .utils import compute_margin

class MortgageRateModel(object):
    '''A 12-order autoregressive model to predict mortgage rates.

       Paramters
       ---------
       mortgage_rates: Pandas Series with DateTimeIndex
         The monthly mortgage rate to fit
         a 12-order autoregressive model.'''

    def __init__(self, mortgage_rates):
        '''Initialize and fit the model.'''
        self.mortgage_rates = mortgage_rates
        self._model = sm.tsa.SARIMAX(mortgage_rates, order=(12, 0,0))
        self.fit()

    def fit(self, *args, **kwargs):
        '''Fit the model

        Parameters
        ----------
        All parameters are passed to the statsmodels
        SARIMAX fit() member method.
        If disp is not passed it is set to False.'''

        if 'disp' not in kwargs:
            kwargs['disp'] = False

        self.model = self._model.fit(*args, **kwargs)

    def forecast(self, month, confint=0.95):
        '''Forecast the 30-year mortgage rate over the given month.

        Parmaters
        ---------
        month: str
               Parsible month-year to forecast
        confint: float (<= 1)
                 Confidence interval to compute
                 margin of error

        Returns
        -------
        rate  : The forecasted mortgage rate
        margin: The margin of error'''

        last_known = self.mortgage_rates.index[-1]
        if pd.to_datetime(month) < pd.to_datetime(last_known):
            raise ValueError('The month to predict must be after {}' \
                              .format(last_known.strftime('%B %Y')))

        forecast = self.model.get_prediction(last_known, month, confint=confint)
        rate = forecast.predicted_mean.values[-1]
        margin = compute_margin(forecast.se_mean.values[-1], confint)
        return rate, margin
        
        
        
$ cat __init__.py
'''Predictive modeling of 30-year mortgage rates in the US.'''

from .models import MortgageRateModel
from .utils import read_data





$ nano __init__.py
__version__ = '0.1'
'''Predictive modeling of 30-year mortgage rates in the US.'''

from .models import MortgageRateModel
from .utils import read_data


