Python modules and packages
You are familiar with Python scripts that can be executed by running python <script-file>.py. Each of these files has one or more import statements to re-use Python source code written by other developers. These re-usable Python source files are referred to as modules. They are .py Python source files, like the scripts you have been writing, that are stored in a location where the import statement can find them.
There is no overtly recognizable difference between Python modules and scripts, except that developers of the former write them with the intention that their contents are imported, rather than executed by users.
In this chapter you'll learn how to turn your Python scripts into importable modules, collect those modules into packages and create Conda packages that can be easily installed by other users.

#create reusable .py scripts -> usually intention is for execution
#import reusable .py modules -> usually intention is for importing to use
#collect modules into packages

Which of the following is true about Python modules?
#false Python modules must have the .pm file extension.
.pm is not a Python file extension.

#false Python modules must define code in abstract base classes.
Modules can contain any valid Python expressions.

#false Python modules cannot be executed using python <module-file>.
Modules are executable scripts.


#true Python modules must be installed in order to use them.
