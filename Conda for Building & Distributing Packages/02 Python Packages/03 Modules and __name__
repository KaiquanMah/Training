Modules and __name__
The single most important aspect of developing a Python module is to separate importable expressions from execution statements. When a user calls import on your module they generally want to use your functions rather than wait for lengthy computation or watch many rows of output be printed.

Your working directory now has a slightly different version of pi.py. Not only has the compute_pi() function been defined but it also includes a new if statement:
if __name__ == '__main__':
    pi = compute_pi(int(8e6))
    print('pi is approximately {:.7f}'.format(pi))

This statement allows the file to behave differently if it is imported or executed on the command line. When using import all rows above if __name__ == '__main__': are executed and imported; the print function will not be called.



Your job is to:
Execute pi.py on the command line
$ ls
miniconda  pi.py
$ python pi.py
pi is approximately 3.1415926


Start the Python interpreter and import pi
$ python -m pi
pi is approximately 3.1415926

Did it take more time to import the file or execute the file?
https://realpython.com/run-python-scripts/#how-to-run-python-scripts-using-the-command-line
https://www.linuxtopia.org/online_books/programming_books/python_programming/python_ch28s03.html


The execution was faster.
The times were similar.

#yes The import statement was faster.
Separating declarations from execution is the first step to make a module.

