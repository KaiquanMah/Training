03 Visualising Variation of a Statistic
Previously, you have computed the variation of sample statistics. Now you'll visualize that variation.

We'll start with a preloaded population and a predefined function get_sample_statistics() to draw the samples, and return the sample statistics arrays.

Here we will use a predefined plot_hist() function that wraps the matplotlib method axis.hist(), which both bins and plots the array passed in. In this way you can see how the sample statistics have a distribution of values, not just a single value.


In [1]: help(plot_hist)
Help on function plot_hist in module __main__:

plot_hist(data, bins, data_name, color='blue')


In [2]: help(get_sample_statistics)
Help on function get_sample_statistics in module __main__:

get_sample_statistics(population, num_samples=100, num_pts=1000)





# Generate sample distribution and associated statistics
means, stdevs = get_sample_statistics(population, num_samples=100, num_pts=1000)


#Use np.linspace() to define histogram bin edges for each statistic array.
# Define the binning for the histograms
#np.linspace(start,stop,#samples to generate)
mean_bins = np.linspace(97.5, 102.5, 51)
std_bins = np.linspace(7.5, 12.5, 51)

# Plot the distribution of means, and the distribution of stdevs
fig = plot_hist(data=means, bins=mean_bins, data_name="Means", color='green')
fig = plot_hist(data=stdevs, bins=std_bins, data_name="Stdevs", color='red')


# 2 histograms
# Distribution of the means: centre=100.01, spread=0.29
# Distribution of the stdevs: centre=10.04, spread=0.20

Notice you have to page through the plots to see both. Can you see the center and spread in the title and the plots? If you have not before, compute those values using e.g. means.mean() and means.std() to see that they match the figure.


In [5]: means.mean()
Out[5]: 100.0102139910808

In [6]: means.std()
Out[6]: 0.28717477746439585

In [7]: stdevs.mean()
Out[7]: 10.042232239306026

In [8]: stdevs.std()
Out[8]: 0.20254519541633451
