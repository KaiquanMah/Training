Plotting the Model on the Data
Continuing with the same measured data from the previous exercise, your goal is to use a predefined model() and measured data times and measured_distances to compute modeled distances, and then plot both measured and modeled data on the same axis.




# Pass times and measured distances into model
model_distances = model(times, measured_distances)

# Create figure and axis objects and call axis.plot() twice to plot data and model distances versus times
fig, axis = plt.subplots()
axis.plot(times, measured_distances, linestyle=" ", marker="o", color="black", label="Measured")
axis.plot(times, model_distances, linestyle="-", marker=None, color="red", label="Modeled")

# Add grid lines and a legend to your plot, and then show to display
axis.grid(True)
axis.legend(loc="best")
plt.show()



Measured Dataset
times, measured_distances
 0.0,     0.25
 1.0,     0.93
 2.0,     2.32
 3.0,     3.76
 4.0,     3.88
 5.0,     4.88
 6.0,     6.79
 7.0,     7.38
 8.0,     7.77
 9.0,     9.27
10.0,     9.77

In [1]: model_distances = model(times, measured_distances)

In [2]: model_distances
Out[2]: array([  0.,   1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.,  10.])




Notice a subtlety of python. 
None is a special object that is often used as a place-holder to be replaced by default values, 
so linestyle=None does not mean no line, it means the default which is a solid line style, 
whereas marker=None triggers the default marker, which happens to be no marker at all. 
If you use color=None, the resulting color will be blue, the default line color for matplotlib .
