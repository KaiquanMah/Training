Extracting Multiple Elements
Instructions are in the task pane to the left. Complete and submit each task one at a time.

This code sets up the interaction.
load datafile
data

>> data
data =
    3.0000    0.5300    4.0753       NaN
   18.0000    1.7800    6.6678    2.1328
   19.0000    0.8600    1.5177    3.6852
   20.0000    1.6000    3.6375    8.5389
   21.0000    3.0000    4.7243   10.1570
   23.0000    6.1100    9.0698    2.8739
   38.0000    2.5400    5.3002    4.4508











 


When used as an index, the colon operator (:) specifies all the elements in that dimension. The syntax
x = A(2,:)
creates a row vector containing all of the elements from the second row of A.
TASK
Create a variable named density that contains the second column of the matrix named data.


Task 1
density=data(:,2)


>> density
density =
    0.5300
    1.7800
    0.8600
    1.6000
    3.0000
    6.1100
    2.5400











The colon operator can refer to a range of values. The following syntax creates a matrix containing the first, second, and third rows of the matrix A.
x = A(1:3,:)
TASK
Create a variable volumes containing the last two columns of data.

Task 2
volumes=data(:,end-1:end)

>> volumes

volumes =

    4.0753       NaN
    6.6678    2.1328
    1.5177    3.6852
    3.6375    8.5389
    4.7243   10.1570
    9.0698    2.8739
    5.3002    4.4508










A single index value can be used to reference vector elements. For example
x = v(3)
returns the third element of vector v when v is either a row or column vector.
TASK
Using a single index value, create a variable named p containing the 6th element in the vector density.

Task 3
p=density(6)

>> p

p =

    6.1100






A single range of index values can be used to reference a subset of vector elements. For example
x = v(3:end)
returns a subset of vector v containing the elements from 3 to the end.
TASK
Using a range of index values, create a vector named p containing the 2nd through 5th elements of density.

Task 4
p=density(2:5)

>> p

p =

    1.7800
    0.8600
    1.6000
    3.0000













Indices can be non-consecutive numbers. Try extracting the first, third, and sixth elements of density.

Further Practice
furtherPractice = density([1, 3, 6])

>> furtherPractice = density([1, 3, 6])

furtherPractice =

    0.5300
    0.8600
    6.1100
