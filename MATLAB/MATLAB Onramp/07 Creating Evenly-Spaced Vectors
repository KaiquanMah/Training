It is common to create vectors containing evenly-spaced numbers, such as the vector below.
y = [5 6 7 8]
y = 
    5    6    7    8
TASK
Create a row vector named x that contains the values 1, 2, and 3, in that order.

Task 1
x = [1 2 3]

>> x
x =
   1   2   3   







For long vectors, entering individual numbers is not practical. An alternative, shorthand method for creating evenly-spaced vectors is to use the : operator and specify only the start and end points.
y = 5:8
y = 
    5    6    7    8
Notice that square brackets are not needed when you use the colon operator.
TASK
Create a row vector named x with the values 1, 2, 3, and 4, but this time using the : operator.

Task 2
x = [1:4]

>> x
x =
   1   2   3   4






The : operator uses a default spacing of 1, however you can specify your own spacing, as shown below.
x = 20:2:26
x = 
    20    22    24    26
TASK
Create a row vector named x that starts at 1, ends at 5, and each element is separated by 0.5.

Task 3
x = [1:0.5:5]

>> x
x =
   1.000000000000000   1.500000000000000   2.000000000000000   2.500000000000000   3.000000000000000   3.500000000000000   4.000000000000000   4.500000000000000   5.000000000000000













TASK
Create a row vector named x that starts at 3 and ends at 13, with each element separated by 2.

Task 4
x = [3:2:13]

>> x
x =
     3     5     7     9    11    13
     














If you know the number of elements you want in a vector (instead of the spacing between each element), you could instead use the linspace function:
linspace(first,last,number_of_elements).

Note the use of commas (,) to separate inputs to the linspace function.
x = linspace(0,1,5)
x = 
    0    0.250    0.500    0.750    1.000
TASK
Create a row vector named x that starts at 1, ends at 10, and contains 5 elements.

Task 5
x = linspace(1, 10, 5)

>> x
x =
   1.000000000000000   3.250000000000000   5.500000000000000   7.750000000000000  10.000000000000000










Both linspace and the : operator create row vectors. However, you can convert a row vector into a column vector using the transpose operator (').
x = 1:3;
x = x'
x = 
    1
    2
    3
TASK
Transpose x from a row vector to a column vector using the transpose operator.

Task 6
x = x'

>> x
x =
   1.000000000000000
   3.250000000000000
   5.500000000000000
   7.750000000000000
  10.000000000000000











You can create column vectors in a single command by creating the row vector and transposing it all on one line. Note the use of parentheses here to specify the order of operations.
x = (1:2:5)'
x = 
    1
    3
    5
TASK
In a single command, create a column vector named x that starts at 5, ends at 9 and has elements that are spaced by 2.

Task 7
x = [5:2:9]'

>> x
x =
     5
     7
     9









Notice that if you are using linspace or : to create a vector, you don't need to use brackets ([]).
If you wanted to create an evenly-spaced vector from 1 to 2Ï€ with 100 elements, would you use linspace or :?

Further Practice
x = linspace(1, 2*pi, 100)

>> x
x =
  Columns 1 through 10

   1.000000000000000   1.053365508153329   1.106731016306658   1.160096524459987   1.213462032613317   1.266827540766646   1.320193048919975   1.373558557073304   1.426924065226633   1.480289573379962

  Columns 11 through 20

   1.533655081533292   1.587020589686621   1.640386097839950   1.693751605993279   1.747117114146608   1.800482622299937   1.853848130453267   1.907213638606596   1.960579146759925   2.013944654913254

  Columns 21 through 30

   2.067310163066583   2.120675671219912   2.174041179373241   2.227406687526571   2.280772195679900   2.334137703833229   2.387503211986558   2.440868720139887   2.494234228293216   2.547599736446545

  Columns 31 through 40

   2.600965244599875   2.654330752753204   2.707696260906533   2.761061769059862   2.814427277213191   2.867792785366520   2.921158293519849   2.974523801673179   3.027889309826508   3.081254817979837

  Columns 41 through 50

   3.134620326133166   3.187985834286495   3.241351342439825   3.294716850593153   3.348082358746483   3.401447866899812   3.454813375053141   3.508178883206470   3.561544391359799   3.614909899513128

  Columns 51 through 60

   3.668275407666458   3.721640915819787   3.775006423973116   3.828371932126445   3.881737440279774   3.935102948433104   3.988468456586433   4.041833964739761   4.095199472893091   4.148564981046420

  Columns 61 through 70

   4.201930489199749   4.255295997353079   4.308661505506407   4.362027013659737   4.415392521813066   4.468758029966395   4.522123538119724   4.575489046273053   4.628854554426383   4.682220062579711

  Columns 71 through 80

   4.735585570733041   4.788951078886370   4.842316587039699   4.895682095193028   4.949047603346358   5.002413111499687   5.055778619653015   5.109144127806345   5.162509635959674   5.215875144113004

  Columns 81 through 90

   5.269240652266332   5.322606160419661   5.375971668572991   5.429337176726320   5.482702684879650   5.536068193032978   5.589433701186307   5.642799209339636   5.696164717492966   5.749530225646295

  Columns 91 through 100

   5.802895733799624   5.856261241952953   5.909626750106282   5.962992258259612   6.016357766412940   6.069723274566270   6.123088782719599   6.176454290872928   6.229819799026257   6.283185307179586

 








>> x = 1:4
x =
     1     2     3     4

