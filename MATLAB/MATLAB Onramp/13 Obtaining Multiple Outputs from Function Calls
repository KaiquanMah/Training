Obtaining Multiple Outputs
Instructions are in the task pane to the left. Complete and submit each task one at a time.

This code sets up the interaction.
load datafile
data
v1 = data(:,3);
v2 = data(:,4);

>> data

data =

    3.0000    0.5300    4.0753    0.5000
   18.0000    1.7800    6.6678    2.1328
   19.0000    0.8600    1.5177    3.6852
   20.0000    1.6000    3.6375    8.5389
   21.0000    3.0000    4.7243   10.1570
   23.0000    6.1100    9.0698    2.8739
   38.0000    2.5400    5.3002    4.4508

>> v1

v1 =

    4.0753
    6.6678
    1.5177
    3.6375
    4.7243
    9.0698
    5.3002

>> v2

v2 =

    0.5000
    2.1328
    3.6852
    8.5389
   10.1570
    2.8739
    4.4508






The size function can be applied to an array to produce a single output variable containing the array size.
s = size(x)
TASK
Create a variable named dsize containing the size of the data variable.

Task 1
dsize = size(data)

>> dsize

dsize =

     7     4







The size function can be applied to a matrix to produce either a single output variable or two output variables. Use square brackets ([ ]) to obtain more than one output.
[xrow,xcol] = size(x)
TASK
Create the variables dr and dc which respectively contain the number of rows and columns of the variable data.

Task 2
[dr, dc] = size(data)

>> dr

dr =

     7

>> dc

dc =

     4











The maximum value of a vector and its corresponding index value can be determined using the max function. The first output from the max function is the maximum value of the input vector. When called with two outputs, the second output is the index value.
[xMax,idx] = max(x)
TASK
Create the variables vMax and ivMax containing the maximum value of the v2 vector and the corresponding index value respectively.

Task 3
% vMax = maximum value
% ivMax = index of the maximum value
[vMax, ivMax] = max(v2)

>> vMax, ivMax

vMax =

   10.1570


ivMax =

     5










If you only need the second output from a function, you can use a tilde (~) to ignore specific outputs.

For example, you might only want the index containing the maximum value in a vector:
density = data(:,2)
[~,ivMax] = max(v2)
densityMax = density(ivMax)

Try getting the index value of the minimum value in v2. Use this index to extract from density.

Further Practice
[vMin, ivMin] = min(v2)

density = data(:,2)
density(ivMin)

>> vMin, ivMin

vMin =

    0.5000


ivMin =

     1

>> [vMin, ivMin]

ans =

    0.5000    1.0000





>> density

density =

    0.5300
    1.7800
    0.8600
    1.6000
    3.0000
    6.1100
    2.5400

>> density(ivMin)


ans =

    0.5300

