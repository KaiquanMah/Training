Performing Array Operations on Vectors
Instructions are in the task pane to the left. Complete and submit each task one at a time.

This code sets up the interaction.
load datafile
density = data(:,2);
v1 = data(:,3);
v2 = data(:,4);

>> data

data =

    3.0000    0.5300    4.0753    0.5000
   18.0000    1.7800    6.6678    2.1328
   19.0000    0.8600    1.5177    3.6852
   20.0000    1.6000    3.6375    8.5389
   21.0000    3.0000    4.7243   10.1570
   23.0000    6.1100    9.0698    2.8739
   38.0000    2.5400    5.3002    4.4508

>> density

density =

    0.5300
    1.7800
    0.8600
    1.6000
    3.0000
    6.1100
    2.5400

>> v1

v1 =

    4.0753
    6.6678
    1.5177
    3.6375
    4.7243
    9.0698
    5.3002

>> v2

v2 =

    0.5000
    2.1328
    3.6852
    8.5389
   10.1570
    2.8739
    4.4508










MATLAB is designed to work naturally with arrays. For example, you can add a scalar value to all the elements of an array.
x = [1 2 3];
y = x + 2
y = 
     3     4     5
TASK
Add 1 to each element of v1 and store the result in a variable named r.

Task 1
r = v1+1
>> r

r =

    5.0753
    7.6678
    2.5177
    4.6375
    5.7243
   10.0698
    6.3002













You can add together any two arrays of the same size.
z = x + y
TASK
Create a vector vs that is the sum of the vectors v1 and v2.

Task 2
vs = v1+v2

>> vs

vs =

    4.5753
    8.8006
    5.2029
   12.1764
   14.8813
   11.9437
    9.7510











You can multiply or divide all of the elements of an array by a scalar.
z = 2*x
y = x/3
TASK
Create a variable va that contains the value vs divided by 2 (the average volume).

Task 3
va = vs/2

>> va

va =

    2.2877
    4.4003
    2.6014
    6.0882
    7.4406
    5.9718
    4.8755










Basic statistical functions in MATLAB can be applied to a vector to produce a single output. The maximum value of a vector can be determined using the max function.
xMax = max(x)
TASK
Create a variable vm containing the maximum of the va vector.

Task 4
vm = max(va)

>> vm

vm =

    7.4406







MATLAB has functions that perform mathematical operations on an entire vector or array of values in a single command.
xSqrt = sqrt(x)
TASK
Using the round function, create a variable named vr which contains the rounded average volumes, va.

Task 5
vr = round(va)

>> vr

vr =

     2
     4
     3
     6
     7
     6
     5











The * operator performs matrix multiplication. So, if you use * to multiply two equally sized vectors, since the inner dimensions do not agree, you will get an error message.
z = [3 4] * [10 20]
Error using  * 
Incorrect dimensions for matrix multiplication. 

In contrast, the .* operator performs elementwise multiplication and allows you to multiply the corresponding elements of two equally sized arrays.
z = [3 4] .* [10 20]
z = 
    30    80
TASK
Create a variable named mass containing the elementwise product of density and va.
https://www.mathworks.com/help/matlab/ref/mtimes.html

Task 6
mass = density .* va

>> mass

mass =

    1.2125
    7.8325
    2.2372
    9.7411
   22.3220
   36.4880
   12.3838













You have performed array operations with
two arrays of the same size
a scalar and an array

There are other compatible sizes. For example, try the following:
x = [1 2;3 4;5 6; 7 8].*[1;2;3;4]
What size is x?

You can read more about this behavior here:
Compatible Array Sizes for Basic Operations
https://www.mathworks.com/help/matlab/matlab_prog/compatible-array-sizes-for-basic-operations.html

Further Practice
x = [1 2;3 4;5 6; 7 8].*[1;2;3;4]
% LHS [1 2;3 4;5 6; 7 8] is 4x2
% RHS [1;2;3;4] is 4x1
% outcome is 4x1 as we performed an elementwise multiplication
% of each col in the LHS matrix
% by the sole col in the RHS vector




>> x

x =

     1     2
     6     8
    15    18
    28    32



