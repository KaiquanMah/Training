%instantiate zero vector
v = zeros(10, 1)
0
0
0
0
0
0
0
0
0
0

for i=1:10,
  v(i) = 2^i;
end;  


>>v
v=
2
4
8
.
.
.
512
1024







%instantiate array
indices = 1:10;
1 2 3 4 5 6 7 8 9 10

for i = 1:10,
  disp(i);
end;

1
2
3
4
5
6
7
8
9
10







%while loop
%instantiate counter
i=1;

%while loop and its condition
while i <= 5,
  
  %execute this segment of code
  v(i) = 100;
  i = i+1;

end;

>>v
100
100
100
100
100
64
128
256
512
1024






%while loop, if statement
i=1;

while true,

  v(i)=999;
  i = i+1;

  if i==6,
    break;
  end;

end;

>>v
999
999
999
999
999
64
128
256
512
1024





%if statement
v(1) = 2;

if v(1) == 1,

  disp('value is one');

elseif v(1) == 2,

  disp('value is two');

else,

  disp('value is neither one nor two');

end;


value is two



exit

















%return 1 value saved in variable 'y'
%1 input argument x
%e.g. assume we have the following 2 lines of code in the 'squareThisNumber.m' file
function y = squareThisNumber(x)
y= x^2;

cd 'C:\Users\...\Desktop'     %desktop/folder where we have the 'squareThisNumber.m' file
squareThisNumber(5)           %just call the function/file name
25


%add an Octave search path so Octave knows where to retrieve ALL YOUR '.m' file/functions from
%even if u are in another folder
addpath('C:\Users\...\Desktop')
cd 'C:\'
squareThisNumber(5)           
25








%2 outputs from a function
function [y1, y2] = squareAndCubeThisNumber(x)
y1= x^2;
y2= x^3;

[a, b] = squareAndCubeThisNumber(5)
>>a
25
>>b
125










X=[1 1; 1 2; 1 3]
y=[1; 2; 3]
theta=[0; 1]


%costFunction.m
function J = costFunctionJ(X, y, theta)

%training examples
m = size(X, 1);
predictions = X * theta;

%element-wise square of errors
sqErrors = (predictions-y).^2;
J = 1/(2*m) * sum(sqErrors);





>>j = costFunctionJ(X, y, theta)
j=0     %cost is 0 as the line does not have any errors for this dataset


%if we change theta values
theta=[0; 0]
>>j = costFunctionJ(X, y, theta)
j=2.3333



