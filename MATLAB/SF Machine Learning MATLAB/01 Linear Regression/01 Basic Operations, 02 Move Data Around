+-*/^
==
~= not equal
&& AND
|| OR
xor(1,0)   => 1, ie TRUE




a=3 => prints out a=3
a=3; %semicolon suppresses print output
b='hi'
c=(3>=1) => 1

d=pi;
disp(d);
disp(sprintf('2 dp: %0.2f', d)) => 3.14
disp(sprintf('6 dp: %0.6f', d)) => 3.141593

format long
d => 3.14159265358979

format short
d => 3.1416





A=[1 2 3]
1 2 3
Row vector

B=[1 2; 3 4; 5 6]
1 2
3 4
5 6

C=[1; 2; 3]
1
2
3
Col vector






v=1:0.1:2
1 1.1000 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2.0
col vector from 1 to 2 (inclusive), in increments of 0.1


v=1:6
1 2 3 4 5 6



ones(2,3)
1 1 1
1 1 1
2x3 matrix of 1s

A=2*ones(2,3)
2 2 2
2 2 2
2x3 matrix

zeros(2,3)
0 0 0
0 0 0

rand(1,3)
0.94177 0.14359 0.84368
each element is drawn from uniform distribution between 0 and 1

w=randn(1,3)
-0.33517 -1.87215 -1.21475
each element is drawn from gaussian normal distribution with mean 0, sd 1




hist(w)
popup window with histogram

hist(w, 50)
histogram with 50 bins





I=eye(3)
1 0 0
0 1 0
0 0 1
identity matrix


help <fnName>

size(I) => 3 3 => 3 rows, 3 cols
size(I,1) => # rows
size(I,2) => # cols

v=[1 2 3 4]
length(v) => 4 => 4 elements in the col vector

length(I) => 3 => 3 rows in the matrix



pwd
ls
cd 'filePath'
load dataFileName.dat
load('dataFileName.dat')


who => variable names in the current scope
whos => variable names + size(#rows x # cols) + byte + class in the current scope
clear => clear variables from ur workspace

ds1=dataSet1FileName(startingRow#:endingRow#)
ds1=dataSet1FileName(1:10)


save newFileName.mat variableName; => save variable in the specified file in binary format
save newFileName.mat variableName -ascii; => save variable in the specified file in human-readable, text format








A=[1 2; 3 4; 5 6]
1 2
3 4
5 6

A(3, 2) => row3 col2 => 6
A(3, :) => row 3, every col => 5 6
A(:, 2) => every row, col 2  =>
2 
4 
6

A([1 3],:) => rows 1,3, every col =>
1 2
5 6

A(:, 2) = [10; 11; 12] => replace col2 values =>
1 10
3 11
5 12

A = [A, [100; 101; 102]] => add col on RHS; # rows must match
1 10 100
3 11 101
5 12 102

%alternative method
B=[100; 101; 102]
A=[A B] => add cols from B on RHS


A(:) => put all elements into a single vector, col by col
1
3
5
10
11
12
100
101
102









%back to original A
A=[1 2; 3 4; 5 6]
1 2
3 4
5 6

B = [11 12; 13 14; 15 16]
C = [A; B] => append records from B below
1 2
3 4
5 6
11 12
13 14
15 16


