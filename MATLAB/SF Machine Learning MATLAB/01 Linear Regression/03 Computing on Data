Marix multiplication
A => 3x2 matrix
B => 3x2
c => 2x2

D=A * C => 3x2 x 2x2 => 3x2 matrix using the method 
e.g. ALL ELEMENTS ALONG A R1 * C C1 gives us the element value for D R1C1
ALL ELEMENTS ALONG A R3 * C C2 gives us the element value for D R3C2

D=A .* B => 3x2 matrix using the method
e.g. ONLY ELEMENT AT A R1 * C1 C1 gives us the element value for D R1C1

A .^ 2 => square every element in matrix A


v=[1; 2; 3]

1 ./ v =>
1.000
0.500
0.333

1 ./ A =>
1.000   0.500
0.333   0.250
0.200   0.167


log(v)
0.0000
0.69315
1.09861

exp(v)
abs(v)
-v    %i.e. -1 * v


A'
(A')'   %transpose - transpose -> i.e. original matrix A





v=[1; 2; 3]
val = max(v)                % 3, i.e. the highest element #
[value, index] = max(v) 
value = 3     %value
index = 3     %position

v < 1.5
1 0 0           %evaluates each element

find(v < 3)
1 2             %returns position of element/s which satisfy the condition







magic fn => returns "magic square" matrices
=> all the rows, cols, diags SUM to the same value

A = magic(3)
8 1 6         15
3 5 7         15
4 9 2         15

[r, c] = find(A >= 7)
r=
1
3
2

c=
1
2
3

=> how to read is (1,1) 8, (3,2) 9, and (2,3) 7 are >= 7.

A(2,3) => 7





a = [1 15 2 0.5] => 1.000 15.000 2.000 0.5000
sum(a)     => 18.5; SUM every element
prod(a)    => 15; MULTIPLY every element
floor(a)   => 1 15 2 0
ceil(a)    => 1 15 2 1


rand(3) => random 3x3 matrix
max(rand(3), rand(3)) => element-wise max of the 2 matrices (rand(3))




A = magic(3)
8 1 6         
3 5 7         
4 9 2         

max(A, [], 1) => 8 9 7 => find the max elements of each col => max of col 1 is 8, max of col 2 is 9, max of col 3 is 7
max(A, [], 1) => find the max elements of each row
8 
7 
9

max(A)      => uses the default col-wise max, i.e. max(A, [], 1)
8 9 7
max(max(A)) => 9



A(:)      => turn into col vector, col by col
8
3
4
1
5
9
6
7
2


max(A(:))   => 9

sum(A,1)    => SUM per col
15  15  15

sum(A,2)    => SUM per row
15
15
15




eye(5)
1 0 0 0 0
0 1 0 0 0
0 0 1 0 0 
0 0 0 1 0
0 0 0 0 1

flipud(eye(5))    =>flip up down; i.e. horizontal flip; LHS elements go to RHS, vice versa
0 0 0 0 1
0 0 0 1 0
0 0 1 0 0 
0 1 0 0 0 
1 0 0 0 0 

pinv(A)     => inverse of A
0.147222    -0.14444    0.063...
-0.06111    0.0222222   0.105556
-0.019444   0.188889    -0.102778





