# You'll now be introduced to a powerful Python feature that will help you clean your data more effectively: lambda functions. Instead of using the def syntax that you used in the previous exercise, lambda functions let you make simple, one-line functions.
# For example, here's a function that squares a variable used in an .apply() method:
# def my_square(x):
#     return x ** 2

# df.apply(my_square)
# The equivalent code using a lambda function is:

# df.apply(lambda x: x ** 2)
# The lambda function takes one parameter - the variable x. The function itself just squares x and returns the result, which is whatever the one line of code evaluates to. In this way, lambda functions can make your code concise and Pythonic.

# The tips dataset has been pre-loaded into a DataFrame called tips.
# Your job is to clean its 'total_dollar' column by removing the dollar sign.
# You'll do this using two different methods:
# With the .replace() method, 
# and with regular expressions. The regular expression module re has been pre-imported.


# Write the lambda function using replace
tips['total_dollar_replace'] = tips.total_dollar.apply(lambda x: x.replace('$', ''))

# Write the lambda function using regular expressions: total_dollar_re
# if we used the statement below with [0], the tips['total_dollar_re'] col brings out the value from the list contained a computed value each
# in order to populate as a value
tips['total_dollar_re'] = tips.total_dollar.apply(lambda x: re.findall('\d+\.\d+', x)[0])

# if we used the statement below without [0], the tips['total_dollar_re'] col contains each value as a list
# tips['total_dollar_re'] = tips.total_dollar.apply(lambda x: re.findall('\d+\.\d+', x))

# Print the head of tips
print(tips.head())

