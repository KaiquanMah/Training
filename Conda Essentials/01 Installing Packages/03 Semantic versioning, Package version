What is semantic versioning?
Most Conda packages use a system called semantic versioning to identify distinct versions of a software package unambiguously. Version labels are usually chosen by the project authors, not necessarily the same people who bundle the project as a Conda package. There is no technical requirement that a project author's version label coincides with a Conda package version label, but the convention of doing so is almost always followed. Semantic version labels can be compared lexicographically and make it easy to determine which of two versions is the later version.
Under semantic versioning, software is labeled with a three-part version identifier of the form MAJOR.MINOR.PATCH; the label components are non-negative integers separated by periods. Assuming all software starts at version 0.0.0, the MAJOR version number is increased when significant new functionality is introduced (often with corresponding API changes). Increases in the MINOR version number generally reflect improvements (e.g., new features) that avoid backward-incompatible API changes. For instance, adding an optional argument to a function API (in a way that allows old code to run unchanged) is a change worthy of increasing the MINOR version number. An increment to the PATCH version number is appropriate mostly for bug fixes that preserve the same MAJOR and MINOR revision numbers. Software patches do not typically introduce new features or change APIs at all (except sometimes to address security issues).
Many command-line tools display their version identifier by running tool --version. This information can sometimes be displayed or documented in other ways. For example, suppose on some system, a certain version of Python is installed, and you inquire about it like this:

python -c "import sys; sys.version"
'1.0.1 (Mar 26 2014)'

Looking at the output above, which statement below accurately characterizes the semantic versioning of this installed Python?
https://semver.org/


The MAJOR version is 0, the MINOR version is 1.
The MAJOR version is 1, the PATCH is Mar 26 2014.
The MAJOR version is 1.0, the PATCH is 1.
This ancient version of Python did not use semantic versioning.

#yes The MAJOR version is 1, the PATCH is 1.
Yes! Remember, versions are arranged as MAJOR.MINOR.PATCH.





















Which package version is installed?
Because conda installs packages automatically, it's hard to know which package versions are actually on your system. That is, packages you didn't install explicitly get installed for you to resolve another package's dependencies.
Fortunately, the command conda list comes to your aid to query the current state. By itself, this lists all packages currently installed.
You can use conda list --help to see how to extract specific packages from that list or how to display it in different formats.

Select the exact version of the package requests installed in the current session.
(base) $ conda list --help
usage: conda list [-h] [-n ENVIRONMENT | -p PATH] [--json] [-v] [-q]
                  [--show-channel-urls] [-c] [-f] [--explicit] [--md5] [-e]
                  [-r] [--no-pip]
                  [regex]

List linked packages in a conda environment.

Options:
positional arguments:
  regex                 List only packages matching this regular expression.

optional arguments:
  -h, --help            Show this help message and exit.
  --show-channel-urls   Show channel urls. Overrides the value given by `conda
                        config --show show_channel_urls`.
  -c, --canonical       Output canonical names of packages only. Implies --no-
                        pip.
  -f, --full-name       Only search for full names, i.e., ^<regex>$.
  --explicit            List explicitly all installed conda packaged with URL
                        (output may be used by conda create --file).
  --md5                 Add MD5 hashsum when using --explicit
  -e, --export          Output requirement string only (output maybe used by
                        conda create --file).
  -r, --revisions       List the revision history and exit.
  --no-pip              Do not include pip-only installed packages.

Target Environment Specification:
  -n ENVIRONMENT, --name ENVIRONMENT
                        Name of environment.
  -p PATH, --prefix PATH
                        Full path to environment location (i.e. prefix).

Output, Prompt, and Flow Control Options:
  --json                Report all output as json. Suitable for using conda
                        programmatically.
  -v, --verbose         Use once for info, twice for debug, three times for
                        trace.
  -q, --quiet           Do not display progress bar.

Examples:

List all packages in the current environment:

    conda list

List all packages installed into the environment 'myenv':

    conda list -n myenv

Save packages for future use:

    conda list --export > package-list.txt

Reinstall packages from an export file:

    conda create -n myenv --file package-list.txt







(base) $ conda list
# packages in environment at /home/repl/miniconda:
#
# Name                    Version                   Build  Channel
_libgcc_mutex             0.1                        main
anaconda-client           1.7.2                    py36_0
anaconda-project          0.8.3                      py_0
asn1crypto                0.24.0                   py36_0
beautifulsoup4            4.6.3                    py36_0
blas                      1.0                         mkl
bzip2                     1.0.7                h7b6447c_0
ca-certificates           2019.11.27                    0
certifi                   2019.11.28               py36_0
cffi                      1.12.3           py36h2e261b9_0
chardet                   3.0.4                    py36_1
clyent                    1.2.2                    py36_1
conda                     4.8.1                    py36_0
conda-build               3.18.7                   py36_0
conda-package-handling    1.3.10                   py36_0
cryptography              2.7              py36h1ba5d50_0
decorator                 4.4.0                    py36_1
filelock                  3.0.12                     py_0
glob2                     0.7                        py_0
idna                      2.8                      py36_0
intel-openmp              2019.4                      243
ipython_genutils          0.2.0                    py36_0
jinja2                    2.10.1                   py36_0
jsonschema                2.6.0                    py36_0
jupyter_core              4.5.0                      py_0
libarchive                3.3.3                h5d8350f_5
libedit                   3.1.20181209         hc058e9b_0
libffi                    3.2.1                hd88cf55_4
libgcc-ng                 8.2.0                hdf63c60_1
libgfortran-ng            7.3.0                hdf63c60_0
liblief                   0.9.0                h7725739_2
libstdcxx-ng              8.2.0                hdf63c60_1
libxml2                   2.9.9                hea5a465_1
lz4-c                     1.8.1.2              h14c3975_0
lzo                       2.10                 h49e0be7_2
markupsafe                1.1.1            py36h7b6447c_0
mkl                       2019.4                      243
mkl_fft                   1.0.12           py36ha843d7b_0
mkl_random                1.0.2            py36hd81dba3_0
nbformat                  4.4.0                    py36_0
ncurses                   6.1                  he6710b0_1
numpy                     1.16.0           py36h7e9f1db_1
numpy-base                1.16.0           py36hde5b4d6_1
openssl                   1.1.1d               h7b6447c_3
pandas                    0.22.0           py36hf484d3e_0
patchelf                  0.9                  he6710b0_3
pip                       19.1.1                   py36_0
pkginfo                   1.5.0.1                  py36_0
psutil                    5.6.3            py36h7b6447c_0
py-lief                   0.9.0            py36h7725739_2
pycosat                   0.6.3            py36h14c3975_0
pycparser                 2.19                     py36_0
pyopenssl                 19.0.0                   py36_0
pysocks                   1.7.0                    py36_0
python                    3.6.8                h0371630_0
python-dateutil           2.8.0                    py36_0
python-libarchive-c       2.8                     py36_10
pytz                      2019.1                     py_0
pyyaml                    5.1.1            py36h7b6447c_0
readline                  7.0                  h7b6447c_5
requests                  2.22.0                   py36_0
ruamel_yaml               0.15.46          py36h14c3975_0
setuptools                41.0.1                   py36_0
six                       1.12.0                   py36_0
sqlite                    3.27.2               h7b6447c_0
tk                        8.6.8                hbc83047_0
tornado                   6.0.3            py36h7b6447c_0
tqdm                      4.32.1                     py_0
traitlets                 4.3.2                    py36_0
urllib3                   1.24.2                   py36_0
wheel                     0.33.4                   py36_0
xz                        5.2.4                h14c3975_4
yaml                      0.1.7                had09818_2
zlib                      1.2.11               h7b6447c_3
zstd                      1.3.7                h0b5b093_0



py36_0
4.7.5
7.0

#yes 2.22.0
Insightful installation inspection! conda list gives a useful overview of what is installed.

