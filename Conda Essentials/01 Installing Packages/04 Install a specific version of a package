Install a specific version of a package (I)
Sometimes there are reasons why you need to use a specific version of a package, not necessarily simply the latest version compatible with your other installed software. You may have scripts written that depend on particular older APIs, or you may have received code written by colleagues who used specific versions and you want to guarantee replication of the same behavior. Likewise, you may be writing code that you intend to pass to other users who you know to be using specific package versions on their systems (perhaps as a company standard, for example).

conda allows you to install software versions in several flexible ways. Your most common pattern will probably be prefix notation, using semantic versioning. For example, you might want a MAJOR and MINOR version, but want conda to select the most up-to-date PATCH version within that series. You could spell that as:
conda install foo-lib=12.3

Or similarly, you may want a particular major version, and prefer conda to select the latest compatible MINOR version as well as PATCH level. You could spell that as:
conda install foo-lib=13

If you want to narrow the installation down to an exact PATCH level, you can specify that as well with:
conda install foo-lib=14.3.2

Keep in mind that relaxing constraints may allow for satisfying multiple dependencies among installed software. Occasionally you will try to install some software version that is simply inconsistent with other software installed, and conda will warn you about that rather than install anything.
Install the module attrs in the specific MAJOR and MINOR version 17.3.

(base) $ conda install attrs=17.3
Collecting package metadata (current_repodata.json): done
Solving environment: failed with initial frozen solve. Retrying with flexible solve.
Collecting package metadata (repodata.json): done
Solving environment: done

## Package Plan ##

  environment location: /home/repl/miniconda

  added / updated specs:
    - attrs=17.3


The following packages will be downloaded:

    package                    |            build
    ---------------------------|-----------------
    attrs-17.3.0               |   py36h5ab58ff_0          40 KB
    hypothesis-4.36.2          |           py36_0         359 KB
    pympler-0.7                |             py_0         159 KB
    zope-1.0                   |           py36_1           4 KB
    zope.interface-4.7.1       |   py36h7b6447c_0         204 KB
    ------------------------------------------------------------
                                           Total:         765 KB

The following NEW packages will be INSTALLED:

  attrs              pkgs/main/linux-64::attrs-17.3.0-py36h5ab58ff_0
  hypothesis         pkgs/main/linux-64::hypothesis-4.36.2-py36_0
  pympler            pkgs/main/noarch::pympler-0.7-py_0
  zope               pkgs/main/linux-64::zope-1.0-py36_1
  zope.interface     pkgs/main/linux-64::zope.interface-4.7.1-py36h7b6447c_0


Proceed ([y]/n)? y


Downloading and Extracting Packages
zope-1.0             | 4 KB      | ######################## | 100%
zope.interface-4.7.1 | 204 KB    | ######################## | 100%
pympler-0.7          | 159 KB    | ######################## | 100%
hypothesis-4.36.2    | 359 KB    | ######################## | 100%
attrs-17.3.0         | 40 KB     | ######################## | 100%
Preparing transaction: done
Verifying transaction: done
Executing transaction: done


Being explicit about versions of packages that you use in a project helps with reproducibility.















Install a specific version of a package (II)
Most commonly, you'll use prefix-notation to specify the package version(s) to install. But conda offers even more powerful comparison operations to narrow versions. For example, if you wish to install either bar-lib versions 1.0, 1.4 or 1.4.1b2, but definitely not version 1.1, 1.2 or 1.3, you could use:
conda install 'bar-lib=1.0|1.4*'

This may seem odd, but you might know, for example, that a bug was introduced in 1.1 that wasn't fixed until 1.4. You would prefer the 1.4 series, but, if it is incompatible with other packages, you can settle for 1.0. Notice we have used single quotes around the version expression in this case because several of the symbols in these more complex patterns have special meanings in terminal shells. It is easiest just to quote them.
With conda you can also use inequality comparisons to select candidate versions (still resolving dependency consistency). Maybe the bug above was fixed in 1.3.5, and you would like either the latest version available (perhaps even 1.5 or 2.0 have come out), but still avoiding versions 1.1 through 1.3.4. You could spell that as:
conda install 'bar-lib>1.3.4,<1.1'

For this exercise, install the latest compatible version of attrs that is later than version 16, but earlier than version 17.3. Which version gets installed?

16.3.0
17.2.1
17.2.3
17.3.0
No compatible version was found

#yes 17.2.0


(base) $ conda install 'attrs>16, <17.3
'Collecting package metadata (current_repodata.json): done
Solving environment: failed with initial frozen solve. Retrying with flexible solve.
Collecting package metadata (repodata.json): done
Solving environment: done

## Package Plan ##

  environment location: /home/repl/miniconda

  added / updated specs:
    - attrs[version='>16,<17.3']


The following packages will be downloaded:

    package                    |            build
    ---------------------------|-----------------
    attrs-17.2.0               |   py36h8d46266_0          34 KB
    ------------------------------------------------------------
                                           Total:          34 KB

The following NEW packages will be INSTALLED:

  attrs              pkgs/main/linux-64::attrs-17.2.0-py36h8d46266_0
  hypothesis         pkgs/main/linux-64::hypothesis-4.36.2-py36_0
  pympler            pkgs/main/noarch::pympler-0.7-py_0
  zope               pkgs/main/linux-64::zope-1.0-py36_1
  zope.interface     pkgs/main/linux-64::zope.interface-4.7.1-py36h7b6447c_0


Proceed ([y]/n)? y


Downloading and Extracting Packages
attrs-17.2.0         | 34 KB     |attrs-17.2.0         | 34 KB     | ##################################### | 100%
Preparing transaction: done
Verifying transaction: done
Executing transaction: done


Good! The compatible version of attrs that gets installed is 17.2.0.


