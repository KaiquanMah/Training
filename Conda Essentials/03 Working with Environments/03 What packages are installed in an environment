What packages are installed in an environment? (I)
The command conda list seen previously displays all packages installed in the current environment. You can reduce this list by appending the particular package you want as an option. The package can be specified either as a simple name, or as a regular expression pattern. This still displays the version (and channel) associated with the installed package(s). For example:

(test-env) $ conda list 'numpy|pandas'
# packages in environment at /home/repl/miniconda/envs/test-env:
#
# Name                    Version                   Build  Channel
numpy                     1.11.3                   py35_0
pandas                    0.18.1              np111py35_0

Without specifying 'numpy|pandas', these same two lines would be printed, simply interspersed with many others for the various other installed packages. Notice that the output displays the filepath associated with the current environment first: in this case, /home/repl/miniconda/envs/test-env as test-env is the active environment (as also shown at the prompt).




Following this example below, what versions of numpy and pandas are installed in the current (base/root) environment?
(base) $ conda list 'numpy|pandas'
# packages in environment at /home/repl/miniconda:
## Name                    Version                   Build  Channel
numpy                     1.16.0           py36h7e9f1db_1
numpy-base                1.16.0           py36hde5b4d6_1
pandas                    0.22.0           py36hf484d3e_0


numpy=1.11.3; pandas=0.18.1
numpy=2.0.1; pandas=0.22.2
numpy=1.10.4; pandas=0.17.1
numpy=1.13.1; pandas=0.21.0
numpy=1.15.0; pandas 0.23.0

#yes numpy=1.16.0; pandas=0.22.0
Yes, the current environment uses numpy 1.16.0 and pandas 0.22.0


















What packages are installed in an environment? (II)
It is often useful to query a different environment's configuration (i.e., as opposed to the currently active environment). You might do this simply to verify the package versions in that environment that you need for a given project. Or you may wish to find out what versions you or a colleague used in some prior project (developed in that other environment). The switch --name or -n allows you to query another environment. For example,

(course-env) $ conda list --name test-env 'numpy|pandas'
# packages in environment at /home/repl/miniconda/envs/test-env:
#
# Name                    Version                   Build  Channel
numpy                     1.11.3                   py35_0
pandas                    0.18.1              np111py35_0

Without specifying the --name argument, the command conda list would run in the current environment. The output would then be the versions of numpy and pandas present in the current environment.
Suppose you created an environment called pd-2015 in 2015 when you were working on a project. Identify which versions of numpy and pandas were installed in the environment pd-2015.


numpy=1.11.3; pandas=0.18.1
numpy=1.14.0; pandas=0.22.0
numpy=1.10.4; pandas=0.17.0
numpy=1.8.2; pandas=0.16.0
numpy=1.15.0; pandas 0.23.0

#yes numpy=1.16.4; pandas=0.22.0
Yes, the environment pd-2015 uses numpy 1.16.4 and pandas 0.22.0.



(base) $ conda list --name pd-2015 'numpy|pandas'
# packages in environment at /.conda/envs/pd-2015:
## Name                    Version                   Build  Channel
numpy                     1.16.4           py36h7e9f1db_0
numpy-base                1.16.4           py36hde5b4d6_0
pandas                    0.22.0           py36hf484d3e_0



