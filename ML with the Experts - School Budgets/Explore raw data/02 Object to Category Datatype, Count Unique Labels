#part 1
#Exploring datatypes in pandas
#It's always good to know what datatypes you're working with, especially when the inefficient pandas type object may be involved. Towards that end, let's explore what we have.
#The data has been loaded into the workspace as df. Your job is to look at the DataFrame attribute .dtypes in the IPython Shell, and call its .value_counts() method in order to answer the question below.
#Make sure to call df.dtypes.value_counts(), and not df.value_counts()! Check out the difference in the Shell. df.value_counts() will return an error, because it is a Series method, not a DataFrame method.

#How many columns with dtype object are in the data?
#23


#part 2
#Encode the labels as categorical variables
#Remember, your ultimate goal is to predict the probability that a certain label is attached to a budget line item. You just saw that many columns in your data are the inefficient object type. Does this include the labels you're trying to predict? Let's find out!
#There are 9 columns of labels in the dataset. Each of these columns is a category that has many possible values it can take (https://www.drivendata.org/competitions/4/box-plots-for-education/page/15/#labels_list). The 9 labels have been loaded into a list called LABELS. In the Shell, check out the type for these labels using df[LABELS].dtypes.
#You will notice that every label is encoded as an object datatype. Because category datatypes are much more efficient (https://www.continuum.io/content/pandas-categoricals) your task is to convert the labels to category types using the .astype() method.
#Note: .astype() only works on a pandas Series. Since you are working with a pandas DataFrame, you'll need to use the .apply() method and provide a lambda function called categorize_label that applies .astype() to each column, x.


df[LABELS].info()
df[LABELS].dtypes    #all are objects

# Define the lambda function: categorize_label
#Define the lambda function categorize_label to convert column x into x.astype('category').
categorize_label = lambda x: x.astype('category')

# Convert df[LABELS] to a categorical type
#Use the LABELS list provided to convert the subset of data df[LABELS] to categorical types using the .apply() method and categorize_label. Don't forget axis=0.
df[LABELS] = df[LABELS].apply(categorize_label, axis=0)

# Print the converted dtypes
#Print the converted .dtypes attribute of df[LABELS].
print(df[LABELS].dtypes)


#part 3
#Counting unique labels
#As Peter mentioned in the video, there are over 100 unique labels. In this exercise, you will explore this fact by counting and plotting the number of unique values for each category of label.
#The dataframe df and the LABELS list have been loaded into the workspace; the LABELS columns of df have been converted to category types.
#pandas, which has been pre-imported as pd, provides a pd.Series.nunique method for counting the number of unique values in a Series.

# Import matplotlib.pyplot
import matplotlib.pyplot as plt

# Calculate number of unique values for each label: num_unique_labels
#Create the DataFrame num_unique_labels by using the .apply() method on df[LABELS] with pd.Series.nunique as the argument.
num_unique_labels = df[LABELS].apply(pd.Series.nunique)

# Plot number of unique values for each label
#Create a bar plot of num_unique_labels using pandas' .plot(kind='bar') method.
num_unique_labels.plot(kind='bar')

# Label the axes
plt.xlabel('Labels')
plt.ylabel('Number of unique values')

# Display the plot
plt.show()
