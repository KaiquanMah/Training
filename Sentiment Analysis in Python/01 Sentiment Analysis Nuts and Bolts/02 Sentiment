Detecting the sentiment of Tale of Two Cities
In the video we saw that one type of algorithms for detecting the sentiment are based on a lexicon of predefined words and their corresponding polarity score. Your task in this exercise is to detect the sentiment, including polarity and subjectivity of a given string using such a rule-based approach and the textblob library in Python.
You will work with the two_cities string. It contains the first sentence of Dickens's Tale of Two Cities novel. Feel free to explore it in the Shell.

Create a text blob object from the two_cities string.
Print out the polarity and subjectivity.

# Import the required packages
from textblob import TextBlob

# Create a textblob object  
blob_two_cities = TextBlob(two_cities)

# Print out the sentiment 
print(blob_two_cities.sentiment)

<script.py> output:
    Sentiment(polarity=0.022916666666666658, subjectivity=0.5895833333333332)
Looking at the string, do you agree with its overall slightly positive score?











Comparing the sentiment of two strings
In this exercise, you will compare the sentiment of two different strings. A string called annak has been defined for you and it contains the first sentence of Anna Karenina. A second string called catcher has been created and it contains the first sentence of The Catcher in the Rye. Feel free to explore both in the IPython Shell.
Your task is again to detect the sentiment of each string - both their polarity and subjectivity. Which one has higher sentiment score? Did you expect that to be the case?

Import the required function from the appropriate package.
Create a text blob object from the annak string.
Create a text blob from the catcher string as well.
Print out the polarity and subjectivity of each of the created blobs.


# Import the required packages
from textblob import TextBlob


# Create a textblob object 
blob_annak = TextBlob(annak)
blob_catcher = TextBlob(catcher)

# Print out the sentiment   
print('Sentiment of annak: ', blob_annak.sentiment)
print('Sentiment of catcher: ', blob_catcher.sentiment)

<script.py> output:
    Sentiment of annak:  Sentiment(polarity=0.05000000000000002, subjectivity=0.95)
    Sentiment of catcher:  Sentiment(polarity=-0.05, subjectivity=0.5466666666666666)

It shouldn't be surprising that the opening sentence of Catcher in the Rye has a negative score, whereas the one from Anna Karenina has a slightly positive one.













What is the sentiment of a movie review?
In a previous exercise, you detected the sentiment of the first sentence of the Tale of Two Cities novel by Dickens. Now you will continue to work with the movie reviews dataset. Do you remember how you found the longest and shortest reviews? One of the longest reviews has been imported for you. It is called titanic as it discusses the Titanic movie. Feel free to explore it in the Shell.
Can you calculate the polarity and subjectivity of the titanic string? This review is positive (i.e. has a label of 1). Is the polarity score also positive?

Import the required functionality.
Create a text blob object from the titanic string.
Print out the result of its sentiment property.

# Import the required packages
from textblob import TextBlob

# Create a textblob object  
blob_titanic = TextBlob(titanic)

# Print out its sentiment  
print(blob_titanic.sentiment)

<script.py> output:
    Sentiment(polarity=0.2024748060772906, subjectivity=0.4518248900857597)

Did you notice that the polarity is around 0.2 and the review is classified as positive (has a label of 1)?

