String operators on Twitter data
You continue working with the tweets data where the text column stores the content of each tweet.
Your task is to turn the text column into a list of tokens. Then, using string operators, remove all non-alphabetic characters from the created list of tokens.

Import the word tokenizing function.
Create word tokens from each tweet.
Filter out all non-alphabetic characters from the created list.

In [2]: tweets.text
Out[2]: 
0                     @VirginAmerica What @dhepburn said.
1       @VirginAmerica plus you've added commercials t...
2       @VirginAmerica I didn't today... Must mean I n...
...
997     @united that guy really has no customer servic...
998                @united he has no priority and Iove it
999              @united Pleased to be a Premier Platinum
1000    @united how can you not put my bag on plane to...
Name: text, Length: 1001, dtype: object


# Import the word tokenizing package
from nltk import word_tokenize

# Tokenize the text column
word_tokens = [word_tokenize(review) for review in tweets.text]
#print the first list of word tokens within the list of lists
print('Original tokens: ', word_tokens[0])

# Filter out non-letter characters
cleaned_tokens = [[word for word in item if word.isalpha()] for item in word_tokens]
print('Cleaned tokens: ', cleaned_tokens[0])

<script.py> output:
    Original tokens:  ['@', 'VirginAmerica', 'What', '@', 'dhepburn', 'said', '.']
    Cleaned tokens:  ['VirginAmerica', 'What', 'dhepburn', 'said']
    
    
Did you notice how the list of word tokens changes before and after the filtering out of non-alphabetic characters?

    



















More string operators and Twitter
In this exercise, you will apply different string operators to three strings, selected from the tweets dataset. A tweets_list has been created for you.

You need to construct three new lists by applying different string operators:
a list retaining only letters
a list retaining only characters
a list retaining only digits

The required functions have been imported for you from nltk.
Create a list of the tokens from tweets_list.
In the list letters remove all digits and other characters, i.e. keep only letters.
Retain alphanumeric characters but remove all other characters in let_digits.
Create digits by removing letters and characters and keeping only numbers.

["@VirginAmerica it's really aggressive to blast obnoxious 'entertainment' in your guests' faces &amp; they have little recourse", "@VirginAmerica Hey, first time flyer next week - excited! But I'm having a hard time getting my flights added to my Elevate account. Help?", '@united Change made in just over 3 hours. For something that should have taken seconds online, I am not thrilled. Loved the agent, though.']

In [1]: tweets_list
Out[1]: 
["@VirginAmerica it's really aggressive to blast obnoxious 'entertainment' in your guests' faces &amp; they have little recourse",
 "@VirginAmerica Hey, first time flyer next week - excited! But I'm having a hard time getting my flights added to my Elevate account. Help?",
 '@united Change made in just over 3 hours. For something that should have taken seconds online, I am not thrilled. Loved the agent, though.']
 
 

In [4]: tokens[0]
Out[4]: 
['@',
 'VirginAmerica',
 'it',
 "'s",
 'really',
 'aggressive',
 'to',
 'blast',
 'obnoxious',
 "'entertainment",
 "'",
 'in',
 'your',
 'guests',
 "'",
 'faces',
 '&',
 'amp',
 ';',
 'they',
 'have',
 'little',
 'recourse']
 
 
 


# Create a list of lists, containing the tokens from list_tweets
tokens = [word_tokenize(item) for item in tweets_list]

# Remove characters and digits , i.e. retain only letters
letters = [[word for word in item if word.isalpha()] for item in tokens]
# Remove characters, i.e. retain only letters and digits
let_digits = [[word for word in item if word.isalnum()] for item in tokens]
# Remove letters and characters, retain only digits
digits = [[word for word in item if word.isdigit()] for item in tokens]

# Print the last item in each list
print('Last item in alphabetic list: ', letters[2])
print('Last item in list of alphanumerics: ', let_digits[2])
print('Last item in the list of digits: ', digits[2])


<script.py> output:
    Last item in alphabetic list:  ['united', 'Change', 'made', 'in', 'just', 'over', 'hours', 'For', 'something', 'that', 'should', 'have', 'taken', 'seconds', 'online', 'I', 'am', 'not', 'thrilled', 'Loved', 'the', 'agent', 'though']
    Last item in list of alphanumerics:  ['united', 'Change', 'made', 'in', 'just', 'over', '3', 'hours', 'For', 'something', 'that', 'should', 'have', 'taken', 'seconds', 'online', 'I', 'am', 'not', 'thrilled', 'Loved', 'the', 'agent', 'though']
    Last item in the list of digits:  ['3']
    

You now know how to apply string operators to modify strings or lists of strings. You can apply these skills when constructing features from text.

