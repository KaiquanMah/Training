Predict probabilities of movie reviews
In this problem, you will build a logistic regression using the movies dataset. The labels are stored in the arrayy and the features in X.
Train the model on the training data. Instead of predicting classes, predict the probabilities that each instance in the test set belongs to each of the two classes.
The logistic regression and train/test splitting functions have been imported for you.

Split the data into training and testing set.
Train a logistic regression model.
Predict the probabilities of class 0 and of class 1.

# Split into training and testing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=321)

# Train a logistic regression
log_reg = LogisticRegression().fit(X_train, y_train)

# Predict the probability of the 0 class
prob_0 = log_reg.predict_proba(X_test)[:, 0]
# Predict the probability of the 1 class
prob_1 = log_reg.predict_proba(X_test)[:, 1]

print("First 10 predicted probabilities of class 0: ", prob_0[:10])
print("First 10 predicted probabilities of class 1: ", prob_1[:10])


<script.py> output:
    First 10 predicted probabilities of class 0:  [0.86201389 0.90319907 0.60802486 0.1582852  0.86466375 0.87877082
     0.6107011  0.78898398 0.44494315 0.30825607]

    First 10 predicted probabilities of class 1:  [0.13798611 0.09680093 0.39197514 0.8417148  0.13533625 0.12122918
     0.3892989  0.21101602 0.55505685 0.69174393]




Did you notice how the probabilities of class 0 and class 1 add up to 1 for each instance? In problems where the proportion of one class is larger than the other, we might want to work with predicted probabilities instead of predicted classes.

