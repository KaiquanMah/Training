Step 3 Building a classifier
This is the last step in the sentiment analysis prediction. We have explored and enriched our dataset with features related to the sentiment, and created numeric vectors from it.
You will use the dataset that you built in the previous steps. Namely, it contains a feature for the length of reviews, and 200 features created with the Tfidf vectorizer.
Your task is to train a logistic regression to predict the sentiment. The data has been imported for you and is called reviews_transformed. The target is called score and is binary : 1 when the product review is positive and 0 otherwise.
Train a logistic regression model and evaluate its performance on the test data. How well does the model do?
All the required packages have been imported for you.

Perform the train/test split, allocating 20% of the data to testing and setting the random seed to 456.
Train a logistic regression model.
Predict the class.
Print out the accuracy score and the confusion matrix on the test set.

# Define X and y
y = reviews_transformed.score
X = reviews_transformed.drop('score', axis=1)

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=456)

# Train a logistic regression
log_reg = LogisticRegression().fit(X_train, y_train)
# Predict the labels
y_predicted = log_reg.predict(X_test)

# Print accuracy score and confusion matrix on test set
print('Accuracy on the test set: ', accuracy_score(y_test, y_predicted))
print(confusion_matrix(y_test, y_predicted)/len(y_test))

<script.py> output:
    Accuracy on the test set:  0.7885
    [[0.4105 0.1155]
     [0.096  0.378 ]]

You have trained and evaluated a logistic regression classifier using product reviews which you have transformed to numeric features. You are now ready to tackle other sentiment analysis problems.

