Logistic regression of movie reviews
In the video we learned that logistic regression is a common way to model a classification task, such as classifying the sentiment as positive or negative.
In this exercise, you will work with the movies reviews dataset. The label column stores the sentiment, which is 1 when the review is positive, and 0 when negative. The text review has been transformed, using BOW, to numeric columns.
Your task is to build a logistic regression model using the movies dataset and calculate its accuracy.

Import the logistic regression function.
Create and fit a logistic regression on the labels y and the features X.
Calculate the accuracy of the logistic regression model.

In [2]: movies
Out[2]: 
      label  about  acting  action  actors  ...  would  years  you  young  your
0       0.0    0.0     0.0     0.0     0.0  ...    1.0    0.0  0.0    0.0   0.0
1       0.0    0.0     1.0     0.0     1.0  ...    2.0    0.0  3.0    0.0   2.0
...
7500    1.0    1.0     0.0     0.0     0.0  ...    0.0    0.0  0.0    1.0   0.0

[7501 rows x 201 columns]


# Import the logistic regression
from sklearn.linear_model import LogisticRegression


# Define the vector of targets and matrix of features
y = movies.label
X = movies.drop('label', axis=1)

# Build a logistic regression model and calculate the accuracy
log_reg = LogisticRegression().fit(X, y)
print('Accuracy of logistic regression: ', log_reg.score(X, y))

<script.py> output:
    Accuracy of logistic regression:  0.7852286361818425

You have built your first logistic regression model and checked its accuracy! Let's practice some more!














Logistic regression using Twitter data
In this exercise, you will build a logistic regression model using the tweets dataset. The target is given by the airline_sentiment, which is 0 for negative tweets, 1 for neutral, and 2 for positive ones. So, in this case, you are given a multi-class classification task. Everything we learned about binary problems applies to multi-class classification problems as well.
You will evaluate the accuracy of the model using the two different approachesfrom the slides.
The logistic regression function and accuracy score have been imported for you.

Build and fit a logistic regression model using the defined X and y as arguments.
Calculate the accuracy of the logistic regression model.
Predict the labels.
Calculate the accuracy score using the predicted labels.

# Define the vector of targets and matrix of features
y = tweets.airline_sentiment
X = tweets.drop('airline_sentiment', axis=1)

# Build a logistic regression model and calculate the accuracy
log_reg = LogisticRegression().fit(X, y)
print('Accuracy of logistic regression: ', log_reg.score(X,y))

# Create an array of prediction
y_predict = log_reg.predict(X)

# Print the accuracy using accuracy score
print('Accuracy of logistic regression: ', log_reg.score(X, y_predict))

<script.py> output:
    Accuracy of logistic regression:  0.8562158469945356
    Accuracy of logistic regression:  1.0
    

You have built another logistic regression model and calculated its accuracy in two different ways. Have you noticed how the calculated accuracy scores are the same? This will not always be the case for other methods because the .score() function can use other default model performance metrics. So, use .accuracy_score() to be certain that you are calculating the accuracy when you are training a different supervised learning model.

