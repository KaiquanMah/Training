#SOURCE - https://docs.microsoft.com/en-us/learn/modules/use-automated-machine-learning/create-workspace
#https://docs.microsoft.com/en-us/azure/machine-learning/concept-automated-ml
#1 create AZ ML WORKSPACE
#2 CREATE COMPUTE INSTANCE + COMPUTE CLUSTER


#3 Explore data
#https://raw.githubusercontent.com/MicrosoftDocs/mslearn-aml-labs/master/data/daily-bike-share.csv
#create dataset











#4 Train a machine learning model
#Create + run an automated machine learning experiment
#extra reading - https://docs.microsoft.com/en-us/azure/machine-learning/tutorial-first-experiment-automated-ml

#Review the best model
#the "best" model found by the experiment may not be the best possible model, 
#just the best model found within the time allowed for this exercise!


Best model summary
Algorithm name
MaxAbsScaler, LightGBM
Normalized root mean squared error
0.07989

View all other metrics
Explained variance
0.83456
Mean absolute error
181.20
Mean absolute percentage error
51.196
Median absolute error
115.05
Normalized mean absolute error
0.053170
Normalized median absolute error
0.033758
Normalized root mean squared error
0.079888
Normalized root mean squared log error
0.064007
R2 score
0.83324
Root mean squared error
272.26
Root mean squared log error
0.45036
Spearman correlation
0.92253

Sampling
100.00 %
Registered models
No registration yet
Deploy status
No deployment yet























#5 Deploy a model as a service

#Deploy a predictive service
In Azure Machine Learning, you can deploy a service as an Azure Container Instances (ACI) or to an Azure Kubernetes Service (AKS) cluster. 
For production scenarios, an AKS deployment is recommended, for which you must create an inference cluster compute target. 
In this exercise, you'll use an ACI service, which is a suitable deployment target for testing, and does not require you to create an inference cluster.

-In Azure Machine Learning studio , on the Automated ML page, select the run for your automated machine learning experiment and view the Details tab.
-Select the algorithm name for the best model. Then, on the Model tab, use the Deploy button to deploy the model with the following settings:
Name: predict-rentals
Description: Predict cycle rentals
Compute type: ACI
Enable authentication: Selected

-Wait for the deployment to start - this may take a few seconds. Then, in the Model summary section, observe the Deploy status for the predict-rentals service, which should be Running. Wait for this status to change to Successful. You may need to select â†» Refresh periodically.
-In Azure Machine Learning studio, view the Endpoints page and select the predict-rentals real-time endpoint. Then select the Consume tab and note the following information there. You need this information to connect to your deployed service from a client application.
The REST endpoint for your service
the Primary Key for your service
-Note that you can use the â§‰ link next to these values to copy them to the clipboard.



### Details tab
##Attributes
Service ID
predict-rentals
Description
--
Deployment state
Healthy
#EXTRA READING - https://docs.microsoft.com/en-us/azure/machine-learning/how-to-deploy-and-where?tabs=azcli#understanding-service-state
Compute type
ACI
Created by
<your name>
Model ID
AutoMLde07a5a220:1
Created on
1/17/2021 2:58:24 PM
Last updated on
1/17/2021 2:58:24 PM
Image ID
--
REST endpoint
http://17cf569c-c556-4ec5-bc3e-77b18b68e7a1.eastus2.azurecontainer.io/score
Key-based authentication enabled
true
Swagger URI
http://17cf569c-c556-4ec5-bc3e-77b18b68e7a1.eastus2.azurecontainer.io/swagger.json
CPU
1.8
Memory
4 GB
Application Insights enabled
false


##Tags
No data


##Properties
runId
AutoML_de07a5a2-2861-4d12-8c42-fac8b3704030_0
hasInferenceSchema
True
hasHttps
False




###Consume tab
REST endpoint
http://17cf569c-c556-4ec5-bc3e-77b18b68e7a1.eastus2.azurecontainer.io/score

Authentication types
<tick>using key                   <>using token
Primary key
<>          Regenerate
Secondary key
<>          Regenerate






###Deployment logs tab
2021-01-17T07:02:11,296729900+00:00 - iot-server/run 
2021-01-17T07:02:11,295146100+00:00 - rsyslog/run 
2021-01-17T07:02:11,303101800+00:00 - gunicorn/run 
2021-01-17T07:02:11,329279200+00:00 - nginx/run 
/usr/sbin/nginx: /azureml-envs/azureml_8eff28b157f42edcd2424a5aae6c8074/lib/libcrypto.so.1.0.0: no version information available (required by /usr/sbin/nginx)
/usr/sbin/nginx: /azureml-envs/azureml_8eff28b157f42edcd2424a5aae6c8074/lib/libcrypto.so.1.0.0: no version information available (required by /usr/sbin/nginx)
/usr/sbin/nginx: /azureml-envs/azureml_8eff28b157f42edcd2424a5aae6c8074/lib/libssl.so.1.0.0: no version information available (required by /usr/sbin/nginx)
/usr/sbin/nginx: /azureml-envs/azureml_8eff28b157f42edcd2424a5aae6c8074/lib/libssl.so.1.0.0: no version information available (required by /usr/sbin/nginx)
/usr/sbin/nginx: /azureml-envs/azureml_8eff28b157f42edcd2424a5aae6c8074/lib/libssl.so.1.0.0: no version information available (required by /usr/sbin/nginx)
rsyslogd: /azureml-envs/azureml_8eff28b157f42edcd2424a5aae6c8074/lib/libuuid.so.1: no version information available (required by rsyslogd)
EdgeHubConnectionString and IOTEDGE_IOTHUBHOSTNAME are not set. Exiting...
2021-01-17T07:02:12,994766200+00:00 - iot-server/finish 1 0
Starting gunicorn 19.9.0
2021-01-17T07:02:13,005833400+00:00 - Exit code 1 is normal. Not restarting iot-server.
Listening at: http://127.0.0.1:31311 (61)
Using worker: sync
worker timeout is set to 300
Booting worker with pid: 98
SPARK_HOME not set. Skipping PySpark Initialization.
Generating new fontManager, this may take some time...
Initializing logger
2021-01-17 07:02:17,920 | root | INFO | Starting up app insights client
Starting up app insights client
2021-01-17 07:02:17,921 | root | INFO | Starting up request id generator
Starting up request id generator
2021-01-17 07:02:17,922 | root | INFO | Starting up app insight hooks
Starting up app insight hooks
2021-01-17 07:02:17,922 | root | INFO | Invoking user's init function
Invoking user's init function
2021-01-17 07:02:25,697 | root | INFO | Users's init has completed successfully
Users's init has completed successfully
2021-01-17 07:02:25,702 | root | INFO | Skipping middleware: dbg_model_info as it's not enabled.
Skipping middleware: dbg_model_info as it's not enabled.
2021-01-17 07:02:25,702 | root | INFO | Skipping middleware: dbg_resource_usage as it's not enabled.
Skipping middleware: dbg_resource_usage as it's not enabled.
2021-01-17 07:02:25,706 | root | INFO | Scoring timeout is found from os.environ: 60000 ms
Scoring timeout is found from os.environ: 60000 ms
2021-01-17 07:02:25,731 | root | INFO | 200
200
127.0.0.1 - - [17/Jan/2021:07:02:25 +0000] "GET /swagger.json HTTP/1.0" 200 2746 "-" "Go-http-client/1.1"
2021-01-17 07:09:52,383 | root | INFO | 200
200
127.0.0.1 - - [17/Jan/2021:07:09:52 +0000] "GET /swagger.json HTTP/1.0" 200 2746 "-" "Go-http-client/1.1"
2021-01-17 07:09:55,757 | root | INFO | 200
200
127.0.0.1 - - [17/Jan/2021:07:09:55 +0000] "GET /swagger.json HTTP/1.0" 200 2746 "-" "Go-http-client/1.1"
2021-01-17 07:10:18,369 | root | INFO | 200
200
127.0.0.1 - - [17/Jan/2021:07:10:18 +0000] "GET /swagger.json HTTP/1.0" 200 2746 "-" "Go-http-client/1.1"
2021-01-17 07:10:19,093 | root | INFO | 200
200
127.0.0.1 - - [17/Jan/2021:07:10:19 +0000] "GET /swagger.json HTTP/1.0" 200 2746 "-" "Go-http-client/1.1"
2021-01-17 07:13:58,163 | root | INFO | 200
200
127.0.0.1 - - [17/Jan/2021:07:13:58 +0000] "GET /swagger.json HTTP/1.0" 200 2746 "-" "Go-http-client/1.1"
2021-01-17 07:13:58,821 | root | INFO | 200
200
127.0.0.1 - - [17/Jan/2021:07:13:58 +0000] "GET /swagger.json HTTP/1.0" 200 2746 "-" "Go-http-client/1.1"
2021-01-17 07:14:49,527 | root | INFO | Validation Request Content-Type
Validation Request Content-Type
2021-01-17 07:14:49,528 | root | INFO | 	Host: localhost:5001
	Host: localhost:5001
2021-01-17 07:14:49,528 | root | INFO | 	X-Real-Ip: 127.0.0.1
	X-Real-Ip: 127.0.0.1
2021-01-17 07:14:49,528 | root | INFO | 	X-Forwarded-For: 127.0.0.1
	X-Forwarded-For: 127.0.0.1
2021-01-17 07:14:49,529 | root | INFO | 	X-Forwarded-Proto: http
	X-Forwarded-Proto: http
2021-01-17 07:14:49,530 | root | INFO | 	Connection: close
	Connection: close
2021-01-17 07:14:49,530 | root | INFO | 	Content-Length: 347
	Content-Length: 347
2021-01-17 07:14:49,530 | root | INFO | 	User-Agent: python-requests/2.25.0
	User-Agent: python-requests/2.25.0
2021-01-17 07:14:49,531 | root | INFO | 	Accept: */*
	Accept: */*
2021-01-17 07:14:49,531 | root | INFO | 	Accept-Encoding: gzip, deflate
	Accept-Encoding: gzip, deflate
2021-01-17 07:14:49,532 | root | INFO | 	Authorization: Bearer 8I2OzTGd852aR7C1K1A0C6tnpcHp2Jjy
	Authorization: Bearer 8I2OzTGd852aR7C1K1A0C6tnpcHp2Jjy
2021-01-17 07:14:49,532 | root | INFO | 	Content-Type: application/json
	Content-Type: application/json
2021-01-17 07:14:49,534 | root | INFO | 	X-Ms-Request-Id: ab7c01a3-43f2-4f19-95ce-de77a52ffc67
	X-Ms-Request-Id: ab7c01a3-43f2-4f19-95ce-de77a52ffc67
2021-01-17 07:14:49,534 | root | INFO | Scoring Timer is set to 60.0 seconds
Scoring Timer is set to 60.0 seconds
2021-01-17 07:14:49,609 | root | INFO | 200
200
127.0.0.1 - - [17/Jan/2021:07:14:49 +0000] "POST /score HTTP/1.0" 200 115 "-" "python-requests/2.25.0"







#Test the deployed service
Now that you've deployed a service, you can test it using some simple code.

-With the Consume page for the predict-rentals service page open in your browser, open a new browser tab and open a second instance of Azure Machine Learning studio . 
Then in the new tab, view the Notebooks page (under Author).
-In the Notebooks page, under My files, use the ðŸ—‹ button to create a new file with the following settings:
File location: Users/your user name
File name: Test-Bikes
File type: Notebook
Overwrite if already exists: Selected

-When the new notebook has been created, ensure that the compute instance you created previously is selected in the Compute box, and that it has a status of Running.
-Use the â‰ª button to collapse the file explorer pane and give you more room to focus on the Test-Bikes.ipynb notebook tab.
-In the rectangular cell that has been created in the notebook, paste the following code:
#Python
endpoint = 'http://17cf569c-c556-4ec5-bc3e-77b18b68e7a1.eastus2.azurecontainer.io/score' #Replace with your endpoint
key = 'YOUR_KEY' #Replace with your key

import json
import requests

#An array of features based on five-day weather forecast
x = [[1,1,2022,1,0,6,0,2,0.344167,0.363625,0.805833,0.160446],
    [2,1,2022,1,0,0,0,2,0.363478,0.353739,0.696087,0.248539],
    [3,1,2022,1,0,1,1,1,0.196364,0.189405,0.437273,0.248309],
    [4,1,2022,1,0,2,1,1,0.2,0.212122,0.590435,0.160296],
    [5,1,2022,1,0,3,1,1,0.226957,0.22927,0.436957,0.1869]]

#Convert the array to JSON format
input_json = json.dumps({"data": x})

#Set the content type and authentication for the request
headers = {"Content-Type":"application/json",
        "Authorization":"Bearer " + key}

#Send the request
response = requests.post(endpoint, input_json, headers=headers)

#If we got a valid response, display the predictions
if response.status_code == 200:
    y = json.loads(response.json())
    print("Predictions:")
    for i in range(len(x)):
        print (" Day: {}. Predicted rentals: {}".format(i+1, max(0, round(y["result"][i]))))
else:
    print(response)





#Don't worry too much about the details of the code. It just defines features for a five day period using hypothetical weather forecast data, and uses the predict-rentals service you created to predict cycle rentals for those five days.
Predictions:
 Day: 1. Predicted rentals: 572
 Day: 2. Predicted rentals: 405
 Day: 3. Predicted rentals: 120
 Day: 4. Predicted rentals: 125
 Day: 5. Predicted rentals: 103




-Switch to the browser tab containing the Consume page for the predict-rentals service, and copy the REST endpoint for your service. The switch back to the tab containing the notebook and paste the key into the code, replacing YOUR_ENDPOINT.
-Switch to the browser tab containing the Consume page for the predict-rentals service, and copy the Primary Key for your service. The switch back to the tab containing the notebook and paste the key into the code, replacing YOUR_KEY.
-Save the notebook, Then use the â–· button next to the cell to run the code.
-Verify that predicted number of rentals for each day in the five day period are returned.






