#source: https://docs.microsoft.com/en-us/learn/modules/intro-to-azure-machine-learning-service/5-using-azure-ml
#source: https://microsoftlearning.github.io/mslearn-dp100/instructions/04-run-experiments.html
#extra reading: https://jupyter-notebook.readthedocs.io/en/stable/notebook.html


#Install the Azure Machine Learning SDK
#The Azure Machine Learning SDK is installed by default on your compute instance, but it is updated frequently; so follow these steps to upgrade to the latest release.

#In the Jupyter notebook environment, create a new Terminal. 
#This will open a new tab with a command shell.

#Enter the following command to update the Azure ML SDK:
pip install --upgrade azureml-sdk

#install the azureml-widgets package, which contains libraries for displaying Azure Machine Learning information in notebooks
pip install --upgrade azureml-widgets

#When the installation is complete, you can close the Terminal tab and return to the tab containing the Jupyter home page






















#https://github.com/MicrosoftLearning/mslearn-dp100
#04 - Run Experiments.ipynb


#Connect to your workspace
import azureml.core
from azureml.core import Workspace

# Load the workspace from the saved config file
ws = Workspace.from_config()
print('Ready to use Azure ML {} to work with {}'.format(azureml.core.VERSION, ws.name))

Ready to use Azure ML 1.19.0 to work with Workspace1







#Run an experiment
from azureml.core import Experiment
import pandas as pd
import matplotlib.pyplot as plt
%matplotlib inline 

# Create an Azure ML experiment in your workspace
experiment = Experiment(workspace=ws, name="mslearn-diabetes")

# Start logging data from the experiment, obtaining a reference to the experiment run
run = experiment.start_logging()
print("Starting experiment:", experiment.name)

# load the data from a local file
data = pd.read_csv('data/diabetes.csv')

# Count the rows and log the result
row_count = (len(data))
run.log('observations', row_count)
print('Analyzing {} rows of data'.format(row_count))

# Plot and log the count of diabetic vs non-diabetic patients
diabetic_counts = data['Diabetic'].value_counts()
fig = plt.figure(figsize=(6,6))
#gca = get current axes
#If the current axes don't exist, the appropriate axes will be created and then returned.
ax = fig.gca()    
diabetic_counts.plot.bar(ax = ax) 
ax.set_title('Patients with Diabetes') 
ax.set_xlabel('Diagnosis') 
ax.set_ylabel('Patients')
plt.show()
run.log_image(name='label distribution', plot=fig)

# log distinct pregnancy counts
pregnancies = data.Pregnancies.unique()
run.log_list('pregnancy categories', pregnancies)

# Log summary statistics for numeric columns
med_columns = ['PlasmaGlucose', 'DiastolicBloodPressure', 'TricepsThickness', 'SerumInsulin', 'BMI']
summary_stats = data[med_columns].describe().to_dict()
for col in summary_stats:
    keys = list(summary_stats[col].keys())
    values = list(summary_stats[col].values())
    for index in range(len(keys)):
        run.log_row(col, stat=keys[index], value = values[index])
        
# Save a sample of the data and upload it to the experiment output
data.sample(100).to_csv('sample.csv', index=False, header=True)
run.upload_file(name='outputs/sample.csv', path_or_stream='./sample.csv')

# Complete the run
run.complete()


Starting experiment: mslearn-diabetes
Analyzing 10000 rows of data
<bar chart>







print(summary_stats)
{'PlasmaGlucose': {'count': 10000.0, 'mean': 107.8502, 'std': 31.920909360565563, 'min': 44.0, '25%': 84.0, '50%': 105.0, '75%': 129.0, 'max': 192.0}, 
 'DiastolicBloodPressure': {'count': 10000.0, 'mean': 71.2075, 'std': 16.801478289640706, 'min': 24.0, '25%': 58.0, '50%': 72.0, '75%': 85.0, 'max': 117.0}, 
 'TricepsThickness': {'count': 10000.0, 'mean': 28.8176, 'std': 14.506480415228332, 'min': 7.0, '25%': 15.0, '50%': 31.0, '75%': 41.0, 'max': 92.0}, 
 'SerumInsulin': {'count': 10000.0, 'mean': 139.2436, 'std': 133.77791937465278, 'min': 14.0, '25%': 39.0, '50%': 85.0, '75%': 197.0, 'max': 796.0}, 
 'BMI': {'count': 10000.0, 'mean': 31.56702174359113, 'std': 9.804365693559113, 'min': 18.20080735, '25%': 21.247426835, '50%': 31.922420785, '75%': 39.3289214475, 'max': 56.03462763}
}


print(summary_stats['DiastolicBloodPressure'])
{'count': 10000.0, 'mean': 71.2075, 'std': 16.801478289640706, 'min': 24.0, '25%': 58.0, '50%': 72.0, '75%': 85.0, 'max': 117.0}

print(summary_stats['DiastolicBloodPressure'].keys())
dict_keys(['count', 'mean', 'std', 'min', '25%', '50%', '75%', 'max'])

print(summary_stats['DiastolicBloodPressure'].values())
dict_values([10000.0, 71.2075, 16.801478289640706, 24.0, 58.0, 72.0, 85.0, 117.0])

print(type(summary_stats['DiastolicBloodPressure'].values()))
<class 'dict_values'>









#View run details
#In Jupyter Notebooks, you can use the RunDetails widget to see a visualization of the run details.
from azureml.widgets import RunDetails
RunDetails(run).show()


ScriptRun Widget (Completed)
Run Properties
Status	            Completed
Node run Start Time	1/11/2021 5:45:43 PM
Node run Duration	0:00:18
Run Id	            8dda5d9e-73b8-415a-a23b-87ed663f5cd6
Arguments	        N/A
BMI                                 [object Object]
DiastolicBloodPressure              [object Object]
label distribution                  aml://artifactId/ExperimentRun/dcid.8dda5d9e-73b8-415a-a23b-87ed663f5cd6/label distribution_1610358354.png
observations        10000
PlasmaGlucose       [object Object]
SerumInsulin        [object Object]
TricepsThickness    [object Object]

Output Logs         Show Active log
Run is completed.








#View more details in Azure Machine Learning studio
Note that the RunDetails widget includes a link to view run details in Azure Machine Learning studio. Click this to open a new browser tab with the run details (you can also just open Azure Machine Learning studio and find the run on the Experiments page). When viewing the run in Azure Machine Learning studio, note the following:

The Details tab contains the general properties of the experiment run.
The Metrics tab enables you to select logged metrics and view them as tables or charts.
The Images tab enables you to select and view any images or plots that were logged in the experiment (in this case, the Label Distribution plot)
The Child Runs tab lists any child runs (in this experiment there are none).
The Outputs + Logs tab shows the output or log files generated by the experiment.
The Snapshot tab contains all files in the folder where the experiment code was run (in this case, everything in the same folder as this notebook).
The Explanations tab is used to show model explanations generated by the experiment (in this case, there are none).
The Fairness tab is used to visualize predictive performance disparities that help you evaluate the fairness of machine learning models (in this case, there are none).


Details tab
Properties
Status      Completed
Created     Jan 11, 2021 5:45 PM
Started     Jan 11, 2021 5:45 PM
Duration    17.80s
Compute target      local
Run ID              8dda5d9e-73b8-415a-a23b-87ed663f5cd6
Run number          1
Script name         --
Created by          <name>
Input datasets      None
Output datasets     None
Arguments           None
Registered models   None
Git repository URL  https://github.com/MicrosoftLearning/mslearn-dp100
Git branch          main
Git commit          45ed35fde189dd3dad0e9ca7c19c94a89dea98c5
See all properties  Raw JSON
{
    "runId": "8dda5d9e-73b8-415a-a23b-87ed663f5cd6",
    "runUuid": "bc345edd-c6c1-4992-8b4c-ac229202aa14",
    "parentRunUuid": null,
    "rootRunUuid": "bc345edd-c6c1-4992-8b4c-ac229202aa14",
    "target": "local",
    "status": "Completed",
    "parentRunId": null,
    "startTimeUtc": "2021-01-11T09:45:43.609Z",
    "endTimeUtc": "2021-01-11T09:46:01.407Z",
    "error": null,
    "warnings": null,
    "tags": {},
    "properties": {
        "azureml.git.repository_uri": "https://github.com/MicrosoftLearning/mslearn-dp100",
        "mlflow.source.git.repoURL": "https://github.com/MicrosoftLearning/mslearn-dp100",
        "azureml.git.branch": "main",
        "mlflow.source.git.branch": "main",
        "azureml.git.commit": "45ed35fde189dd3dad0e9ca7c19c94a89dea98c5",
        "mlflow.source.git.commit": "45ed35fde189dd3dad0e9ca7c19c94a89dea98c5",
        "azureml.git.dirty": "True",
        "ContentSnapshotId": "d9d087de-ab53-473d-b1a1-d55ead130246"
    },
    "inputDatasets": [],
    "outputDatasets": [],
    "runDefinition": null,
    "logFiles": {},
    "revision": 5
}


Tags
No tags

Metrics
BMI             Type: Table
SerumInsulin    Type: Table
TricepsThickness        Type: Table
DiastolicBloodPressure  Type: Table
PlasmaGlucose           Type: Table
pregnancy categories    Min: 0, Max: 14, Last: 14
label distribution      Type: Image
observations            10000

Description
Click edit icon to add a description







Metrics tab
BMI
Showing 1-8 of 8 values
step        stat        value
1           count       10000
2           mean        31.56702174359113
3           std         9.804365693559113
4           min         18.20080735
5           25%         21.247426835
6           50%         31.922420785
7           75%         39.3289214475
8           max         56.03462763

observations
Showing 1-1 of 1 values
step        observations
1           10000

pregnancy categories
Showing 1-10 of 15 values
step        pregnancy categories
1           0
2           8
3           7
4           9
5           1
6           3
7           5
8           2
9           6
10          11



Images tab
<logged img>

Child Runs tab
<There are no child runs for this run
Child runs are runs that are triggered by another run. They are useful to group together related runs.>
#extra reading: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-manage-runs?tabs=python#create-child-runs


Outputs + Logs tab
<logged img>
<sample.csv>
SampleDatasetPersonID,Pregnancies,PlasmaGlucose,DiastolicBloodPressure,TricepsThickness,SerumInsulin,BMI,DiabetesPedigree,Age,Diabetic
1947560,1,143,86,17,321,19.37172209,0.080195222,24,0
1156462,0,127,77,18,67,20.32784997,0.109292955,48,0
1360053,4,178,64,28,195,37.40987889,0.326269217,21,1
1358201,3,111,61,26,78,29.71433004,0.8113047409999999,46,1
1732374,5,114,61,43,60,34.08727632,0.877114622,43,1
1829877,3,144,43,29,276,30.44952356,0.7605093540000001,21,1
1904285,1,110,51,31,235,30.82023687,0.171940927,22,0



The Snapshot tab
<file/'windows' explorer>

The Explanations tab
<No explanations to display>
#feature importance matrix
#extra reading: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-machine-learning-interpretability-automl#interpretability-during-training-for-the-best-model

The Fairness tab
<No fairness metrics to display
Fairness metrics are used to understand model fairness with respect to sensitive attributes. >
#disparity in accuracy
#disparity in predictions
#extra reading: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-machine-learning-fairness-aml

