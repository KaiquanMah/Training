{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "377da6f7",
   "metadata": {
    "height": 30
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Defaulting to user installation because normal site-packages is not writeable\n",
      "Requirement already satisfied: weaviate-client in /usr/local/lib/python3.9/site-packages (3.25.3)\n",
      "Collecting weaviate-client\n",
      "  Downloading weaviate_client-4.16.10-py3-none-any.whl.metadata (3.7 kB)\n",
      "Collecting httpx<0.29.0,>=0.26.0 (from weaviate-client)\n",
      "  Downloading httpx-0.28.1-py3-none-any.whl.metadata (7.1 kB)\n",
      "Collecting validators<1.0.0,>=0.34.0 (from weaviate-client)\n",
      "  Downloading validators-0.35.0-py3-none-any.whl.metadata (3.9 kB)\n",
      "Requirement already satisfied: authlib<2.0.0,>=1.2.1 in /usr/local/lib/python3.9/site-packages (from weaviate-client) (1.3.1)\n",
      "Collecting pydantic<3.0.0,>=2.8.0 (from weaviate-client)\n",
      "  Downloading pydantic-2.11.9-py3-none-any.whl.metadata (68 kB)\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m68.4/68.4 kB\u001b[0m \u001b[31m5.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hRequirement already satisfied: grpcio<1.80.0,>=1.59.5 in /usr/local/lib/python3.9/site-packages (from weaviate-client) (1.65.2)\n",
      "Requirement already satisfied: protobuf<7.0.0,>=4.21.6 in /usr/local/lib/python3.9/site-packages (from weaviate-client) (4.25.4)\n",
      "Collecting deprecation<3.0.0,>=2.1.0 (from weaviate-client)\n",
      "  Downloading deprecation-2.1.0-py2.py3-none-any.whl.metadata (4.6 kB)\n",
      "Requirement already satisfied: cryptography in /usr/local/lib/python3.9/site-packages (from authlib<2.0.0,>=1.2.1->weaviate-client) (43.0.0)\n",
      "Requirement already satisfied: packaging in /usr/local/lib/python3.9/site-packages (from deprecation<3.0.0,>=2.1.0->weaviate-client) (24.0)\n",
      "Requirement already satisfied: anyio in /usr/local/lib/python3.9/site-packages (from httpx<0.29.0,>=0.26.0->weaviate-client) (4.3.0)\n",
      "Requirement already satisfied: certifi in /usr/local/lib/python3.9/site-packages (from httpx<0.29.0,>=0.26.0->weaviate-client) (2024.2.2)\n",
      "Collecting httpcore==1.* (from httpx<0.29.0,>=0.26.0->weaviate-client)\n",
      "  Downloading httpcore-1.0.9-py3-none-any.whl.metadata (21 kB)\n",
      "Requirement already satisfied: idna in /usr/local/lib/python3.9/site-packages (from httpx<0.29.0,>=0.26.0->weaviate-client) (3.7)\n",
      "Collecting h11>=0.16 (from httpcore==1.*->httpx<0.29.0,>=0.26.0->weaviate-client)\n",
      "  Downloading h11-0.16.0-py3-none-any.whl.metadata (8.3 kB)\n",
      "Collecting annotated-types>=0.6.0 (from pydantic<3.0.0,>=2.8.0->weaviate-client)\n",
      "  Downloading annotated_types-0.7.0-py3-none-any.whl.metadata (15 kB)\n",
      "Collecting pydantic-core==2.33.2 (from pydantic<3.0.0,>=2.8.0->weaviate-client)\n",
      "  Downloading pydantic_core-2.33.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (6.8 kB)\n",
      "Collecting typing-extensions>=4.12.2 (from pydantic<3.0.0,>=2.8.0->weaviate-client)\n",
      "  Downloading typing_extensions-4.15.0-py3-none-any.whl.metadata (3.3 kB)\n",
      "Collecting typing-inspection>=0.4.0 (from pydantic<3.0.0,>=2.8.0->weaviate-client)\n",
      "  Downloading typing_inspection-0.4.1-py3-none-any.whl.metadata (2.6 kB)\n",
      "Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.9/site-packages (from anyio->httpx<0.29.0,>=0.26.0->weaviate-client) (1.3.1)\n",
      "Requirement already satisfied: exceptiongroup>=1.0.2 in /usr/local/lib/python3.9/site-packages (from anyio->httpx<0.29.0,>=0.26.0->weaviate-client) (1.2.1)\n",
      "Requirement already satisfied: cffi>=1.12 in /usr/local/lib/python3.9/site-packages (from cryptography->authlib<2.0.0,>=1.2.1->weaviate-client) (1.16.0)\n",
      "Requirement already satisfied: pycparser in /usr/local/lib/python3.9/site-packages (from cffi>=1.12->cryptography->authlib<2.0.0,>=1.2.1->weaviate-client) (2.22)\n",
      "Downloading weaviate_client-4.16.10-py3-none-any.whl (583 kB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m583.8/583.8 kB\u001b[0m \u001b[31m38.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hDownloading deprecation-2.1.0-py2.py3-none-any.whl (11 kB)\n",
      "Downloading httpx-0.28.1-py3-none-any.whl (73 kB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m73.5/73.5 kB\u001b[0m \u001b[31m10.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hDownloading httpcore-1.0.9-py3-none-any.whl (78 kB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m78.8/78.8 kB\u001b[0m \u001b[31m11.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hDownloading pydantic-2.11.9-py3-none-any.whl (444 kB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m444.9/444.9 kB\u001b[0m \u001b[31m54.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hDownloading pydantic_core-2.33.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.0 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.0/2.0 MB\u001b[0m \u001b[31m92.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hDownloading validators-0.35.0-py3-none-any.whl (44 kB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m44.7/44.7 kB\u001b[0m \u001b[31m5.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hDownloading annotated_types-0.7.0-py3-none-any.whl (13 kB)\n",
      "Downloading typing_extensions-4.15.0-py3-none-any.whl (44 kB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m44.6/44.6 kB\u001b[0m \u001b[31m6.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hDownloading typing_inspection-0.4.1-py3-none-any.whl (14 kB)\n",
      "Downloading h11-0.16.0-py3-none-any.whl (37 kB)\n",
      "Installing collected packages: validators, typing-extensions, h11, deprecation, annotated-types, typing-inspection, pydantic-core, httpcore, pydantic, httpx, weaviate-client\n",
      "\u001b[33m  WARNING: The script httpx is installed in '/home/jovyan/.local/bin' which is not on PATH.\n",
      "  Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\u001b[0m\u001b[33m\n",
      "\u001b[0mSuccessfully installed annotated-types-0.7.0 deprecation-2.1.0 h11-0.16.0 httpcore-1.0.9 httpx-0.28.1 pydantic-2.11.9 pydantic-core-2.33.2 typing-extensions-4.15.0 typing-inspection-0.4.1 validators-0.35.0 weaviate-client-4.16.10\n",
      "\n",
      "\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip is available: \u001b[0m\u001b[31;49m24.0\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m25.2\u001b[0m\n",
      "\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49mpip3 install --upgrade pip\u001b[0m\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install -U weaviate-client"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f6ce1759",
   "metadata": {
    "height": 47
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'4.16.10'"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import weaviate\n",
    "weaviate.__version__"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b91d206-39f3-4064-8692-d29d59c86303",
   "metadata": {},
   "source": [
    "## Vector Database setup"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "346ea881-5faa-4d7f-b317-3b51a3d2bc15",
   "metadata": {},
   "source": [
    "Remove old Weaviate DB files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "010cae0d-c7c6-4cf0-aab5-e1b149d27be6",
   "metadata": {
    "height": 30
   },
   "outputs": [],
   "source": [
    "!rm -rf ~/.local/share/weaviate"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e4f866a-f746-4c88-8468-81ed859dfdad",
   "metadata": {},
   "source": [
    "\n",
    "### Step 1 - Download sample data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f8d8b55a",
   "metadata": {
    "height": 251
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'list'> 10\n",
      "{\n",
      "  \"Category\": \"SCIENCE\",\n",
      "  \"Question\": \"This organ removes excess glucose from the blood & stores it as glycogen\",\n",
      "  \"Answer\": \"Liver\"\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "import json\n",
    "\n",
    "# Download the data\n",
    "resp = requests.get('https://raw.githubusercontent.com/weaviate-tutorials/quickstart/main/data/jeopardy_tiny.json')\n",
    "data = json.loads(resp.text)  # Load data\n",
    "\n",
    "# Parse the JSON and preview it\n",
    "print(type(data), len(data))\n",
    "\n",
    "def json_print(data):\n",
    "    print(json.dumps(data, indent=2))\n",
    "\n",
    "json_print(data[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c56b4975-bce1-4805-8369-e680d28cf9a9",
   "metadata": {},
   "source": [
    "### Step 2 - Create an embedded instance of Weaviate vector database"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1504f6fc-c41a-4c53-966a-4bdb0ac02dcc",
   "metadata": {
    "height": 147
   },
   "outputs": [],
   "source": [
    "import weaviate, os\n",
    "# from weaviate import EmbeddedOptions\n",
    "import openai\n",
    "\n",
    "from dotenv import load_dotenv, find_dotenv\n",
    "_ = load_dotenv(find_dotenv()) # read local .env file\n",
    "openai.api_key = os.environ['OPENAI_API_KEY']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "95ef48cc",
   "metadata": {
    "height": 47
   },
   "outputs": [],
   "source": [
    "OPENAI_API_KEY = os.environ['OPENAI_API_KEY']\n",
    "OPENAI_API_BASE = os.environ['OPENAI_API_BASE']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9d5d531b",
   "metadata": {
    "height": 351
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "{\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"warning\",\"log_level_env\":\"\",\"msg\":\"log level not recognized, defaulting to info\",\"time\":\"2025-09-26T02:46:25Z\"}\n",
      "{\"action\":\"startup\",\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"Feature flag LD integration disabled: could not locate WEAVIATE_LD_API_KEY env variable\",\"time\":\"2025-09-26T02:46:25Z\"}\n",
      "{\"action\":\"startup\",\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"default_vectorizer_module\":\"none\",\"level\":\"info\",\"msg\":\"the default vectorizer modules is set to \\\"none\\\", as a result all new schema classes without an explicit vectorizer setting, will use this vectorizer\",\"time\":\"2025-09-26T02:46:25Z\"}\n",
      "{\"action\":\"startup\",\"auto_schema_enabled\":{},\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"auto schema enabled setting is set to \\\"\\u0026{\\u003cnil\\u003e {{{} {0 0}} 0 0 {{} 0} {{} 0}} true}\\\"\",\"time\":\"2025-09-26T02:46:25Z\"}\n",
      "{\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"No resource limits set, weaviate will use all available memory and CPU. To limit resources, set LIMIT_RESOURCES=true\",\"time\":\"2025-09-26T02:46:25Z\"}\n",
      "{\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"module offload-s3 is enabled\",\"time\":\"2025-09-26T02:46:25Z\"}\n",
      "{\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"flag_key\":\"collection-retrieval-strategy\",\"level\":\"info\",\"msg\":\"feature flag instantiated\",\"time\":\"2025-09-26T02:46:25Z\",\"tool\":\"feature_flag\",\"value\":\"LeaderOnly\"}\n",
      "{\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"warning\",\"msg\":\"Multiple vector spaces are present, GraphQL Explore and REST API list objects endpoint module include params has been disabled as a result.\",\"time\":\"2025-09-26T02:46:25Z\"}\n",
      "{\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"open cluster service\",\"servers\":{\"Embedded_at_8079\":46377},\"time\":\"2025-09-26T02:46:25Z\"}\n",
      "{\"address\":\"172.29.118.178:46378\",\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"starting cloud rpc server ...\",\"time\":\"2025-09-26T02:46:25Z\"}\n",
      "{\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"starting raft sub-system ...\",\"time\":\"2025-09-26T02:46:25Z\"}\n",
      "{\"address\":\"172.29.118.178:46377\",\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"tcp transport\",\"tcpMaxPool\":3,\"tcpTimeout\":10000000000,\"time\":\"2025-09-26T02:46:25Z\"}\n",
      "{\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"loading local db\",\"time\":\"2025-09-26T02:46:25Z\"}\n",
      "{\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"local DB successfully loaded\",\"time\":\"2025-09-26T02:46:25Z\"}\n",
      "{\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"schema manager loaded\",\"n\":0,\"time\":\"2025-09-26T02:46:25Z\"}\n",
      "{\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"metadata_only_voters\":false,\"msg\":\"construct a new raft node\",\"name\":\"Embedded_at_8079\",\"time\":\"2025-09-26T02:46:25Z\"}\n",
      "{\"action\":\"raft\",\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"index\":0,\"level\":\"info\",\"msg\":\"initial configuration\",\"servers\":\"[[]]\",\"time\":\"2025-09-26T02:46:25Z\"}\n",
      "{\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"last_snapshot_index\":0,\"last_store_applied_index_on_start\":0,\"level\":\"info\",\"msg\":\"raft node constructed\",\"raft_applied_index\":0,\"raft_last_index\":0,\"time\":\"2025-09-26T02:46:25Z\"}\n",
      "{\"action\":\"raft\",\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"follower\":{},\"leader-address\":\"\",\"leader-id\":\"\",\"level\":\"info\",\"msg\":\"entering follower state\",\"time\":\"2025-09-26T02:46:25Z\"}\n",
      "{\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"hasState\":false,\"level\":\"info\",\"msg\":\"raft init\",\"time\":\"2025-09-26T02:46:25Z\"}\n",
      "{\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"attempting to join\",\"remoteNodes\":{\"Embedded_at_8079\":\"172.29.118.178:46377\"},\"time\":\"2025-09-26T02:46:26Z\"}\n",
      "{\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"attempted to join and failed\",\"remoteNode\":\"172.29.118.178:46377\",\"status\":8,\"time\":\"2025-09-26T02:46:26Z\"}\n",
      "{\"action\":\"bootstrap\",\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"error\":\"could not join a cluster from map[Embedded_at_8079:172.29.118.178:46377]\",\"level\":\"warning\",\"msg\":\"failed to join cluster\",\"servers\":{\"Embedded_at_8079\":\"172.29.118.178:46377\"},\"time\":\"2025-09-26T02:46:26Z\",\"voter\":true}\n",
      "{\"action\":\"bootstrap\",\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"candidates\":[{\"Suffrage\":0,\"ID\":\"Embedded_at_8079\",\"Address\":\"172.29.118.178:46377\"}],\"level\":\"info\",\"msg\":\"starting cluster bootstrapping\",\"time\":\"2025-09-26T02:46:26Z\"}\n",
      "{\"action\":\"bootstrap\",\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"notified peers this node is ready to join as voter\",\"servers\":{\"Embedded_at_8079\":\"172.29.118.178:46377\"},\"time\":\"2025-09-26T02:46:26Z\"}\n",
      "{\"action\":\"raft\",\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"last-leader-addr\":\"\",\"last-leader-id\":\"\",\"level\":\"warning\",\"msg\":\"heartbeat timeout reached, starting election\",\"time\":\"2025-09-26T02:46:26Z\"}\n",
      "{\"action\":\"raft\",\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"entering candidate state\",\"node\":{},\"term\":2,\"time\":\"2025-09-26T02:46:26Z\"}\n",
      "{\"action\":\"raft\",\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"pre-vote successful, starting election\",\"refused\":0,\"tally\":1,\"term\":2,\"time\":\"2025-09-26T02:46:26Z\",\"votesNeeded\":1}\n",
      "{\"action\":\"raft\",\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"election won\",\"tally\":1,\"term\":2,\"time\":\"2025-09-26T02:46:26Z\"}\n",
      "{\"action\":\"raft\",\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"leader\":{},\"level\":\"info\",\"msg\":\"entering leader state\",\"time\":\"2025-09-26T02:46:26Z\"}\n",
      "{\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"configured versions\",\"server_version\":\"1.30.5\",\"time\":\"2025-09-26T02:46:27Z\",\"version\":\"1.30.5\"}\n",
      "{\"action\":\"grpc_startup\",\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"grpc server listening at [::]:50050\",\"time\":\"2025-09-26T02:46:27Z\"}\n",
      "{\"address\":\"172.29.118.178:46377\",\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"current Leader\",\"time\":\"2025-09-26T02:46:27Z\"}\n",
      "{\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"starting migration from old schema\",\"time\":\"2025-09-26T02:46:27Z\"}\n",
      "{\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"legacy schema is empty, nothing to migrate\",\"time\":\"2025-09-26T02:46:27Z\"}\n",
      "{\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"migration from the old schema has been successfully completed\",\"time\":\"2025-09-26T02:46:27Z\"}\n",
      "{\"action\":\"restapi_management\",\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"Serving weaviate at http://127.0.0.1:8079\",\"time\":\"2025-09-26T02:46:27Z\",\"version\":\"1.30.5\"}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "is_ready? True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "{\"action\":\"bootstrap\",\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"node reporting ready, exiting bootstrap process\",\"time\":\"2025-09-26T02:46:27Z\"}\n",
      "{\"action\":\"telemetry_push\",\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"telemetry started\",\"payload\":\"\\u0026{MachineID:e26a9af1-c200-4367-a120-f6e435fd4dde Type:INIT Version:1.30.5 ObjectsCount:0 OS:linux Arch:amd64 UsedModules:[] CollectionsCount:0}\",\"time\":\"2025-09-26T02:46:28Z\"}\n"
     ]
    }
   ],
   "source": [
    "import weaviate.classes as wvc  # config + query helpers\n",
    "\n",
    "headers = {\n",
    "    \"X-OpenAI-Api-Key\": OPENAI_API_KEY                 # os.getenv(\"OPENAI_API_KEY\", \"\"),\n",
    "}\n",
    "\n",
    "# Optional: use a non-default base URL (proxy/Azure)\n",
    "if os.getenv(\"OPENAI_API_BASE\"):\n",
    "    headers[\"X-OpenAI-Baseurl\"] = OPENAI_API_BASE      # os.getenv(\"OPENAI_API_BASE\")\n",
    "\n",
    "# Start an embedded server (or replace with connect_to_local / connect_to_weaviate_cloud)\n",
    "client = weaviate.connect_to_embedded(\n",
    "    # pin the binary version if you want deterministic behavior; otherwise omit\n",
    "    # version=\"1.30.0\",\n",
    "    headers=headers,\n",
    "    # environment_variables={\"LOG_LEVEL\": \"error\"},\n",
    ")\n",
    "\n",
    "print(\"is_ready?\", client.is_ready())       # v4 client health check"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "42f88930-693d-4041-a93c-280f00d8a75d",
   "metadata": {
    "height": 30
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\n",
      "  \"grpcMaxMessageSize\": 104858000,\n",
      "  \"hostname\": \"http://127.0.0.1:8079\",\n",
      "  \"modules\": {\n",
      "    \"generative-openai\": {\n",
      "      \"documentationHref\": \"https://platform.openai.com/docs/api-reference/completions\",\n",
      "      \"name\": \"Generative Search - OpenAI\"\n",
      "    },\n",
      "    \"qna-openai\": {\n",
      "      \"documentationHref\": \"https://platform.openai.com/docs/api-reference/completions\",\n",
      "      \"name\": \"OpenAI Question & Answering Module\"\n",
      "    },\n",
      "    \"ref2vec-centroid\": {},\n",
      "    \"reranker-cohere\": {\n",
      "      \"documentationHref\": \"https://txt.cohere.com/rerank/\",\n",
      "      \"name\": \"Reranker - Cohere\"\n",
      "    },\n",
      "    \"text2vec-cohere\": {\n",
      "      \"documentationHref\": \"https://docs.cohere.ai/embedding-wiki/\",\n",
      "      \"name\": \"Cohere Module\"\n",
      "    },\n",
      "    \"text2vec-huggingface\": {\n",
      "      \"documentationHref\": \"https://huggingface.co/docs/api-inference/detailed_parameters#feature-extraction-task\",\n",
      "      \"name\": \"Hugging Face Module\"\n",
      "    },\n",
      "    \"text2vec-openai\": {\n",
      "      \"documentationHref\": \"https://platform.openai.com/docs/guides/embeddings/what-are-embeddings\",\n",
      "      \"name\": \"OpenAI Module\"\n",
      "    }\n",
      "  },\n",
      "  \"version\": \"1.30.5\"\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "json_print(client.get_meta())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7eb24c9-1f47-402f-ae21-58cad28c796f",
   "metadata": {},
   "source": [
    "## Step 3 - Create Question collection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "654b58e4-ad12-461c-951b-bf5ed372ee82",
   "metadata": {
    "height": 103
   },
   "outputs": [],
   "source": [
    "# --- (Re)create collection \"Question\" ----------------------------------------\n",
    "# Delete if exists (CAUTION: removes data)\n",
    "if client.collections.exists(\"Question\"):\n",
    "    client.collections.delete(\"Question\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f5b03fdf",
   "metadata": {
    "height": 470
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "{\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"warning\",\"msg\":\"prop len tracker file /home/jovyan/.local/share/weaviate/question/37mWipilqZbW/proplengths does not exist, creating new tracker\",\"time\":\"2025-09-26T02:47:13Z\"}\n",
      "{\"action\":\"hnsw_prefill_cache_async\",\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"not waiting for vector cache prefill, running in background\",\"time\":\"2025-09-26T02:47:13Z\",\"wait_for_cache_prefill\":false}\n",
      "{\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"Created shard question_37mWipilqZbW in 1.043723ms\",\"time\":\"2025-09-26T02:47:13Z\"}\n",
      "{\"action\":\"hnsw_vector_cache_prefill\",\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"count\":1000,\"index_id\":\"vectors_default\",\"level\":\"info\",\"limit\":1000000000000,\"msg\":\"prefilled vector cache\",\"time\":\"2025-09-26T02:47:13Z\",\"took\":49197}\n"
     ]
    }
   ],
   "source": [
    "from weaviate.classes.config import Property, DataType, Configure\n",
    "\n",
    "# Create a collection using text2vec-openai vectorizer\n",
    "# You can pick a model & dimensions (examples below); if none provided, Weaviate uses defaults.\n",
    "questions = client.collections.create(\n",
    "    name=\"Question\",\n",
    "    properties=[\n",
    "        Property(name=\"question\", data_type=DataType.TEXT),\n",
    "        Property(name=\"answer\",   data_type=DataType.TEXT),\n",
    "        Property(name=\"category\", data_type=DataType.TEXT),\n",
    "    ],\n",
    "    vector_config=Configure.Vectors.text2vec_openai(\n",
    "        # Examples of model config (uncomment one that matches your setup):\n",
    "\n",
    "        # Available models\n",
    "        # https://docs.weaviate.io/weaviate/model-providers/openai/embeddings#available-models\n",
    "        # model=\"text-embedding-3-small\", dimensions=512,    # v3-family, small (512/1536)\n",
    "        # model=\"text-embedding-3-large\", dimensions=1024,   # v3-family, large (256/1024/3072)\n",
    "\n",
    "        # TypeError: _Vectors.text2vec_openai() got an unexpected keyword argument 'type'\n",
    "        # https://docs.weaviate.io/weaviate/model-providers/openai/embeddings#for-older-model-families-eg-ada\n",
    "        model=\"ada\", model_version=\"002\", type_=\"text\",     # legacy ada example\n",
    "        # base_url=os.getenv(\"OPENAI_API_BASE\"),             # if you want to hard-set base here\n",
    "    ),\n",
    "    # generative_config=Configure.Generative.openai(),      # Optional: for RAG later\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b35a3a84-b944-4434-86eb-cbf0b7d6af12",
   "metadata": {},
   "source": [
    "## Step 4 - Load sample data and generate vector embeddings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "30c7d265-4380-4cb5-a494-bd759bbf7297",
   "metadata": {
    "height": 47
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\n",
      "  \"Category\": \"SCIENCE\",\n",
      "  \"Question\": \"This organ removes excess glucose from the blood & stores it as glycogen\",\n",
      "  \"Answer\": \"Liver\"\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "# reminder for the data structure\n",
    "json_print(data[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "95e3d133-5b40-4b46-8719-d2cc70fffd1b",
   "metadata": {
    "height": 268
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "importing question: 1\n",
      "importing question: 2\n",
      "importing question: 3\n",
      "importing question: 4\n",
      "importing question: 5\n",
      "importing question: 6\n",
      "importing question: 7\n",
      "importing question: 8\n",
      "importing question: 9\n",
      "importing question: 10\n"
     ]
    }
   ],
   "source": [
    "# --- Batch import -------------------------------------------------------------\n",
    "# Use the collection's batcher; v4 gRPC batching is much faster than v3 REST.\n",
    "with questions.batch.fixed_size(batch_size=5) as batch:\n",
    "    for i, d in enumerate(data):\n",
    "        print(f\"importing question: {i+1}\")\n",
    "        props = {\n",
    "            \"answer\":   d[\"Answer\"],\n",
    "            \"question\": d[\"Question\"],\n",
    "            \"category\": d[\"Category\"],\n",
    "        }\n",
    "        batch.add_object(properties=props)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "25dc32a2-1629-4149-97a9-1d13d49f132d",
   "metadata": {
    "height": 121
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total objects: 10\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# --- Aggregate count ----------------------------------------------------------\n",
    "agg = questions.aggregate.over_all(total_count=True)\n",
    "print(\"Total objects:\", agg.total_count)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e128da9-8b9c-4e93-8077-ea35c2f27d4e",
   "metadata": {},
   "source": [
    "## Let's Extract the vector that represents each question!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "8af97b0b-8e6b-4816-95ac-a31f9e2d80ab",
   "metadata": {
    "height": 197
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\n",
      "  \"question\": \"2000 news: the Gunnison sage grouse isn't just another northern sage grouse, but a new one of this classification\",\n",
      "  \"answer\": \"species\",\n",
      "  \"category\": \"SCIENCE\",\n",
      "  \"vector_len\": 1536\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "\n",
    "res = questions.query.fetch_objects(include_vector=True, limit=1)\n",
    "o = res.objects[0]\n",
    "json_print({\n",
    "    \"question\": o.properties.get(\"question\"),\n",
    "    \"answer\":   o.properties.get(\"answer\"),\n",
    "    \"category\": o.properties.get(\"category\"),\n",
    "    \"vector_len\": len(o.vector[\"default\"]) if \"default\" in o.vector else None\n",
    "})\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5153263-4464-4e45-8da8-fd47ec95fb4e",
   "metadata": {},
   "source": [
    "## Query time\n",
    "What is the distance between the `query`: `biology` and the returned objects?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "42e3d49a-5033-4742-8acf-6427980b9f54",
   "metadata": {
    "height": 268
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\n",
      "  {\n",
      "    \"question\": \"2000 news: the Gunnison sage grouse isn't just another northern sage grouse, but a new one of this classification\",\n",
      "    \"answer\": \"species\",\n",
      "    \"category\": \"SCIENCE\",\n",
      "    \"distance\": 0.198769211769104\n",
      "  },\n",
      "  {\n",
      "    \"question\": \"In 1953 Watson & Crick built a model of the molecular structure of this, the gene-carrying substance\",\n",
      "    \"answer\": \"DNA\",\n",
      "    \"category\": \"SCIENCE\",\n",
      "    \"distance\": 0.20344388484954834\n",
      "  }\n",
      "]\n"
     ]
    }
   ],
   "source": [
    "# --- Vector search: near_text (with distance in metadata) --------------------\n",
    "from weaviate.classes.query import MetadataQuery\n",
    "\n",
    "resp = questions.query.near_text(\n",
    "    query=\"biology\",\n",
    "    return_metadata=MetadataQuery(distance=True),\n",
    "    limit=2\n",
    ")\n",
    "json_print([{\n",
    "    \"question\": o.properties[\"question\"],\n",
    "    \"answer\": o.properties[\"answer\"],\n",
    "    \"category\": o.properties[\"category\"],\n",
    "    \"distance\": o.metadata.distance\n",
    "} for o in resp.objects])\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "691aec17-32f5-4df3-a066-5017be268a1f",
   "metadata": {
    "height": 212
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\n",
      "  {\n",
      "    \"question\": \"The gavial looks very much like a crocodile except for this bodily feature\",\n",
      "    \"answer\": \"the nose or snout\",\n",
      "    \"distance\": 0.18551617860794067\n",
      "  },\n",
      "  {\n",
      "    \"question\": \"It's the only living mammal in the order Proboseidea\",\n",
      "    \"answer\": \"Elephant\",\n",
      "    \"distance\": 0.18998634815216064\n",
      "  },\n",
      "  {\n",
      "    \"question\": \"Weighing around a ton, the eland is the largest species of this animal in Africa\",\n",
      "    \"answer\": \"Antelope\",\n",
      "    \"distance\": 0.19844287633895874\n",
      "  },\n",
      "  {\n",
      "    \"question\": \"2000 news: the Gunnison sage grouse isn't just another northern sage grouse, but a new one of this classification\",\n",
      "    \"answer\": \"species\",\n",
      "    \"distance\": 0.2177758812904358\n",
      "  },\n",
      "  {\n",
      "    \"question\": \"Heaviest of all poisonous snakes is this North American rattlesnake\",\n",
      "    \"answer\": \"the diamondback rattler\",\n",
      "    \"distance\": 0.22018253803253174\n",
      "  },\n",
      "  {\n",
      "    \"question\": \"A metal that is ductile can be pulled into this while cold & under pressure\",\n",
      "    \"answer\": \"wire\",\n",
      "    \"distance\": 0.2473326325416565\n",
      "  },\n",
      "  {\n",
      "    \"question\": \"In 1953 Watson & Crick built a model of the molecular structure of this, the gene-carrying substance\",\n",
      "    \"answer\": \"DNA\",\n",
      "    \"distance\": 0.2546703815460205\n",
      "  },\n",
      "  {\n",
      "    \"question\": \"This organ removes excess glucose from the blood & stores it as glycogen\",\n",
      "    \"answer\": \"Liver\",\n",
      "    \"distance\": 0.25784969329833984\n",
      "  },\n",
      "  {\n",
      "    \"question\": \"Changes in the tropospheric layer of this are what gives us weather\",\n",
      "    \"answer\": \"the atmosphere\",\n",
      "    \"distance\": 0.2601332664489746\n",
      "  },\n",
      "  {\n",
      "    \"question\": \"In 70-degree air, a plane traveling at about 1,130 feet per second breaks it\",\n",
      "    \"answer\": \"Sound barrier\",\n",
      "    \"distance\": 0.2670544385910034\n",
      "  }\n",
      "]\n"
     ]
    }
   ],
   "source": [
    "resp = questions.query.near_text(\n",
    "    query=\"animals\",\n",
    "    return_metadata=MetadataQuery(distance=True),\n",
    "    limit=10\n",
    ")\n",
    "json_print([{\n",
    "    \"question\": o.properties[\"question\"],\n",
    "    \"answer\":   o.properties[\"answer\"],\n",
    "    \"distance\": o.metadata.distance\n",
    "} for o in resp.objects])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "806d0b48-e03a-42ff-b3c7-ff640bb4bccb",
   "metadata": {},
   "source": [
    "## We can let the vector database know to remove results after a threshold distance!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "afe873c5-0ca3-470b-a40d-9a44361fddfb",
   "metadata": {
    "height": 281
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\n",
      "  {\n",
      "    \"question\": \"The gavial looks very much like a crocodile except for this bodily feature\",\n",
      "    \"answer\": \"the nose or snout\",\n",
      "    \"distance\": 0.18551617860794067\n",
      "  },\n",
      "  {\n",
      "    \"question\": \"It's the only living mammal in the order Proboseidea\",\n",
      "    \"answer\": \"Elephant\",\n",
      "    \"distance\": 0.18998634815216064\n",
      "  },\n",
      "  {\n",
      "    \"question\": \"Weighing around a ton, the eland is the largest species of this animal in Africa\",\n",
      "    \"answer\": \"Antelope\",\n",
      "    \"distance\": 0.19844287633895874\n",
      "  },\n",
      "  {\n",
      "    \"question\": \"2000 news: the Gunnison sage grouse isn't just another northern sage grouse, but a new one of this classification\",\n",
      "    \"answer\": \"species\",\n",
      "    \"distance\": 0.2177758812904358\n",
      "  },\n",
      "  {\n",
      "    \"question\": \"Heaviest of all poisonous snakes is this North American rattlesnake\",\n",
      "    \"answer\": \"the diamondback rattler\",\n",
      "    \"distance\": 0.22018253803253174\n",
      "  }\n",
      "]\n"
     ]
    }
   ],
   "source": [
    "# Optional: filter results by a max distance threshold (depends on distance metric; cosine is default)\n",
    "resp = questions.query.near_text(\n",
    "    query=\"animals\",\n",
    "    distance=0.24,  # keep only results within this distance\n",
    "    return_metadata=MetadataQuery(distance=True),\n",
    "    limit=10\n",
    ")\n",
    "json_print([{\n",
    "    \"question\": o.properties[\"question\"],\n",
    "    \"answer\":   o.properties[\"answer\"],\n",
    "    \"distance\": o.metadata.distance\n",
    "} for o in resp.objects])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9875f5a5-f5f1-4642-bd02-28d5a66a90c0",
   "metadata": {},
   "source": [
    "## Vector Databases support for CRUD operations"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a0e4b598-1cb7-4a3b-a230-5c953a43ead1",
   "metadata": {},
   "source": [
    "### Create"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "7e068287-69df-4792-98de-1d4a273381b7",
   "metadata": {
    "height": 238
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "New UUID: 1b9ced9f-582a-4fe4-b84a-7aa2ecfd26d8\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# --- Create one object (CRUD) -------------------------------------------------\n",
    "new_id = questions.data.insert(\n",
    "    properties={\n",
    "        \"question\": \"Leonardo da Vinci was born in this country.\",\n",
    "        \"answer\":   \"Italy\",\n",
    "        \"category\": \"Culture\"\n",
    "    }\n",
    ")\n",
    "print(\"New UUID:\", new_id)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e98cd37f-4e4c-46fb-b0cd-ec0813de30d3",
   "metadata": {},
   "source": [
    "### Read"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "4fbc4b12-91d0-40d8-86ba-12cfc24a55a6",
   "metadata": {
    "height": 75
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\n",
      "  \"answer\": \"Italy\",\n",
      "  \"question\": \"Leonardo da Vinci was born in this country.\",\n",
      "  \"category\": \"Culture\"\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "# Read it back (w/o vector)\n",
    "obj = questions.query.fetch_object_by_id(new_id)\n",
    "json_print(obj.properties)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "91a962a6-0406-4750-9fb4-c7520936c864",
   "metadata": {
    "height": 132
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\n",
      "  \"properties\": {\n",
      "    \"answer\": \"Italy\",\n",
      "    \"question\": \"Leonardo da Vinci was born in this country.\",\n",
      "    \"category\": \"Culture\"\n",
      "  },\n",
      "  \"vector_len\": 1536\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "# Read with vector\n",
    "obj = questions.query.fetch_object_by_id(new_id, include_vector=True)\n",
    "json_print({\n",
    "    \"properties\": obj.properties,\n",
    "    \"vector_len\": len(obj.vector[\"default\"]) if \"default\" in obj.vector else None\n",
    "})\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba0b2cf0-5cc8-4a24-8685-6791f1bdf2c3",
   "metadata": {},
   "source": [
    "### Update"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "a9daf260-e0e0-489f-83af-05b762e01171",
   "metadata": {
    "height": 158
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\n",
      "  \"answer\": \"Florence, Italy\",\n",
      "  \"question\": \"Leonardo da Vinci was born in this country.\",\n",
      "  \"category\": \"Culture\"\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "# Update (partial)\n",
    "questions.data.update(\n",
    "    uuid=new_id,\n",
    "    properties={\"answer\": \"Florence, Italy\"}\n",
    ")\n",
    "obj = questions.query.fetch_object_by_id(new_id)\n",
    "json_print(obj.properties)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c317c5a-6fc9-47f3-b8c3-d2aff2ab6cb5",
   "metadata": {},
   "source": [
    "### Delete"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "676f1722-9690-43a0-b256-c59d678570ad",
   "metadata": {
    "height": 97
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Count before delete: 11\n",
      "Count after delete: 10\n"
     ]
    }
   ],
   "source": [
    "# Count before/after delete\n",
    "print(\"Count before delete:\", questions.aggregate.over_all(total_count=True).total_count)\n",
    "questions.data.delete_by_id(new_id)\n",
    "print(\"Count after delete:\", questions.aggregate.over_all(total_count=True).total_count)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "af0d7d1e-3299-4db6-b936-126f98b79ddf",
   "metadata": {
    "height": 73
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "{\"action\":\"restapi_management\",\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"Shutting down... \",\"time\":\"2025-09-26T02:51:45Z\",\"version\":\"1.30.5\"}\n",
      "{\"action\":\"restapi_management\",\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"Stopped serving weaviate at http://127.0.0.1:8079\",\"time\":\"2025-09-26T02:51:45Z\",\"version\":\"1.30.5\"}\n",
      "{\"action\":\"telemetry_push\",\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"telemetry terminated\",\"payload\":\"\\u0026{MachineID:e26a9af1-c200-4367-a120-f6e435fd4dde Type:TERMINATE Version:1.30.5 ObjectsCount:11 OS:linux Arch:amd64 UsedModules:[text2vec-openai] CollectionsCount:1}\",\"time\":\"2025-09-26T02:51:46Z\"}\n",
      "{\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"closing raft FSM store ...\",\"time\":\"2025-09-26T02:51:47Z\"}\n",
      "{\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"shutting down raft sub-system ...\",\"time\":\"2025-09-26T02:51:47Z\"}\n",
      "{\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"transferring leadership to another server\",\"time\":\"2025-09-26T02:51:47Z\"}\n",
      "{\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"error\":\"cannot find peer\",\"level\":\"error\",\"msg\":\"transferring leadership\",\"time\":\"2025-09-26T02:51:47Z\"}\n",
      "{\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"closing raft-net ...\",\"time\":\"2025-09-26T02:51:47Z\"}\n",
      "{\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"closing log store ...\",\"time\":\"2025-09-26T02:51:47Z\"}\n",
      "{\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"closing data store ...\",\"time\":\"2025-09-26T02:51:47Z\"}\n",
      "{\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"closing loaded database ...\",\"time\":\"2025-09-26T02:51:47Z\"}\n",
      "{\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"closing raft-rpc client ...\",\"time\":\"2025-09-26T02:51:47Z\"}\n",
      "{\"build_git_commit\":\"\",\"build_go_version\":\"go1.24.3\",\"build_image_tag\":\"\",\"build_wv_version\":\"1.30.5\",\"level\":\"info\",\"msg\":\"closing raft-rpc server ...\",\"time\":\"2025-09-26T02:51:47Z\"}\n"
     ]
    }
   ],
   "source": [
    "# --- Close client -------------------------------------------------------------\n",
    "client.close()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.19"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
