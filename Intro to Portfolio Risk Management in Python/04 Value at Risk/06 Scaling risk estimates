Scaling risk estimates
The VaR(95) number calculated in previous exercises is simply the value at risk for a single day. To estimate the VaR for a longer time horizon, scale the value by the square root of time, similar to scaling volatility:

VaR(95) t days = VaR(95) 1 day ∗ √t

StockReturns_perc and var_95 from the previous exercise is available in your workspace. 
Use this data to estimate the VaR for the USO oil ETF for 1 to 100 days from now. 
We've also defined a function plot_var_scale() that plots the VaR for 1 to 100 days from now.




In [1]:     help(plot_var_scale)
Help on function plot_var_scale in module __main__:

plot_var_scale()
    # Function to plot the results


In [3]: forecasted_values
Out[3]: 
array([[ 6.90375100e-310,  6.90375100e-310],
       [ 6.08833538e-317,  6.08833538e-317],
       [ 0.00000000e+000,  0.00000000e+000],
       [             nan,  0.00000000e+000],
       [ 2.31423707e-306,  0.00000000e+000],
       [ 4.44659081e-323,  6.90371797e-310],
       [ 9.50300883e-317,  0.00000000e+000],
       [ 0.00000000e+000,              nan],
       [ 6.90371783e-310,  3.38216116e-306],
       [ 3.55727265e-322,  3.45845952e-323],
       [ 6.90371797e-310,  9.50310566e-317],
       [ 0.00000000e+000,  4.94065646e-324],
       [ 4.94065646e-324,  6.90371783e-310],
       [ 6.45271079e-307,  7.11454530e-322],
       [ 1.48219694e-323,  6.90371797e-310],
       [ 9.50310764e-317,  0.00000000e+000],
       [ 4.94065646e-324,  4.94065646e-324],
       [ 0.00000000e+000,  0.00000000e+000],
       [ 1.06718180e-321,  4.44659081e-323],
       [ 6.90371797e-310,  9.50313136e-317],
       [ 0.00000000e+000,  1.97626258e-323],
       [ 4.94065646e-324,  4.94065646e-323],
       [ 0.00000000e+000,  1.42290906e-321],
       [ 4.44659081e-323,  6.90371797e-310],
       [ 9.50314519e-317,  8.39911598e-323],
       [ 1.97626258e-323,  4.94065646e-324],
       [ 0.00000000e+000,  0.00000000e+000],
       [ 1.77863633e-321,  4.44659081e-323],
       [ 6.90371797e-310,  9.50318076e-317],
       [ 0.00000000e+000,  2.96439388e-323],
       [ 1.48219694e-323,  0.00000000e+000],
       [ 6.90370111e-310,  2.13436359e-321],
       [ 5.43472210e-323,  6.90371797e-310],
       [ 9.50318472e-317,  1.03753786e-322],
       [ 2.96439388e-323,  1.48219694e-323],
       [ 0.00000000e+000,  6.90370111e-310],
       [ 2.49009086e-321,  4.94065646e-323],
       [ 6.90371797e-310,  9.50322029e-317],
       [ 0.00000000e+000,  1.42290906e-321],
       [ 9.88131292e-324,  6.90371797e-310],
       [ 0.00000000e+000, -1.56167765e+271],
       [ 1.48219694e-322,              nan],
       [ 6.90371783e-310,  6.90370111e-310],
       [ 6.90371797e-310,  0.00000000e+000],
       [ 0.00000000e+000,  0.00000000e+000],
       [ 0.00000000e+000,  0.00000000e+000],
       [ 0.00000000e+000,  0.00000000e+000],
       [ 0.00000000e+000,  0.00000000e+000],
       [ 0.00000000e+000,  0.00000000e+000],
       [ 0.00000000e+000,  0.00000000e+000],
       [ 0.00000000e+000,  0.00000000e+000],
       [ 0.00000000e+000,  0.00000000e+000],
       [ 0.00000000e+000,  0.00000000e+000],
       [ 0.00000000e+000,  0.00000000e+000],
       [ 0.00000000e+000,  0.00000000e+000],
       [ 0.00000000e+000,  0.00000000e+000],
       [ 0.00000000e+000,  0.00000000e+000],
       [ 0.00000000e+000,  0.00000000e+000],
       [ 6.90371797e-310,  1.35369797e+143],
       [ 6.90375103e-310,  6.90375103e-310],
       [ 3.36748303e+002,  6.90375103e-310],
       [ 6.90375103e-310, -3.29322924e-115],
       [ 6.90375103e-310,  6.90375103e-310],
       [ 3.71209353e-290,  6.90375103e-310],
       [ 6.90375103e-310, -1.88183202e+104],
       [ 6.90375102e-310,  6.90375103e-310],
       [-1.83077340e+043,  6.90375103e-310],
       [ 6.90375103e-310,  5.16348058e-202],
       [ 6.90375103e-310,  6.90375103e-310],
       [ 1.08068199e-178,  6.90375103e-310],
       [ 6.90375103e-310,  1.73170009e-320],
       [ 6.90375100e-310,  6.90375100e-310],
       [ 0.00000000e+000,  0.00000000e+000],
       [ 6.90375103e-310, -5.68703470e-177],
       [ 6.90375103e-310,  6.90375103e-310],
       [ 2.42857270e+158,  6.90375103e-310],
       [ 6.90375103e-310, -4.88325079e+001],
       [ 6.90375102e-310,  6.90375103e-310],
       [-8.25471100e-184,  6.90375102e-310],
       [ 6.90375103e-310, -2.74703601e-152],
       [ 6.90375103e-310,  6.90375103e-310],
       [-8.53620880e-252,  6.90375103e-310],
       [ 6.90375103e-310, -8.20723763e-156],
       [ 6.90375103e-310,  6.90375103e-310],
       [ 1.37115633e-269,  6.90375103e-310],
       [ 6.90375103e-310, -5.13792970e+051],
       [ 6.90375103e-310,  6.90375103e-310],
       [ 2.08880380e-104,  6.90375103e-310],
       [ 6.90375103e-310,  3.72404871e-267],
       [ 6.90375103e-310,  6.90375103e-310],
       [-2.76154684e+167,  6.90375103e-310],
       [ 6.90375103e-310, -1.90011472e-225],
       [ 6.90375103e-310,  6.90375103e-310],
       [ 4.17923682e-175,  6.90375103e-310],
       [ 6.90375103e-310, -5.58609650e-121],
       [ 6.90375103e-310,  6.90375103e-310],
       [ 2.05911017e-244,  6.90375103e-310],
       [ 6.90375103e-310, -5.40736711e-251],
       [ 6.90375103e-310,  6.90375103e-310],
       [ 2.99468953e-195,  6.90375103e-310]])


In [4]: forecasted_values.shape
Out[4]: (100, 2)







# Aggregate forecasted VaR
forecasted_values = np.empty([100, 2])



#Loop from 0 to 100 (not including 100) using the range() function.
# Loop through each forecast period
for i in range(100):
    
    # Save the time horizon i
    forecasted_values[i, 0] = i
    
    
    #Set the second column of forecasted_values at each index equal to the forecasted VaR, multiplying var_95 by the square root of i + 1 using the np.sqrt() function.
    # Save the forecasted VaR 95
    forecasted_values[i, 1] = var_95*np.sqrt(i+1)
    
# Plot the results
plot_var_scale()



Notice how the plot resembles a square root?



