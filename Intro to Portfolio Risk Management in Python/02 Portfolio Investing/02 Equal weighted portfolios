Equal weighted portfolios
When comparing different portfolios, you often want to consider performance versus a naive equally-weighted portfolio. If the portfolio doesn't outperform a simple equally weighted portfolio, you might want to consider another strategy, or simply opt for the naive approach if all else fails. You can expect equally-weighted portfolios to tend to outperform the market when the largest companies are doing poorly. This is because even tiny companies would have the same weight in your equally-weighted portfolio as Apple or Amazon, for example.

To make it easier for you to visualize the cumulative returns of portfolios, we defined the function cumulative_returns_plot() in your workspace.

In [6]: portfolio_weights_ew
Out[6]: 
array([0.11111111, 0.11111111, 0.11111111, 0.11111111, 0.11111111,
       0.11111111, 0.11111111, 0.11111111, 0.11111111])
       
In [2]: portfolio_weights_ew.shape
Out[2]: (9,)


In [7]: StockReturns.iloc[:, :9]
Out[7]: 
                AAPL      MSFT       XOM       JNJ       JPM      AMZN  \
Date                                                                     
2017-01-03  0.002849  0.007081  0.006980  0.005468  0.010894  0.005068   
2017-01-04 -0.001119 -0.004474 -0.011002 -0.001640  0.001844  0.004657   
2017-01-05  0.005085  0.000000 -0.014907  0.010463 -0.009205  0.030732   
2017-01-06  0.011148  0.008668 -0.000565 -0.004792  0.000116  0.019912   
2017-01-09  0.009159 -0.003183 -0.016497 -0.000172  0.000697  0.001168   
2017-01-10  0.001008 -0.000319 -0.012753 -0.001032  0.002901 -0.001280   
2017-01-11  0.005373  0.009103  0.010241 -0.012311  0.007521  0.003920   
2017-01-12 -0.004175 -0.009179 -0.005414 -0.000959 -0.009646  0.018297   
2017-01-13 -0.001761  0.001437  0.000116 -0.000174  0.005334  0.004302   
2017-01-17  0.008065 -0.002711  0.011697  0.002356 -0.036332 -0.009081   
2017-01-18 -0.000083 -0.000480 -0.012363 -0.001480  0.004668 -0.002766   
2017-01-19 -0.001750 -0.003200 -0.017965 -0.004359 -0.007625  0.001932   
2017-01-20  0.001837  0.007063  0.013690 -0.000438  0.004442 -0.000878   
2017-01-23  0.000667  0.003507 -0.010711 -0.002102  0.000478  0.011814   
2017-01-24 -0.000916  0.008895  0.001412 -0.018875  0.012066  0.005575   
2017-01-25  0.015921  0.002519  0.002938  0.009306  0.015463  0.017120   
2017-01-26  0.000492  0.009265  0.003047 -0.008511  0.008369  0.003144   
2017-01-27  0.000082  0.023495 -0.001051  0.013770  0.002075 -0.004028   
2017-01-30 -0.002624 -0.009882 -0.007601 -0.002205 -0.010353 -0.006449   
2017-01-31 -0.002302 -0.007370 -0.011431  0.001061 -0.016273 -0.008309   
2017-02-01  0.060981 -0.016551 -0.011324 -0.000177  0.003781  0.010771   
2017-02-02 -0.001709 -0.006449  0.006149  0.003003 -0.004238  0.009131   
2017-02-03  0.004279  0.008073  0.001078  0.000616  0.030618 -0.035419   
2017-02-06  0.009374 -0.000628 -0.002753 -0.002112 -0.004703 -0.003160   
2017-02-07  0.009517 -0.003300 -0.006482  0.000706 -0.000576  0.006018   
2017-02-08  0.003878 -0.001419 -0.006584 -0.000705 -0.008764  0.008874   
2017-02-09  0.007226  0.011367  0.004418  0.005997  0.014425  0.002013   
2017-02-10 -0.002265 -0.000937  0.008309  0.010168 -0.002294  0.007427   
2017-02-13  0.008855  0.011250  0.005817  0.005554  0.013218  0.010961   
2017-02-14  0.012979  0.003731 -0.002169  0.004142  0.015995 -0.000167   
...              ...       ...       ...       ...       ...       ...   
2017-11-16  0.011947  0.002651 -0.008004 -0.001654  0.002852  0.009408   
2017-11-17 -0.005552 -0.009615 -0.003972 -0.006265 -0.003351 -0.006516   
2017-11-20 -0.000999  0.001578  0.003863 -0.000507  0.008865 -0.003160   
2017-11-21  0.018590  0.014419  0.003973  0.002972 -0.000808  0.011702   
2017-11-22  0.010512 -0.007286  0.002844 -0.007590 -0.002931  0.014629   
2017-11-24  0.000057  0.001805  0.003946  0.005244 -0.003244  0.025810   
2017-11-27 -0.005029  0.007326 -0.003807  0.006780 -0.003967  0.008288   
2017-11-28 -0.005859  0.012042  0.006904  0.013903  0.035025 -0.001865   
2017-11-29 -0.020743 -0.018143  0.007347 -0.001500  0.023382 -0.027086   
2017-11-30  0.013984  0.009959  0.012398 -0.003433  0.007616  0.013330   
2017-12-01 -0.004655  0.001069  0.002041  0.004665  0.002583 -0.012237   
2017-12-04 -0.007308 -0.037740  0.001318 -0.006930  0.020613 -0.024433   
2017-12-05 -0.000942  0.006290 -0.008137  0.004748 -0.011501  0.006720   
2017-12-06 -0.003714  0.014585 -0.007359  0.009952 -0.007473  0.009443   
2017-12-07  0.001834 -0.003503  0.003281 -0.007444 -0.002954  0.006456   
2017-12-08  0.000295  0.020245  0.001333  0.004143  0.012521  0.001905   
2017-12-11  0.019484  0.012714  0.004476  0.003912 -0.002926  0.005955   
2017-12-12 -0.005618  0.004106 -0.003252  0.010344  0.011645 -0.003285   
2017-12-13  0.003320 -0.002688  0.004350  0.002034 -0.012541 -0.000815   
2017-12-14 -0.000290 -0.007733 -0.002647 -0.008678 -0.008056  0.008702   
2017-12-15  0.010161  0.025505  0.001568  0.005718  0.014141  0.004156   
2017-12-18  0.014083 -0.005412 -0.001084 -0.004633  0.007726  0.009702   
2017-12-19 -0.010656 -0.006367 -0.006028 -0.000141 -0.004207 -0.002688   
2017-12-20 -0.001089 -0.003612  0.005216 -0.004373 -0.003474 -0.008220   
2017-12-21  0.003785 -0.000234  0.011826 -0.000708  0.015922 -0.002429   
2017-12-22  0.000000  0.000117  0.001431 -0.006664 -0.003524 -0.005448   
2017-12-26 -0.025370 -0.001286  0.000119 -0.000214 -0.004002  0.007190   
2017-12-27  0.000176  0.003630 -0.000953  0.003426  0.001869  0.004674   
2017-12-28  0.002814  0.000117  0.001430 -0.000071  0.005316  0.003248   
2017-12-29 -0.010814 -0.002100 -0.004523 -0.005976 -0.007886 -0.014021   

                  GE        FB         T  
Date                                      
2017-01-03  0.002848  0.015732  0.011521  
2017-01-04  0.000316  0.015660 -0.005811  
2017-01-05 -0.005678  0.016682 -0.002806  
2017-01-06  0.002855  0.022707 -0.019924  
2017-01-09 -0.004745  0.012074 -0.012585  
2017-01-10 -0.002861 -0.004404  0.000245  
2017-01-11  0.003188  0.013993 -0.004901  
2017-01-12 -0.002542  0.004203  0.009850  
2017-01-13 -0.000956  0.013584 -0.001219  
2017-01-17 -0.002870 -0.003662  0.003662  
2017-01-18 -0.001279  0.000391 -0.007541  
2017-01-19 -0.000640 -0.002892  0.004902  
2017-01-20 -0.021788 -0.003998  0.010976  
2017-01-23 -0.025549  0.014877  0.013269  
2017-01-24  0.008403  0.003413 -0.015238  
2017-01-25  0.012333  0.016310  0.000725  
2017-01-26 -0.001646  0.009887  0.009181  
2017-01-27 -0.010224 -0.004519  0.005746  
2017-01-30 -0.001666 -0.009079 -0.004523  
2017-01-31 -0.008678 -0.005039  0.008130  
2017-02-01 -0.000337  0.022330 -0.002372  
2017-02-02 -0.000337 -0.017939 -0.020923  
2017-02-03  0.000674  0.001070  0.001700  
2017-02-06 -0.001347  0.008246 -0.004606  
2017-02-07 -0.003372 -0.001666  0.001461  
2017-02-08 -0.004398  0.017900  0.002189  
2017-02-09  0.005437 -0.000447  0.002427  
2017-02-10  0.004393  0.000373  0.001695  
2017-02-13  0.010767 -0.001043 -0.017641  
2017-02-14  0.007989 -0.001492  0.002460  
...              ...       ...       ...  
2017-11-16 -0.000548  0.009216  0.021000  
2017-11-17 -0.002192 -0.003285 -0.000290  
2017-11-20 -0.012630 -0.001452  0.003767  
2017-11-21 -0.008343  0.017455 -0.008949  
2017-11-22  0.017947 -0.005444  0.015730  
2017-11-24  0.002204  0.010560 -0.001721  
2017-11-27 -0.003848  0.001368 -0.003735  
2017-11-28  0.016004 -0.003333  0.021338  
2017-11-29  0.003802 -0.039963  0.029927  
2017-11-30 -0.010281  0.011706 -0.002741  
2017-12-01 -0.022417 -0.011739  0.003299  
2017-12-04  0.003915 -0.020731  0.021096  
2017-12-05 -0.010585  0.007931 -0.019319  
2017-12-06 -0.005631  0.018689 -0.012038  
2017-12-07  0.002831  0.023174  0.001662  
2017-12-08  0.000000 -0.006328  0.015482  
2017-12-11 -0.003388  0.000223  0.004628  
2017-12-12  0.014731 -0.011617  0.032520  
2017-12-13 -0.008375  0.007572 -0.001575  
2017-12-14 -0.006757  0.000505 -0.007886  
2017-12-15  0.010204  0.010034  0.013248  
2017-12-18 -0.003367  0.003552  0.005753  
2017-12-19 -0.009572 -0.007245 -0.010660  
2017-12-20 -0.007959 -0.009025  0.013141  
2017-12-21  0.001146 -0.002473  0.008560  
2017-12-22  0.001717 -0.001409  0.001543  
2017-12-26  0.002877 -0.006828  0.003082  
2017-12-27 -0.002869  0.009262 -0.004352  
2017-12-28 -0.001151  0.001689  0.007457  
2017-12-29  0.005184 -0.008206 -0.007657  

[251 rows x 9 columns]











In [8]: StockReturns['Portfolio_EW']
Out[8]: 
Date
2017-01-03    0.007605
2017-01-04   -0.000174
2017-01-05    0.003374
2017-01-06    0.004458
2017-01-09   -0.001565
2017-01-10   -0.002055
2017-01-11    0.004014
2017-01-12    0.000048
2017-01-13    0.002296
2017-01-17   -0.003209
2017-01-18   -0.002326
2017-01-19   -0.003511
2017-01-20    0.001212
2017-01-23    0.000694
2017-01-24    0.000526
2017-01-25    0.010293
2017-01-26    0.003692
2017-01-27    0.002816
2017-01-30   -0.006042
2017-01-31   -0.005579
2017-02-01    0.007456
2017-02-02   -0.003701
2017-02-03    0.001410
2017-02-06   -0.000188
2017-02-07    0.000256
2017-02-08    0.001219
2017-02-09    0.005874
2017-02-10    0.002985
2017-02-13    0.005304
2017-02-14    0.004830
                ...   
2017-11-16    0.005208
2017-11-17   -0.004560
2017-11-20   -0.000075
2017-11-21    0.005668
2017-11-22    0.004268
2017-11-24    0.004962
2017-11-27    0.000375
2017-11-28    0.010462
2017-11-29   -0.004775
2017-11-30    0.005837
2017-12-01   -0.004155
2017-12-04   -0.005578
2017-12-05   -0.002755
2017-12-06    0.001828
2017-12-07    0.002815
2017-12-08    0.005511
2017-12-11    0.005009
2017-12-12    0.005508
2017-12-13   -0.000969
2017-12-14   -0.003649
2017-12-15    0.010526
2017-12-18    0.002924
2017-12-19   -0.006396
2017-12-20   -0.002155
2017-12-21    0.003933
2017-12-22   -0.001360
2017-12-26   -0.002715
2017-12-27    0.001651
2017-12-28    0.002317
2017-12-29   -0.006222
Name: Portfolio_EW, Length: 251, dtype: float64























#Set numstocks equal to 9, which is the number of stocks in your portfolio.
# How many stocks are in your portfolio?
numstocks = 9


#Use np.repeat() to set portfolio_weights_ew equal to an array with an equal weights for each of the 9 stocks.
# Create an array of equal weights across all assets
#https://docs.scipy.org/doc/numpy/reference/generated/numpy.repeat.html
portfolio_weights_ew = np.repeat(1/numstocks, numstocks)
portfolio_weights_ew.shape


#Use the .iloc accessor to select all rows and the first 9 columns when calculating the portfolio return.
# Calculate the equally-weighted portfolio returns
#rtns multiply by weights, then sum across every col per date row - in 1 step
StockReturns['Portfolio_EW'] = StockReturns.iloc[:, :9].mul(portfolio_weights_ew, axis=1).sum(axis=1)


#Finally, review the plot of cumulative returns over time.
cumulative_returns_plot(['Portfolio', 'Portfolio_EW'])



If you are curious to know what cumulative_returns_plot() looks like, type help(cumulative_returns_plot) in the IPython shell.
In [3]: help(cumulative_returns_plot)
Help on function cumulative_returns_plot in module __main__:

cumulative_returns_plot(cols)
    cols: A list of column names to plot









StockReturns.iloc[:, :9].mul(portfolio_weights_ew, axis=1)
2017-01-03  0.000317  0.000787  0.000776  0.000608  0.001210  0.000563   
2017-01-03  0.000316  0.001748  0.001280  

StockReturns['Portfolio_EW']
2017-01-03    0.007605
