SMS spam pipeline
You haven't looked at the SMS data for quite a while. Last time we did the following:
split the text into tokens
removed stop words
applied the hashing trick
converted the data from counts to IDF and
trained a linear regression model.

Each of these steps was done independently. This seems like a great application for a pipeline!





Selected columns from first few rows of the sms DataFrame:

+---+---------------------------------+-----+
|id |text                             |label|
+---+---------------------------------+-----+
|1  |Sorry I'll call later in meeting |0    |
|2  |Dont worry I guess he's busy     |0    |
|3  |Call FREEPHONE now               |1    |
|4  |Win a cash prize or a prize worth|1    |
+---+---------------------------------+-----+
only showing top 4 rows





from pyspark.ml.feature import Tokenizer, StopWordsRemover, HashingTF, IDF

# Break text into tokens at non-word characters
tokenizer = Tokenizer(inputCol='text', outputCol='words')

# Remove stop words
remover = StopWordsRemover(inputCol=tokenizer.getOutputCol(), outputCol='terms')

# Apply the hashing trick and transform to TF-IDF
hasher = HashingTF(inputCol=remover.getOutputCol(), outputCol='hash')
idf = IDF(inputCol=hasher.getOutputCol(), outputCol='features')

# Create a logistic regression object and add everything to a pipeline
logistic = LogisticRegression()
pipeline = Pipeline(stages=[tokenizer, 
                            remover, 
                            hasher, 
                            idf, 
                            logistic])



