Removing a DataFrame from cache
You've finished the analysis tasks with the departures_df DataFrame, but have some other processing to do. You'd like to remove the DataFrame from the cache to prevent any excess memory usage on your cluster.
The DataFrame departures_df is defined and has already been cached for you.


Check the caching status on the departures_df DataFrame.
Remove the departures_df DataFrame from the cache.
Validate the caching status again.


# Determine if departures_df is in the cache
print("Is departures_df cached?: %s" % departures_df.is_cached)
print("Removing departures_df from cache")

# Remove departures_df from the cache
departures_df.unpersist()

# Check the cache status again
print("Is departures_df cached?: %s" % departures_df.is_cached)



<script.py> output:
    Is departures_df cached?: True
    Removing departures_df from cache
    Is departures_df cached?: False
    
    

Great job! You've removed the DataFrame from cache using .unpersist(). This is a fairly simple operation but can be very useful on long running or complex Spark jobs.


