Using user defined functions in Spark
You've seen some of the power behind Spark's built-in string functions when it comes to manipulating DataFrames. However, once you reach a certain point, it becomes difficult to process the data in a without creating a rat's nest of function calls. Here's one place where you can use User Defined Functions to manipulate our DataFrames.
For this exercise, we'll use our voter_df DataFrame, but you're going to replace the first_name column with the first and middle names.
The pyspark.sql.functions library is available under the alias F. The classes from pyspark.sql.types are already imported.


Edit the getFirstAndMiddle() function to return a space separated string of names, except the last entry in the names list.
Define the function as a user-defined function. It should return a string type.
Create a new column on voter_df called first_and_middle_name using your UDF.
Drop the "first_name" and "splits" columns (on separate lines), then show the Data Frame.



+----------+-------------+-------------------+--------------------+----------+---------+
|      DATE|        TITLE|         VOTER_NAME|              splits|first_name|last_name|
+----------+-------------+-------------------+--------------------+----------+---------+
|02/08/2017|Councilmember|  Jennifer S. Gates|[Jennifer, S., Ga...|  Jennifer|    Gates|
|02/08/2017|Councilmember| Philip T. Kingston|[Philip, T., King...|    Philip| Kingston|
|02/08/2017|        Mayor|Michael S. Rawlings|[Michael, S., Raw...|   Michael| Rawlings|
|02/08/2017|Councilmember|       Adam Medrano|     [Adam, Medrano]|      Adam|  Medrano|
|02/08/2017|Councilmember|       Casey Thomas|     [Casey, Thomas]|     Casey|   Thomas|
|02/08/2017|Councilmember|Carolyn King Arnold|[Carolyn, King, A...|   Carolyn|   Arnold|
|02/08/2017|Councilmember|       Scott Griggs|     [Scott, Griggs]|     Scott|   Griggs|
|02/08/2017|Councilmember|   B. Adam  McGough| [B., Adam, McGough]|        B.|  McGough|
|02/08/2017|Councilmember|       Lee Kleinman|     [Lee, Kleinman]|       Lee| Kleinman|
|02/08/2017|Councilmember|      Sandy Greyson|    [Sandy, Greyson]|     Sandy|  Greyson|
|02/08/2017|Councilmember|  Jennifer S. Gates|[Jennifer, S., Ga...|  Jennifer|    Gates|
|02/08/2017|Councilmember| Philip T. Kingston|[Philip, T., King...|    Philip| Kingston|
|02/08/2017|        Mayor|Michael S. Rawlings|[Michael, S., Raw...|   Michael| Rawlings|
|02/08/2017|Councilmember|       Adam Medrano|     [Adam, Medrano]|      Adam|  Medrano|
|02/08/2017|Councilmember|       Casey Thomas|     [Casey, Thomas]|     Casey|   Thomas|
|02/08/2017|Councilmember|Carolyn King Arnold|[Carolyn, King, A...|   Carolyn|   Arnold|
|02/08/2017|Councilmember| Rickey D. Callahan|[Rickey, D., Call...|    Rickey| Callahan|
|01/11/2017|Councilmember|  Jennifer S. Gates|[Jennifer, S., Ga...|  Jennifer|    Gates|
|04/25/2018|Councilmember|     Sandy  Greyson|    [Sandy, Greyson]|     Sandy|  Greyson|
|04/25/2018|Councilmember| Jennifer S.  Gates|[Jennifer, S., Ga...|  Jennifer|    Gates|
+----------+-------------+-------------------+--------------------+----------+---------+
only showing top 20 rows




def getFirstAndMiddle(names):
  # Return a space separated string of names
  #https://stackoverflow.com/questions/30688187/join-all-except-last-x-in-list
  return ' '.join(names[:-1])


# Define the method as a UDF
udfFirstAndMiddle = F.udf(getFirstAndMiddle, StringType())

# Create a new column using your UDF
voter_df = voter_df.withColumn('first_and_middle_name', udfFirstAndMiddle(voter_df.splits))

# Drop the unnecessary columns then show the DataFrame
voter_df = voter_df.drop(voter_df.first_name)
voter_df = voter_df.drop(voter_df.splits)
voter_df.show()


<script.py> output:
    +----------+-------------+-------------------+---------+---------------------+
    |      DATE|        TITLE|         VOTER_NAME|last_name|first_and_middle_name|
    +----------+-------------+-------------------+---------+---------------------+
    |02/08/2017|Councilmember|  Jennifer S. Gates|    Gates|          Jennifer S.|
    |02/08/2017|Councilmember| Philip T. Kingston| Kingston|            Philip T.|
    |02/08/2017|        Mayor|Michael S. Rawlings| Rawlings|           Michael S.|
    |02/08/2017|Councilmember|       Adam Medrano|  Medrano|                 Adam|
    |02/08/2017|Councilmember|       Casey Thomas|   Thomas|                Casey|
    |02/08/2017|Councilmember|Carolyn King Arnold|   Arnold|         Carolyn King|
    |02/08/2017|Councilmember|       Scott Griggs|   Griggs|                Scott|
    |02/08/2017|Councilmember|   B. Adam  McGough|  McGough|              B. Adam|
    |02/08/2017|Councilmember|       Lee Kleinman| Kleinman|                  Lee|
    |02/08/2017|Councilmember|      Sandy Greyson|  Greyson|                Sandy|
    |02/08/2017|Councilmember|  Jennifer S. Gates|    Gates|          Jennifer S.|
    |02/08/2017|Councilmember| Philip T. Kingston| Kingston|            Philip T.|
    |02/08/2017|        Mayor|Michael S. Rawlings| Rawlings|           Michael S.|
    |02/08/2017|Councilmember|       Adam Medrano|  Medrano|                 Adam|
    |02/08/2017|Councilmember|       Casey Thomas|   Thomas|                Casey|
    |02/08/2017|Councilmember|Carolyn King Arnold|   Arnold|         Carolyn King|
    |02/08/2017|Councilmember| Rickey D. Callahan| Callahan|            Rickey D.|
    |01/11/2017|Councilmember|  Jennifer S. Gates|    Gates|          Jennifer S.|
    |04/25/2018|Councilmember|     Sandy  Greyson|  Greyson|                Sandy|
    |04/25/2018|Councilmember| Jennifer S.  Gates|    Gates|          Jennifer S.|
    +----------+-------------+-------------------+---------+---------------------+
    only showing top 20 rows
    
    
Great - you've just used your first user defined function to manipulate a DataFrame! While this example is simple enough, you could use UDFs to perform more advanced calculations on your data based on your business logic needs.

   
