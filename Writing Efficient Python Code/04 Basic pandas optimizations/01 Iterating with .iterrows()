Iterating with .iterrows()
In the video, we discussed that .iterrows() returns each DataFrame row as a tuple of (index, pandas Series) pairs. But, what does this mean? Let's explore with a few coding exercises.
A pandas DataFrame has been loaded into your session called pit_df. This DataFrame contains the stats for the Major League Baseball team named the Pittsburgh Pirates (abbreviated as 'PIT') from the year 2008 to the year 2012. It has been printed into your console for convenience.

  Team League  Year   RS   RA   W    G  Playoffs
0  PIT     NL  2012  651  674  79  162         0
1  PIT     NL  2011  610  712  72  162         0
2  PIT     NL  2010  587  866  57  162         0
3  PIT     NL  2009  636  768  62  161         0
4  PIT     NL  2008  735  884  67  162         0





Use .iterrows() to loop over pit_df and print each row. Save the first item from .iterrows() as i and the second as row.
# Iterate over pit_df and print each row
for i,row in pit_df.iterrows():
    print(row)

<script.py> output:
    Team         PIT
    League        NL
    Year        2012
    RS           651
    RA           674
    W             79
    G            162
    Playoffs       0
    Name: 0, dtype: object
    
    Team         PIT
    League        NL
    Year        2011
    RS           610
    RA           712
    W             72
    G            162
    Playoffs       0
    Name: 1, dtype: object
    
    Team         PIT
    League        NL
    Year        2010
    RS           587
    RA           866
    W             57
    G            162
    Playoffs       0
    Name: 2, dtype: object
    
    Team         PIT
    League        NL
    Year        2009
    RS           636
    RA           768
    W             62
    G            161
    Playoffs       0
    Name: 3, dtype: object
    
    Team         PIT
    League        NL
    Year        2008
    RS           735
    RA           884
    W             67
    G            162
    Playoffs       0
    Name: 4, dtype: object






Add two lines to the loop: one before print(row) to print each index variable and one after to print each row's type.
# Iterate over pit_df and print each index variable and then each row
for i,row in pit_df.iterrows():
    print(i)
    print(row)
    print(type(row))
    
<script.py> output:
    0
    Team         PIT
    League        NL
    Year        2012
    RS           651
    RA           674
    W             79
    G            162
    Playoffs       0
    Name: 0, dtype: object
    <class 'pandas.core.series.Series'>
    1
    Team         PIT
    League        NL
    Year        2011
    RS           610
    RA           712
    W             72
    G            162
    Playoffs       0
    Name: 1, dtype: object
    <class 'pandas.core.series.Series'>
    2
    Team         PIT
    League        NL
    Year        2010
    RS           587
    RA           866
    W             57
    G            162
    Playoffs       0
    Name: 2, dtype: object
    <class 'pandas.core.series.Series'>
    3
    Team         PIT
    League        NL
    Year        2009
    RS           636
    RA           768
    W             62
    G            161
    Playoffs       0
    Name: 3, dtype: object
    <class 'pandas.core.series.Series'>
    4
    Team         PIT
    League        NL
    Year        2008
    RS           735
    RA           884
    W             67
    G            162
    Playoffs       0
    Name: 4, dtype: object
    <class 'pandas.core.series.Series'>
    
    
    
    

Instead of using i and row in the for statement to store the output of .iterrows(), use one variable named row_tuple.
# Use one variable instead of two to store the result of .iterrows()
for row_tuple in pit_df.iterrows():
    print(row_tuple)

<script.py> output:
    (0, Team         PIT
    League        NL
    Year        2012
    RS           651
    RA           674
    W             79
    G            162
    Playoffs       0
    Name: 0, dtype: object)
    (1, Team         PIT
    League        NL
    Year        2011
    RS           610
    RA           712
    W             72
    G            162
    Playoffs       0
    Name: 1, dtype: object)
    (2, Team         PIT
    League        NL
    Year        2010
    RS           587
    RA           866
    W             57
    G            162
    Playoffs       0
    Name: 2, dtype: object)
    (3, Team         PIT
    League        NL
    Year        2009
    RS           636
    RA           768
    W             62
    G            161
    Playoffs       0
    Name: 3, dtype: object)
    (4, Team         PIT
    League        NL
    Year        2008
    RS           735
    RA           884
    W             67
    G            162
    Playoffs       0
    Name: 4, dtype: object)    
    
    
    
    
    
    
    
    
    

Add a line in the for loop to print the type of each row_tuple.
# Print the row and type of each row
for row_tuple in pit_df.iterrows():
    print(row_tuple)
    print(type(row_tuple))

<script.py> output:
    (0, Team         PIT
    League        NL
    Year        2012
    RS           651
    RA           674
    W             79
    G            162
    Playoffs       0
    Name: 0, dtype: object)
    <class 'tuple'>
    (1, Team         PIT
    League        NL
    Year        2011
    RS           610
    RA           712
    W             72
    G            162
    Playoffs       0
    Name: 1, dtype: object)
    <class 'tuple'>
    (2, Team         PIT
    League        NL
    Year        2010
    RS           587
    RA           866
    W             57
    G            162
    Playoffs       0
    Name: 2, dtype: object)
    <class 'tuple'>
    (3, Team         PIT
    League        NL
    Year        2009
    RS           636
    RA           768
    W             62
    G            161
    Playoffs       0
    Name: 3, dtype: object)
    <class 'tuple'>
    (4, Team         PIT
    League        NL
    Year        2008
    RS           735
    RA           884
    W             67
    G            162
    Playoffs       0
    Name: 4, dtype: object)
    <class 'tuple'>




Nice work! Since .iterrows() returns each DataFrame row as a tuple of (index, pandas Series) pairs, you can either split this tuple and use the index and row-values separately (as you did with for i,row in pit_df.iterrows()), or you can keep the result of .iterrows() in the tuple form (as you did with for row_tuple in pit_df.iterrows()).

If using i,row, you can access things from the row using square brackets (i.e., row['Team']). If using row_tuple, you would have to specify which element of the tuple you'd like to access before grabbing the team name (i.e., row_tuple[1]['Team']).

With either approach, using .iterrows() will still be substantially faster than using .iloc as you saw in the video.

