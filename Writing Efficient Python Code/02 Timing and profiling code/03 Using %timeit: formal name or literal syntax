Using %timeit: formal name or literal syntax
Python allows you to create data structures using either a formal name or a literal syntax. In this exercise, you'll explore how using a literal syntax for creating a data structure can speed up runtimes.

data structure	formal name	literal syntax
list	              list()	[]
dictionary	        dict()	{}
tuple	              tuple()	()


Create an empty list called formal_list using the formal name (list()).
Create an empty list called literal_list using the literal syntax ([]).
# Create a list using the formal name
formal_list = list()
print(formal_list)

# Create a list using the literal syntax
literal_list = []
print(literal_list)


<script.py> output:
    []
    []







Print out the type of formal_list and literal_list to show that both naming conventions create a list.
# Create a list using the formal name
formal_list = list()
print(formal_list)

# Create a list using the literal syntax
literal_list = []
print(literal_list)

# Print out the type of formal_list
print(type(formal_list))

# Print out the type of literal_list
print(type(literal_list))


<script.py> output:
    []
    []
    <class 'list'>
    <class 'list'>









Use %timeit in your IPython console to compare runtimes between creating a list using the formal name (list()) and the literal syntax ([]). Don't include the print() statements when timing.
%timeit list()
%timeit []

Which naming convention is faster?

Using the formal name (list()) to create a list is faster.
Both naming conventions have the same runtime.

#YES - Using the literal syntax ([]) to create a list is faster.
Great job! Using Python's literal syntax to define a data structure can speed up your runtime. Consider using the literal syntaxes (like [] instead of list(), {} instead of dict(), or () instead of tuple()), where applicable, to gain some speed.


92.1 ns +- 15 ns per loop (mean +- std. dev. of 7 runs, 10000000 loops each)
21 ns +- 1.92 ns per loop (mean +- std. dev. of 7 runs, 100000000 loops each)
