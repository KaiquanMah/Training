Using %timeit
You'd like to create a list of integers from 0 to 50 using the range() function. However, you are unsure whether using list comprehension or unpacking the range object into a list is faster. Let's use %timeit to find the best implementation.

For your convenience, a reference table of time orders of magnitude is provided below (faster at the top).
symbol	name	unit (s)
ns	nanosecond	10-9
Âµs (us)	microsecond	10-6
ms	millisecond	10-3
s	second	100



Use list comprehension and range() to create a list of integers from 0 to 50 called nums_list_comp.
# Create a list of integers (0-50) using list comprehension
nums_list_comp = [num for num in range(0, 51)]
print(nums_list_comp)

<script.py> output:
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]











Use range() to create a list of integers from 0 to 50 and unpack its contents into a list called nums_unpack.
# Create a list of integers (0-50) using list comprehension
nums_list_comp = [num for num in range(51)]
print(nums_list_comp)

# Create a list of integers (0-50) by unpacking range
nums_unpack = [*range(51)]
print(nums_unpack)

<script.py> output:
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]









Use %timeit within your IPython console to compare the runtimes for creating a list of integers from 0 to 50 using list comprehension vs. unpacking the range object. Don't include the print() statements when timing.
In [3]: %timeit [num for num in range(0, 51)]
2.74 us +- 236 ns per loop (mean +- std. dev. of 7 runs, 100000 loops each)

In [2]: %timeit [num for num in range(51)]
2.95 us +- 65.4 ns per loop (mean +- std. dev. of 7 runs, 100000 loops each)

In [1]: %timeit nums_unpack = [*range(51)]
507 ns +- 65.6 ns per loop (mean +- std. dev. of 7 runs, 1000000 loops each)



Which method was faster?

List comprehension was faster than unpacking range().
Both methods had the same runtime.

#YES - Unpacking the range object was faster than list comprehension.
Nice work! You used %timeit to gather and compare runtimes! Although list comprehension is a useful and powerful tool, sometimes unpacking an object can save time and looks a little cleaner.


