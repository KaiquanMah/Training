Using cell magic mode (%%timeit)
From here on out, you'll be working with a superheroes dataset. For this exercise, a list of each hero's weight in kilograms (called wts) is loaded into your session. You'd like to convert these weights into pounds.

You could accomplish this using the below for loop:

hero_wts_lbs = []
for wt in wts:
    hero_wts_lbs.append(wt * 2.20462)
Or you could use a numpy array to accomplish this task:

wts_np = np.array(wts)
hero_wts_lbs_np = wts_np * 2.20462
Use %%timeit in your IPython console to compare runtimes between these to approaches. Make sure to press SHIFT+ENTER after the magic command to add a new line before writing the code you wish to time. After you've finished coding, answer the following question:





In [1]: %%timeit hero_wts_lbs = []
... for wt in wts:
...     hero_wts_lbs.append(wt * 2.20462)
... 
1.03 ms +- 39 us per loop (mean +- std. dev. of 7 runs, 1000 loops each)


In [3]: %%timeit wts_np = np.array(wts)
... hero_wts_lbs_np = wts_np * 2.20462
... 
1.11 us +- 45.6 ns per loop (mean +- std. dev. of 7 runs, 1000000 loops each)



Which of the above techniques is faster?
The for loop technique was faster.
Both techniques had similar runtimes.

#YES - The numpy technique was faster.
Nice work! You used %%timeit (cell magic mode) to time multiple lines of code. Converting the wts list into a NumPy array and taking advantage of NumPy array broadcasting saved you some time! Moving forward, remember that you can use %timeit to gather runtime for a single line of code (line magic mode) and %%timeit to get the runtime for multiple lines of code.

