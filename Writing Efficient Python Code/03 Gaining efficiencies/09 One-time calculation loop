One-time calculation loop
A list of integers that represents each Pok√©mon's generation has been loaded into your session called generations. You'd like to gather the counts of each generation and determine what percentage each generation accounts for out of the total count of integers.

The below loop was written to accomplish this task:

for gen,count in gen_counts.items():
    total_count = len(generations)
    gen_percent = round(count / total_count * 100, 2)
    print(
      'generation {}: count = {:3} percentage = {}'
      .format(gen, count, gen_percent)
    )
Let's make this loop more efficient by moving a one-time calculation outside the loop.




Import Counter from the collections module.
Use Counter() to collect the count of each generation from the generations list. Save this as gen_counts.
Write a better for loop that places a one-time calculation outside (above) the loop.

# Import Counter
from collections import Counter

# Collect the count of each generation
gen_counts = Counter(generations)

In [5]: gen_counts
Out[5]: Counter({4: 112, 1: 151, 3: 136, 5: 154, 2: 99, 6: 68})



# Improve for loop by moving one calculation above the loop
total_count = len(generations)

In [7]: total_count
Out[7]: 720



for gen,count in gen_counts.items():
    gen_percent = round(count / total_count * 100, 2)
    print('generation {}: count = {:3} percentage = {}'
          .format(gen, count, gen_percent))
          
          
<script.py> output:
    generation 4: count = 112 percentage = 15.56
    generation 1: count = 151 percentage = 20.97
    generation 3: count = 136 percentage = 18.89
    generation 5: count = 154 percentage = 21.39
    generation 2: count =  99 percentage = 13.75
    generation 6: count =  68 percentage = 9.44          


Well done! You spotted a calculation that could be moved outside a loop to make the loop more efficient. Since the total count is now calculated just once (and not with each loop iteration), you can expect to see an efficiency gain with your new loop. When writing a loop is unavoidable, be sure to analyze the loop and move any one-time calculations outside.

