Poisson random variable
The numpy.random module also has a number of useful probability distributions for both discrete and continuous random variables. In this exercise, you will learn how to draw samples from a probability distribution.

In particular, you will draw samples from a very important discrete probability distribution, the Poisson distribution, which is typically used for modeling the average rate at which events occur.

Following the exercise, you should be able to apply these steps to any of the probability distributions found in numpy.random. In addition, you will also see how the sample mean changes as we draw more samples from a distribution.




# Initialize seed and parameters
np.random.seed(123) 
lam, size_1, size_2 = 5, 3, 1000  

# Draw samples & calculate absolute difference between lambda and sample mean
samples_1 = np.random.poisson(lam, size_1)
samples_2 = np.random.poisson(lam, size_2)
answer_1 = abs(lam - np.mean(samples_1))
answer_2 = abs(lam - np.mean(samples_2)) 

print("|Lambda - sample mean| with {} samples is {} and with {} samples is {}. ".format(size_1, answer_1, size_2, answer_2))




In [2]: samples_1
Out[2]: array([7, 5, 4])

In [3]: samples_2
Out[3]: 
array([ 8,  4,  8,  7,  5,  9,  4,  3,  4,  7,  8,  5,  6,  4,  3,  7,  8,
        4,  6,  6,  7,  6,  5,  2,  3,  3,  7,  4,  6,  5,  6,  6,  3,  4,
        4,  6,  6,  4,  4,  2,  4,  4,  3,  2, 11,  3,  1,  3,  6,  6,  3,
        3,  9,  6,  7,  2,  4,  5,  7,  9,  3,  4,  4,  5,  3,  4,  4,  9,
        2,  4,  6,  5,  5,  4,  6,  6,  3,  4,  4,  4,  8,  9,  7,  4,  3,
        5,  7,  5,  4,  4,  5,  5, 13,  6,  4,  5,  4,  4,  4,  9,  6,  7,
        6,  4,  7,  6,  7,  4,  5,  8,  3,  5,  6,  2,  6,  5,  5, 11,  5,
        9,  5,  7,  2,  6,  4,  5,  3,  6,  3,  4,  6,  7,  9,  1,  6,  8,
        5,  3,  7,  9,  2,  3,  5, 12,  2,  3,  3,  3,  3,  1,  9,  3,  6,
        6,  6,  2,  4,  4,  3,  5,  0,  3,  3,  4,  4,  1,  8,  4,  4,  5,
        5,  1,  4,  2,  5,  4,  1,  7,  3,  4,  4,  2,  4,  3,  5,  5,  3,
        6,  5, 10,  4,  2,  8,  2,  0,  2,  1,  2,  4,  2,  2,  5,  6,  8,
        3,  6,  6,  9,  6,  1,  5,  2,  4,  7,  5,  9,  4,  4,  6,  7,  4,
        7,  2,  2,  2,  6,  6, 11,  3,  3,  4,  5,  5,  5,  7,  7,  4,  7,
        5,  6,  2,  5,  6,  5,  9,  1,  3,  5,  5,  4,  6,  4,  4,  5,  5,
        9,  6,  4,  8,  3,  2,  4,  6,  7,  6,  4,  5,  7,  4,  9,  1,  6,
        6,  6,  7,  6,  9,  4,  9,  2,  2,  4,  4,  4,  8,  3,  6,  5,  1,
        7,  3, 11,  5,  7,  2,  2,  5,  5,  5,  1,  6,  6,  7,  2,  4,  3,
        8, 10,  7,  4,  8,  8,  3,  3,  4,  8,  2,  2,  7,  5,  1,  9, 12,
        5,  5,  6,  4,  5,  5,  2,  3,  5,  9,  2,  7,  6,  7,  5,  2,  7,
        3,  7,  5,  6,  5,  5,  1,  3,  3,  3,  3,  3,  5,  5,  7,  5,  5,
        7,  4,  4,  8,  5,  1,  8,  8,  3,  8,  3,  4,  6,  4,  5,  2,  4,
        3,  5,  6,  6,  1,  5,  3,  3,  5,  2, 10,  5,  2,  5,  4,  6,  6,
        3,  4,  7,  0,  7,  5,  3,  5,  2,  6,  6,  3,  3,  1,  5,  1,  3,
        2,  1,  2,  5,  4,  6,  6,  2,  6,  8,  2,  7,  2,  4,  5,  7,  5,
        6,  2,  5,  7, 10,  6,  4,  4,  6,  4,  5,  3,  2,  3,  1,  5,  4,
        4,  4,  8,  7,  8,  5,  4,  5,  6,  5,  6,  7,  6,  7,  4,  3,  3,
        5,  9,  5,  6,  4,  3, 11,  8,  4,  8,  6,  7,  5,  6,  6,  6,  7,
        3,  4,  7,  5,  3,  5,  4,  2,  5,  5,  6,  2,  4,  4,  2,  7,  7,
        6,  4,  5,  5,  8,  4,  6,  6,  5,  6,  3,  4,  5,  8,  4,  6,  6,
        4,  5,  4,  3,  4,  6,  2,  7,  5,  6,  7, 11,  3,  5,  3,  2,  4,
        1,  2,  5,  5,  6, 10,  4,  8,  5,  3,  3,  4,  9,  4,  2,  7,  3,
        1,  0,  4,  7,  3,  6,  5, 11,  3,  6,  5,  3,  7,  6,  5,  8,  8,
        6,  6,  3,  6,  7,  6,  4,  4,  4,  8,  7,  5,  1,  6,  3,  4,  7,
        3,  7,  4,  2,  3, 12,  2,  8,  7,  2,  2,  8,  6,  8,  2,  5,  5,
        6,  2,  3,  6,  5,  3,  4,  4,  7,  4,  3,  3,  5,  5,  7,  5,  6,
        2,  7,  4,  4,  2,  7,  8,  0,  5,  5,  6,  3,  2,  4, 10,  5,  5,
        2,  4,  1,  3,  9,  0,  5,  4,  5,  5,  4,  4,  7,  1,  4,  6,  2,
        7,  7,  6,  7,  4, 11,  7,  4,  4,  8,  2,  3,  5,  4,  3,  6,  5,
        2,  5,  5,  4,  2,  4,  5,  6,  3,  4,  4,  5,  7,  5,  6,  5,  3,
        2,  4,  5,  8,  3,  1,  1,  5,  8,  7,  6,  2,  5,  4,  6,  3,  3,
        4,  6,  5, 10,  8, 12,  2,  4,  9,  3,  6,  4,  8,  4,  5,  3,  5,
        3,  7,  9,  8,  6,  1,  4,  8,  7,  6,  4,  3,  8,  2,  3,  7,  8,
        4,  7,  3,  4,  1,  4,  4,  5,  5,  3,  5,  7,  1,  4,  8,  5,  6,
        2,  6,  5,  5,  4,  4,  7,  2,  4,  4,  3,  2,  5,  9,  3,  1,  4,
        6,  4,  3,  3,  9,  6,  7,  4,  3,  5,  7,  7,  5,  4,  5,  4,  7,
        4,  4,  6,  6,  3,  2,  9,  6,  3,  8,  7,  2,  5,  6,  9, 10,  5,
        4,  5,  3,  5,  5,  3,  9,  4,  5,  4,  4,  6,  3,  4,  6,  7,  4,
        3,  4,  2,  5,  6,  3,  2, 10,  5,  8,  5,  4,  3,  6,  7,  2,  8,
        6,  5,  5,  3,  6,  1, 10,  3,  3,  7,  6,  5,  4,  6,  9,  9,  8,
        1,  6,  2,  5,  6,  2,  5,  6,  4,  4,  2,  3,  2,  6,  1,  8,  2,
        6,  4, 11,  3,  6, 10,  7,  3,  3,  8,  4,  5,  5,  9,  6,  4,  7,
        9,  5,  5,  3,  7,  6,  4,  3,  4,  4,  8,  6,  0,  4,  1,  5,  7,
        3,  5,  2,  5,  5, 10,  6,  3, 11,  9,  0,  4,  8,  4,  3,  7,  9,
        6,  2,  7,  1,  4,  4,  4,  4,  4,  5,  5,  3,  7,  5,  7,  4,  9,
        7,  8,  8,  5,  2,  3,  4,  4,  9,  8,  4,  4,  6,  4,  6,  4,  5,
        6,  2,  5,  7,  9,  6,  3,  6,  6,  4,  8,  2,  1, 11,  4,  2,  2,
        5,  5,  5,  3,  6,  4,  2,  3,  3,  7,  6, 11,  5,  3,  9,  4,  1,
        6,  7,  3, 10,  4,  7,  5,  3,  5,  4,  3,  7,  6,  7])
        
        




    |Lambda - sample mean| with 3 samples is 0.33333333333333304 and with 1000 samples is 0.07699999999999996.
Why do you think the larger size gives us a better result?





In [5]: help(np.random.poisson)
Help on built-in function poisson:

poisson(...) method of mtrand.RandomState instance
    poisson(lam=1.0, size=None)
    
    Draw samples from a Poisson distribution.
    
    The Poisson distribution is the limit of the binomial distribution
    for large N.
    
    Parameters
    ----------
    lam : float or array_like of floats
        Expectation of interval, should be >= 0. A sequence of expectation
        intervals must be broadcastable over the requested size.
    size : int or tuple of ints, optional
        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then
        ``m * n * k`` samples are drawn.  If size is ``None`` (default),
        a single value is returned if ``lam`` is a scalar. Otherwise,
        ``np.array(lam).size`` samples are drawn.
    
    Returns
    -------
    out : ndarray or scalar
        Drawn samples from the parameterized Poisson distribution.
    
    Notes
    -----
    The Poisson distribution
    
    .. math:: f(k; \lambda)=\frac{\lambda^k e^{-\lambda}}{k!}
    
    For events with an expected separation :math:`\lambda` the Poisson
    distribution :math:`f(k; \lambda)` describes the probability of
    :math:`k` events occurring within the observed
    interval :math:`\lambda`.
    
    Because the output is limited to the range of the C long type, a
    ValueError is raised when `lam` is within 10 sigma of the maximum
    representable value.
    
    References
    ----------
    .. [1] Weisstein, Eric W. "Poisson Distribution."
           From MathWorld--A Wolfram Web Resource.
           http://mathworld.wolfram.com/PoissonDistribution.html
    .. [2] Wikipedia, "Poisson distribution",
           http://en.wikipedia.org/wiki/Poisson_distribution
    
    Examples
    --------
    Draw samples from the distribution:
    
    >>> import numpy as np
    >>> s = np.random.poisson(5, 10000)
    
    Display histogram of the sample:
    
    >>> import matplotlib.pyplot as plt
    >>> count, bins, ignored = plt.hist(s, 14, normed=True)
    >>> plt.show()
    
    Draw each 100 values for lambda 100 and 500:
    
    >>> s = np.random.poisson(lam=(100., 500.), size=(100, 2))
