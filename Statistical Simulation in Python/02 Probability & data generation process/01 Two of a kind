Queen and spade
In this example, you'll use the generalized probability formula P(A∪B)=P(A)+P(B)−P(A∩B) to calculate the probability of two events. Consider a deck of cards (13 cards x 4 suites = 52 cards in total). One card is drawn at random. What is the probability of getting a queen or a spade? Here event A is the card being a queen and event B is the card being a spade. Think carefully about whether the two events have anything in common.

(4 possible queens + 13 possible spades - 1 overlapping queen of spades)/52 cards
16/52





Two of a kind
Now let's use simulation to estimate probabilities. Suppose you've been invited to a game of poker at your friend's home. In this variation of the game, you are dealt five cards and the player with the better hand wins. You will use a simulation to estimate the probabilities of getting certain hands. Let's work on estimating the probability of getting at least two of a kind. Two of a kind is when you get two cards of different suites but having the same numeric value (e.g., 2 of hearts, 2 of spades, and 3 other cards).

By the end of this exercise, you will know how to use simulation to calculate probabilities for card games.


# Shuffle deck & count card occurrences in the hand
n_sims, two_kind = 10000, 0
for i in range(n_sims):
    
    #In the for loop, shuffle deck_of_cards
    np.random.shuffle(deck_of_cards)
    
    hand, cards_in_hand = deck_of_cards[0:5], {}
    for card in hand:
        
        #Utilize the get() method of a dictionary to count the number of occurrences of each card in the hand
        # Use .get() method on cards_in_hand
        cards_in_hand[card[1]] = cards_in_hand.get(card[1], 0) + 1
    
    # Condition for getting at least 2 of a kind
    highest_card = max(cards_in_hand.values())
    
    #Increment the counter, two_kind, when there are at least two cards having the same numeric value in the hand
    if highest_card>=2: 
        two_kind += 1

print("Probability of seeing at least two of a kind = {} ".format(two_kind/n_sims))


<script.py> output:
    Probability of seeing at least two of a kind = 0.4952


In [2]: cards_in_hand
Out[2]: {1: 2, 2: 1, 5: 1, 12: 1}



The seed for this exercise is set to 123

In [1]: deck_of_cards
Out[1]: 
[('Heart', 0),
 ('Heart', 1),
 ('Heart', 2),
 ('Heart', 3),
 ('Heart', 4),
 ('Heart', 5),
 ('Heart', 6),
 ('Heart', 7),
 ('Heart', 8),
 ('Heart', 9),
 ('Heart', 10),
 ('Heart', 11),
 ('Heart', 12),
 ('Club', 0),
 ('Club', 1),
 ('Club', 2),
 ('Club', 3),
 ('Club', 4),
 ('Club', 5),
 ('Club', 6),
 ('Club', 7),
 ('Club', 8),
 ('Club', 9),
 ('Club', 10),
 ('Club', 11),
 ('Club', 12),
 ('Spade', 0),
 ('Spade', 1),
 ('Spade', 2),
 ('Spade', 3),
 ('Spade', 4),
 ('Spade', 5),
 ('Spade', 6),
 ('Spade', 7),
 ('Spade', 8),
 ('Spade', 9),
 ('Spade', 10),
 ('Spade', 11),
 ('Spade', 12),
 ('Diamond', 0),
 ('Diamond', 1),
 ('Diamond', 2),
 ('Diamond', 3),
 ('Diamond', 4),
 ('Diamond', 5),
 ('Diamond', 6),
 ('Diamond', 7),
 ('Diamond', 8),
 ('Diamond', 9),
 ('Diamond', 10),
 ('Diamond', 11),
 ('Diamond', 12)]
 
 
 In [6]: hand
Out[6]: [('Spade', 1), ('Heart', 5), ('Spade', 8), ('Heart', 11), ('Diamond', 9)]

In [8]:     hand[0]
Out[8]: ('Spade', 1)
In [10]:     hand[0][0]
Out[10]: 'Spade'
In [11]:     hand[0][1]
Out[11]: 1


In [9]:     hand[1]
Out[9]: ('Heart', 5)







