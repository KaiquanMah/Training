Mixed precision training with Trainer
You want to simplify your training interface for mixed precision training. As an alternative to training loops with Accelerator, you've decided to build Trainer since your model doesn't require custom training loops. Set up Trainer to use mixed precision training! The exercise will take some time to run with the call to trainer.train().


Enable mixed precision training for Trainer.

training_args = TrainingArguments(
    output_dir="./results",
    evaluation_strategy="epoch",
    # Enable mixed precision training
    fp16=True
)
trainer = Trainer(model=model,
                  args=training_args,
                  train_dataset=dataset["train"],
                  eval_dataset=dataset["validation"],
                  compute_metrics=compute_metrics)
trainer.train()


<script.py> output:
    {'eval_loss': 0.6923160552978516, 'eval_accuracy': 0.3333333333333333, 'eval_f1': 0.5, 'eval_runtime': 1.3395, 'eval_samples_per_second': 2.24, 'eval_steps_per_second': 0.747, 'epoch': 1.0}
    {'eval_loss': 0.7021612524986267, 'eval_accuracy': 0.3333333333333333, 'eval_f1': 0.5, 'eval_runtime': 1.3878, 'eval_samples_per_second': 2.162, 'eval_steps_per_second': 0.721, 'epoch': 2.0}
    {'eval_loss': 0.7071353793144226, 'eval_accuracy': 0.3333333333333333, 'eval_f1': 0.5, 'eval_runtime': 1.2564, 'eval_samples_per_second': 2.388, 'eval_steps_per_second': 0.796, 'epoch': 3.0}
    {'train_runtime': 20.5649, 'train_samples_per_second': 0.438, 'train_steps_per_second': 0.146, 'train_loss': 0.6685965061187744, 'epoch': 3.0}


