Mean or median
As data scientists, we often look to describe data as concisely as possible. This brings us to the two most common measures of centrality: mean and median. In this exercise, you'll examine a couple different scenarios and decide which metric is optimal for effectively describing the data.
More concretely, you'll be exploring Australian weather data containing features related to temperature and wind speeds. This dataset has already been imported as weather and both the matplotlib and pandas packages have been imported as plt and pd for you to use the rest of the chapter as well.
https://www.kaggle.com/jsphyg/weather-dataset-rattle-package


Plot the distribution of the Temp3pm column using the hist() function; is the data skewed at all?
In [2]: weather['Temp3pm']
Out[2]: 
0     11.5
1     17.0
2     22.5
3     24.3
4     27.4
5     18.8
6     32.0
7      8.6
8     30.9
9     30.7
10    29.3
11    17.8
12    25.6
13    33.9
14    19.2
15    25.3
16    15.0
17    21.7
19    23.1
Name: Temp3pm, dtype: float64

# Visualize the distribution 
plt.hist(weather['Temp3pm'])
plt.show()







Assign and print the mean and median for the Temp3pm column; which do you think is a better representation of the data?
# Visualize the distribution 
plt.hist(weather['Temp3pm'])
plt.show()

# Assign the mean to the variable and print the result
mean = weather['Temp3pm'].mean()
print('Mean:', mean)

# Assign the median to the variable and print the result
median = weather['Temp3pm'].median()
print('Median:', median)

<script.py> output:
    Mean: 22.873684210526317
    Median: 23.1




Adapt the code to explore a different column; see how the results for Temp9am look.
In [3]: weather['Temp9am']
Out[3]: 
0      8.6
1     14.2
2     15.1
3     17.5
4     16.2
5      5.8
6     20.3
7      2.5
8     15.4
9     22.2
10    30.4
11    11.0
12    21.7
13    25.5
14    13.4
15    25.2
16    10.6
17    26.7
19    20.5
Name: Temp9am, dtype: float64


# Visualize the distribution 
plt.hist(weather['Temp9am'])
plt.show()

# Assign the mean to the variable and print the result
mean = weather['Temp9am'].mean()
print('Mean:', mean)

# Assign the median to the variable and print the result
median = weather['Temp9am'].median()
print('Median:', median)


<script.py> output:
    Mean: 16.989473684210527
    Median: 16.2


Great work! If you look closely here, you can see the that distribution for Temp3pm was skewed left while the distribution for Temp9am was more skewed right. For this reason, the median was higher than the mean initially, but after adapting our code we see that the mean became higher than the median due to the change in skewness. While neither column is harshly skewed, it is enough that we should consider using median instead of mean due to the robustness of the metric.

