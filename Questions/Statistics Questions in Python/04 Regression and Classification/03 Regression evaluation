Regression evaluation
Let's revisit the linear regression model that you created with LinearRegression() and then trained with the fit() function a few exercises ago. Evaluate the performance your model, imported here as lm for you to call.
The weather data has been imported for you with the X and y variables as well, just like before. Let's get to calculating the R-squared, mean squared error, and mean absolute error values for the model.


Compute and print the R-squared score of our model using the score() function.
# R-squared score
r2 = lm.score(X, y)
print(r2)

<script.py> output:
    0.44662006353076383
    
    
    
Compute and print mean squared error using the mean_squared_error() function.
# Mean squared error
from sklearn.metrics import mean_squared_error
preds = lm.predict(X)
mse = mean_squared_error(y, preds)
print(mse)

<script.py> output:
    226.12721831681654
    
    
    
    
    
    
Adapt your code to compute and print the mean absolute error this time using the mean_absolute_error() function.
# Mean absolute error
from sklearn.metrics import mean_absolute_error
preds = lm.predict(X)
mae = mean_absolute_error(y, preds)
print(mae)

<script.py> output:
    11.522404665934568


Good job! Note that our R-squared value tells us the percentage of the variance of y that X is responsible for. Which error metric would you recommend for this dataset? If you remember from when you plotted your model fit, there aren't too many outliers, so mean squared error would be a good choice to go with! When interviewing, make sure you have sound reasoning to back up your choice on questions like this.


