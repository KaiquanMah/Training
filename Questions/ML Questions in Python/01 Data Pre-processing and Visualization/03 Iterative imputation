Iterative imputation
In the previous exercise, you derived mean imputations for missing values of loan_data. However, in a machine learning interview, you will probably be asked about more dynamic imputation techniques that rely on other features in the dataset.
In this exercise, you'll practice a machine-learning based approach by imputing missing values as a function of remaining features using IterativeImputer() from sklearn.impute. This is a multivariate imputer that estimates each feature from all of the others in a 'round-robin' fashion.
Note that this function is considered experimental, so please read the documentation for more information.

You're at the same place in the Pipeline:
https://scikit-learn.org/stable/modules/generated/sklearn.impute.IterativeImputer.html



Subset loan_data's numeric columns and assign them to numeric_cols.
# Explicitly require this experimental feature
from sklearn.experimental import enable_iterative_imputer
# Now you can import normally from sklearn.impute
from sklearn.impute import IterativeImputer

# Subset numeric features: numeric_cols
numeric_cols = loan_data.select_dtypes(include=[np.number])


In [2]: numeric_cols
Out[2]: 
       Current Loan Amount  Credit Score  Years in current job  Annual Income  Monthly Debt  ...  Number of Credit Problems  Current Credit Balance  Maximum Open Credit  Bankruptcies  Tax Liens
0                    12232         728.0                   1.0        46643.0        777.39  ...                          0                    6762                 7946           0.0        0.0
1                    25014         733.0                  10.0        81099.0        892.09  ...                          0                   35706                77961           0.0        0.0
...
[88910 rows x 13 columns]








Instantiate an iterative imputation object with 5 iterations and posterior sampling enabled.
Fit and transform the data.
# Subset numeric features: numeric_cols
numeric_cols = loan_data.select_dtypes(include=[np.number])

# Iteratively impute
#https://scikit-learn.org/stable/modules/generated/sklearn.impute.IterativeImputer.html
#The max_iter argument lets you set the number of iterations.
# sample_posterior=True for multiple imputations
#The sample_posterior argument allows the model to use the information derived from each iteration.
imp_iter = IterativeImputer(max_iter=5, sample_posterior=True, random_state=123)

#You can fit and transform numeric_cols using the .fit_transform() method from IterativeImputer.
loans_imp_iter = imp_iter.fit_transform(numeric_cols)


In [7]: imp_iter
Out[7]: 
IterativeImputer(add_indicator=False, estimator=None,
                 imputation_order='ascending', initial_strategy='mean',
                 max_iter=5, max_value=None, min_value=None, missing_values=nan,
                 n_nearest_features=None, random_state=123,
                 sample_posterior=True, tol=0.001, verbose=0)

In [8]: loans_imp_iter
Out[8]: 
array([[1.2232e+04, 7.2800e+02, 1.0000e+00, ..., 7.9460e+03, 0.0000e+00,
        0.0000e+00],
       [2.5014e+04, 7.3300e+02, 1.0000e+01, ..., 7.7961e+04, 0.0000e+00,
        0.0000e+00],
       [1.6117e+04, 7.2400e+02, 9.0000e+00, ..., 1.4815e+04, 1.0000e+00,
        0.0000e+00],
       ...,
       [2.4394e+04, 7.4600e+02, 5.0000e-01, ..., 5.3374e+04, 0.0000e+00,
        0.0000e+00],
       [5.0300e+03, 7.2200e+02, 5.0000e-01, ..., 1.8422e+04, 0.0000e+00,
        0.0000e+00],
       [1.8446e+04, 7.1800e+02, 6.0000e+00, ..., 2.1124e+04, 0.0000e+00,
        1.0000e+00]])
















Convert return array object back to DataFrame.
In [15]: numeric_cols.columns
Out[15]: 
Index(['Current Loan Amount', 'Credit Score', 'Years in current job', 'Annual Income', 'Monthly Debt', 'Years of Credit History', 'Months since last delinquent', 'Number of Open Accounts',
       'Number of Credit Problems', 'Current Credit Balance', 'Maximum Open Credit', 'Bankruptcies', 'Tax Liens'],
      dtype='object')



# Subset numeric features: numeric_cols
numeric_cols = loan_data.select_dtypes(include=[np.number])

# Iteratively impute
imp_iter = IterativeImputer(max_iter=5, sample_posterior=True, random_state=123)
loans_imp_iter = imp_iter.fit_transform(numeric_cols)

# Convert returned array to DataFrame
loans_imp_iterDF = pd.DataFrame(loans_imp_iter, columns=numeric_cols.columns)












Print the imputed DataFrame's information using the .info() function to check for missing values.
# Subset numeric features: numeric_cols
numeric_cols = loan_data.select_dtypes(include=[np.number])

# Iteratively impute
imp_iter = IterativeImputer(max_iter=5, sample_posterior=True, random_state=123)
loans_imp_iter = imp_iter.fit_transform(numeric_cols)

# Convert returned array to DataFrame
loans_imp_iterDF = pd.DataFrame(loans_imp_iter, columns=numeric_cols.columns)

# Check the DataFrame's info
print(loans_imp_iterDF.info())



<script.py> output:
    <class 'pandas.core.frame.DataFrame'>
    RangeIndex: 88910 entries, 0 to 88909
    Data columns (total 13 columns):
    Current Loan Amount             88910 non-null float64
    Credit Score                    88910 non-null float64
    Years in current job            88910 non-null float64
    Annual Income                   88910 non-null float64
    Monthly Debt                    88910 non-null float64
    Years of Credit History         88910 non-null float64
    Months since last delinquent    88910 non-null float64
    Number of Open Accounts         88910 non-null float64
    Number of Credit Problems       88910 non-null float64
    Current Credit Balance          88910 non-null float64
    Maximum Open Credit             88910 non-null float64
    Bankruptcies                    88910 non-null float64
    Tax Liens                       88910 non-null float64
    dtypes: float64(13)
    memory usage: 8.8 MB
    None



Awesome! That wraps up this lesson on finding missing data and what you can do about it. Notice that imputation methods follow the first few steps of the machine learning template that you're already familiar with - Import, Instantiate, Fit - but it uses the fit_transform() function instead. We'll discuss the ML template more throughout the rest of the course!

