Data encoding
Encoding of categorical data makes them useful for machine learning algorithms. R encodes factors internally, but encoding is necessary for the development of your own models.
In this exercise, you'll first build a linear model using lm() and then develop your own model step-by-step.
In one hot encoding, a separate column is created for each of the levels.


Note that one of the columns can be derived based on the others (e.g. 0's in the columns "B" and "C" imply 1 in the "A" column). So, you can drop the first column for the linear regression. We will review linear models in more detail in the next chapter.
For one hot encoding, you can use dummyVars() from the caret package.

To use it, first create the encoder and then transform the dataset:
encoder <- dummyVars(~ category, data = df)
predict(encoder, newdata = df)

The complete cases of the survey dataset from the MASS package are available as survey. The caret package has been preloaded.






Fit a linear model that predicts Pulse by Exer using survey data; what are the model's coefficients?
# Fit a linear model
lm(Pulse ~ Exer, 
   data = survey)


Call:
lm(formula = Pulse ~ Exer, data = survey)

Coefficients:
(Intercept)     ExerNone     ExerSome  
     71.447        4.410        5.379
     
     
     
     
     



Create one hot encoder for the Exer column.
Assign the one hot labels to Exer_encoded.
> str(survey)
'data.frame':	168 obs. of  12 variables:
 $ Sex   : Factor w/ 2 levels "Female","Male": 1 2 2 1 2 1 2 2 1 1 ...
 $ Wr.Hnd: num  18.5 19.5 20 18 17.7 17 20 18.5 17 19.5 ...
 $ NW.Hnd: num  18 20.5 20 17.7 17.7 17.3 19.5 18.5 17.2 20.2 ...
 $ W.Hnd : Factor w/ 2 levels "Left","Right": 2 1 2 2 2 2 2 2 2 2 ...
 $ Fold  : Factor w/ 3 levels "L on R","Neither",..: 3 3 2 1 1 3 3 3 1 1 ...
 $ Pulse : int  92 104 35 64 83 74 72 90 80 66 ...
 $ Clap  : Factor w/ 3 levels "Left","Neither",..: 1 1 3 3 3 3 3 3 3 2 ...
 $ Exer  : Factor w/ 3 levels "Freq","None",..: 3 2 3 3 1 1 3 3 1 3 ...
 $ Smoke : Factor w/ 4 levels "Heavy","Never",..: 2 4 2 2 2 2 2 2 2 2 ...
 $ Height: num  173 178 165 173 183 ...
 $ M.I   : Factor w/ 2 levels "Imperial","Metric": 2 1 2 1 1 2 2 2 1 2 ...
 $ Age   : num  18.2 17.6 23.7 21 18.8 ...
 
 
# Create one hot encoder
encoder <- dummyVars(~ Exer, 
                     data = survey)

# Encode Exer
Exer_encoded <- predict(encoder, 
                        newdata = survey)
 
 
 
> encoder
Dummy Variable Object

Formula: ~Exer
1 variables, 1 factors
Variables and levels will be separated by '.'
A less than full rank encoding is used



> Exer_encoded
    Exer.Freq Exer.None Exer.Some
1           0         0         1
2           0         1         0
5           0         0         1
...
237         1         0         0
 
 













Use cbind() to create a matrix. The matrix should consist of 1's in the first column. The second and the third column should be the same as in Exer_encoded.
Run the formula for the coefficients' calculation.

# Bind intercept and independent variables
X <- cbind(1, Exer_encoded[, 2:3])


> X
      Exer.None Exer.Some
1   1         0         1
2   1         1         0
5   1         0         1
...
237 1         0         0
 


# Compute coefficients
solve((t(X)%*%X))%*%t(X)%*%survey$Pulse

> solve((t(X)%*%X))%*%t(X)%*%survey$Pulse
               [,1]
          71.447059
Exer.None  4.410084
Exer.Some  5.379028



Congrats! You have encoded the categorical data, which allowed you to compute the linear model by hand. Note that the one hot encoding can create extremely high-dimensional data if the number of categories is large. You can show the interviewer that you can not only use built-in R functions, but also develop your own models.

