Approximate Pi with recursion
Your task is to write a recursive function to approximate π using the formula defined above (the approximation means that instead of infinity ∞, the sequence considers only a certain amount of elements n).



Here are examples of π for some of the values of n:
n=0 → π=4
n=1 → π≈2.67
n=2 → π≈3.47






Write a lambda expression calculating the k-th element in the series (without taking 4 into account).

#attempt 1
# Write an expression to get the k-th element of the series
get_elmnt = lambda k: sum((-1)**k / (2*k + 1))





# attempt 2
# Write an expression to get the k-th element of the series 
get_elmnt = lambda k: ((-1)**k)/(2*k+1)







Specify the base case.
Define the recursive call (n is the number of elements to consider).
# Write an expression to get the k-th element of the series 
get_elmnt = lambda k: ((-1)**k)/(2*k+1)

def calc_pi(n):
    curr_elmnt = get_elmnt(n)
    
    # Define the base case 
    if n == 0:
    	return 4
      
    # Make the recursive call
    return 4 * curr_elmnt + calc_pi(n-1)
  
# Compare the approximated Pi value to the theoretical one
print("approx = {}, theor = {}".format(calc_pi(500), math.pi))


<script.py> output:
    approx = 3.143588659585789, theor = 3.141592653589793

