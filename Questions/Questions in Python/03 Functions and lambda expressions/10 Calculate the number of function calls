Calculate the number of function calls
Let's consider a classic example of recursion â€“ the Fibonacci sequence, represented by non-negative integers starting from 0 with each element F(n) equals the sum of the preceding two: 0, 1, 1, 2, 3, 5, 8, 13, 21, .... You are given a function that returns a tuple with the n-th element of the sequence and the amount of calls to fib() used:

def fib(n):

  if n < 2:
    return (n, 1)

  fib1 = fib(n-1)
  fib2 = fib(n-2)

  return (fib1[0] + fib2[0], fib1[1] + fib2[1] + 1)



How many calls to fib() are needed to calculate the 15th and 20th elements of the sequence?
15th element: 3193 calls; 20th element: 35421 calls
15th element: 3193 calls; 20th element: 21891 calls
15th element: 35421 calls; 20th element: 1973 calls

# YES - 15th element: 1973 calls; 20th element: 21891 calls
Correct! Notice how big the difference is in function calls, even though they are only 5 indices away from each other. Therefore, recursion has to be used with caution. Too many calls can lead to memory errors.

