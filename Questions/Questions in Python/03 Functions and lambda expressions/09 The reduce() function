The reduce() function
Now, it is time for some reduction! As before you'll be given three tasks to complete. Use lambda expressions!
The necessary functions from the functools module are already imported for you.

Reverse a string using reduce().
# Reverse a string using reduce()
string = 'DataCamp'
inv_string = reduce(lambda x, y: y + x, string)
print('Inverted string = ' + inv_string) 

<script.py> output:
    Inverted string = pmaCataD








Find common items shared among all the sets in sets.
# Find common items shared among all the sets in sets
sets = [{1, 4, 8, 9}, {2, 4, 6, 9, 10, 8}, {9, 0, 1, 2, 4}]
common_items = reduce(lambda x,y: set(x).intersection(set(y)), sets)
print('common items = ' + str(common_items))

<script.py> output:
    common items = {9, 4}







Convert a number sequence into a single number (e.g. [1, 2, 3] â†’ 123).
# Convert a number sequence into a single number
nums = [5, 6, 0, 1]
num = reduce(lambda x,y: str(x)+str(y), nums)
print(str(nums) + ' is converted to ' + str(num))

<script.py> output:
    [5, 6, 0, 1] is converted to 5601



Nicely done! The functions map(), filter(), and reduce() are a serious weapon that you can use while solving a complex task. Now you are very well equiped!

