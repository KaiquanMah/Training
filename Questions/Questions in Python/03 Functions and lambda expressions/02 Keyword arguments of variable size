Keyword arguments of variable size
Now let's move to keyword arguments of variable size! Your task is to define the function key_types(). It should take a variable number of keyword arguments and return a new dictionary: the keys are unique object types of arguments passed to the key_types() function and the associated values represent lists. Each list should contain argument names that follow the type defined as a key (e.g. calling the key_types(val1='a', val2='b', val3=1) results in {<class 'int'>: ['val3'], <class 'str'>: ['val1', 'val2']}).
To retrieve the type of an object, you need to use the type() function (e.g. type(1) is int).


Define the function with an arbitrary number of keyword arguments.
Iterate over key-value pairs.
Update a list associated with a key.

# Define the function with an arbitrary number of arguments
def key_types(**kwargs):
    dict_type = dict()
    # Iterate over key value pairs
    for key, value in kwargs.items():
        # Update a list associated with a key
        if type(value) in dict_type:
            dict_type[type(value)].append(key)
        else:
            dict_type[type(value)] = [key]
            
    return dict_type
  
res = key_types(a=1, b=2, c=(1, 2), d=3.1, e=4.2)
print(res)

<script.py> output:
    {<class 'int'>: ['a', 'b'], <class 'tuple'>: ['c'], <class 'float'>: ['d', 'e']}

