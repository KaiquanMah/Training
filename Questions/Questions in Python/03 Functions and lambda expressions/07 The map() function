The map() function
Let's do some mapping!
Do you remember how zip() works? It merges given Iterables so that items with the same index fall into the same tuple. Moreover, the output is restricted by the shortest Iterable.
Your task is to define your own my_zip() function with *args depicting a variable number of Iterables. Rather than a zip object, my_zip() should already return a list of tuples.
Comment: args should be checked whether they contain Iterables first. But we omit it for simplicity.


Retrieve Iterable lengths from args using map() and find the minimal length.
Append new items to the tuple_list; each item is a list with elements from Iterables in args with the same index.

def my_zip(*args):
    
    # Retrieve Iterable lengths and find the minimal length
    lengths = list(map(len, args))
    min_length = min(lengths)

    tuple_list = []
    for i in range(0, min_length):
        # Append new items to the 'tuple_list'
        # out of every argument, give me the the character at the ith index
        tuple_list.append(tuple(map(lambda x: x[i], args)))

    return tuple_list

result = my_zip([1, 2, 3], ['a', 'b', 'c', 'd'], 'DataCamp')
print(result)


<script.py> output:
    [(1, 'a', 'D'), (2, 'b', 'a'), (3, 'c', 't')]
    
Very good! Actually you could notice that sometimes map() can be substituted with a list comprehension. For example, list(map(lambda x: len(x), args)) can be re-written as [len(x) for x in args].

    
