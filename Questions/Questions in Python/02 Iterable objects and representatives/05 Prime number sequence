Prime number sequence
A prime number is a positive number that is divisible only by 1 or itself (e.g. 3, 7, 11 etc.). However, 1 is not a prime number.
Your task is, given a list of candidate numbers cands, to filter only prime numbers in a new list primes.
But first, you need to create a function is_prime() that returns True if the input number n is prime or False, otherwise. A number is prime if it is not divisible by any integer number from 2 to √n (any number n is not divisible by anything higher than √n).
Tip: you might need to use the % operator that calculates a remainder from a division (e.g. 8 % 3 is 2).
The math module is already imported.




cands = [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49]

Define the initial check: numbers lower than 2 are not prime.
Define the loop checking if the number n is not prime.

def is_prime(n):    
    # Define the initial check
    # if numbers are lower than 2, they are not prime numbers
    if n < 2:
       return False
    # Define the loop checking if a number is not prime
    for i in range(2, int(n**(1/2))):
        # if n is divisible by the numbers we are looping through, and not return any remainder, it is not a prime number
        if (n%i)== 0:
            return False
    return True









Filter prime numbers from cands into the primes list.

def is_prime(n):
    # Define the initial check
    if n < 2:
       return False
    # Define the loop checking if a number is not prime
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True
    
# Filter prime numbers into the new list
primes = [num for num in cands if is_prime(num)]
print("primes = " + str(primes))


<script.py> output:
    primes = [5, 13, 17, 29, 37, 41]

Great! Now you can do primarity checks for many more numbers! Remember, writing a function to check whether a number is prime is one of the most frequent interview questions – but it can have many variations.

