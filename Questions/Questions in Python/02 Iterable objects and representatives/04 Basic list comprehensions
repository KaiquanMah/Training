Basic list comprehensions
For this task, you will have to create a bag-of-words representation of the spam email stored in the spam variable (you can explore the content using the shell). Recall that bag-of-words is simply a counter of unique words in a given text. This representation can be further used for text classification, e.g. for spam detection (given enough training examples).
We created a small auxiliary function create_word_list() to help you split a string into words, e.g. applying it to 'To infinity... and beyond!' will return ['To', 'infinity', 'and', 'beyond'].


Dear User,
Our Administration Team needs to inform you that you are reaching the storage limit of your Mailbox account.
You have to verify your account within the next 24 hours.
Otherwise, it will not be possible to use the service.
Please, click on the link below to verify your account and continue using our service.
Your Administration Team.




Convert the text to lower case and create a word list.
In [1]: spam
Out[1]: 'Dear User,\n\nOur Administration Team needs to inform you that you are reaching the storage limit of your Mailbox account.\nYou have to verify your account within the next 24 hours.\nOtherwise, it will not be possible to use the service.\nPlease, click on the link below to verify your account and continue using our service.\n\nYour Administration Team.'

# Convert the text to lower case and create a word list
words = create_word_list(spam.lower())


In [3]: words
Out[3]: 
['dear',
 'user',
 'our',
 'administration',
 'team',
 'needs',
 'to',
 'inform',
 'you',
 'that',
 'you',
 'are',
 'reaching',
 'the',
 'storage',
 'limit',
 'of',
 'your',
 'mailbox',
 'account',
 'you',
 'have',
 'to',
 'verify',
 'your',
 'account',
 'within',
 'the',
 'next',
 '24',
 'hours',
 'otherwise',
 'it',
 'will',
 'not',
 'be',
 'possible',
 'to',
 'use',
 'the',
 'service',
 'please',
 'click',
 'on',
 'the',
 'link',
 'below',
 'to',
 'verify',
 'your',
 'account',
 'and',
 'continue',
 'using',
 'our',
 'service',
 'your',
 'administration',
 'team']
 
 
 
 
 
 
 
 
 
 






Create a set that will store only unique words from the list.
# Convert the text to lower case and create a word list
words = create_word_list(spam.lower())

# Create a set storing only unique words
word_set = set(words)

In [5]: word_set
Out[5]: 
{'24',
 'account',
 'administration',
 'and',
 'are',
 'be',
 'below',
 'click',
 'continue',
 'dear',
 'have',
 'hours',
 'inform',
 'it',
 'limit',
 'link',
 'mailbox',
 'needs',
 'next',
 'not',
 'of',
 'on',
 'otherwise',
 'our',
 'please',
 'possible',
 'reaching',
 'service',
 'storage',
 'team',
 'that',
 'the',
 'to',
 'use',
 'user',
 'using',
 'verify',
 'will',
 'within',
 'you',
 'your'}




















Using list comprehension, create a dictionary that counts a word appearance in the word list.
# Convert the text to lower case and create a word list
words = create_word_list(spam.lower())

# Create a set storing only unique words
word_set = set(words)

# Create a dictionary that counts each word in the list
tuples = [(word, words.count(word)) for word in word_set]
word_counter = dict(tuples)



In [7]: tuples
Out[7]: 
[('team', 2),
 ('link', 1),
 ('continue', 1),
 ('within', 1),
 ('that', 1),
 ('using', 1),
 ('user', 1),
 ('our', 2),
 ('hours', 1),
 ('next', 1),
 ('it', 1),
 ('the', 4),
 ('otherwise', 1),
 ('have', 1),
 ('be', 1),
 ('will', 1),
 ('24', 1),
 ('limit', 1),
 ('and', 1),
 ('your', 4),
 ('of', 1),
 ('account', 3),
 ('click', 1),
 ('mailbox', 1),
 ('dear', 1),
 ('you', 3),
 ('needs', 1),
 ('inform', 1),
 ('use', 1),
 ('on', 1),
 ('service', 2),
 ('verify', 2),
 ('storage', 1),
 ('are', 1),
 ('administration', 2),
 ('not', 1),
 ('below', 1),
 ('to', 4),
 ('please', 1),
 ('reaching', 1),
 ('possible', 1)]
 
 
 
 
 
 
 
 
 
 
 
 In [8]: word_counter
Out[8]: 
{'24': 1,
 'account': 3,
 'administration': 2,
 'and': 1,
 'are': 1,
 'be': 1,
 'below': 1,
 'click': 1,
 'continue': 1,
 'dear': 1,
 'have': 1,
 'hours': 1,
 'inform': 1,
 'it': 1,
 'limit': 1,
 'link': 1,
 'mailbox': 1,
 'needs': 1,
 'next': 1,
 'not': 1,
 'of': 1,
 'on': 1,
 'otherwise': 1,
 'our': 2,
 'please': 1,
 'possible': 1,
 'reaching': 1,
 'service': 2,
 'storage': 1,
 'team': 2,
 'that': 1,
 'the': 4,
 'to': 4,
 'use': 1,
 'user': 1,
 'using': 1,
 'verify': 2,
 'will': 1,
 'within': 1,
 'you': 3,
 'your': 4}
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Print words that appear in the word_counter more than once.
# Convert the text to lower case and create a word list
words = create_word_list(spam.lower())

# Create a set storing only unique words
word_set = set(words)

# Create a dictionary that counts each word in the list
tuples = [(word, words.count(word)) for word in word_set]
word_counter = dict(tuples)


# Printing words that appear more than once
for (key, value) in word_counter.items():
    if value > 1:
        print("{}: {}".format(key, value))
        


<script.py> output:
    team: 2
    our: 2
    the: 4
    your: 4
    account: 3
    you: 3
    service: 2
    verify: 2
    administration: 2
    to: 4


Great! You can observe that one of the most frequent words in the email are account, service, administration, and verify. This might be a security email making sure an unusual login attempt was made by the owner of the account... Or it can be a phishing email!

