Combining iterable objects
You are given the list wlist that contains lists of different words. Your task is to create a new list of tuples, where each tuple contains a list from the wlist, the length of this list, and the longest word within this list. If there is ambiguity in choosing the longest word, the word with the lowest index in the considered list should be taken into account.

wlist = [['Python', 'creativity', 'universe'], ['interview', 'study', 'job', 'university', 'lecture'], ['task', 'objective', 'aim', 'subject', 'programming', 'test', 'research']]






Define a function searching for the longest word given a list of words.
# Define a function searching for the longest word
def get_longest_word(words):
    longest_word = ''
    for word in words:
        if len(word)>len(longest_word):
            longest_word = word
    return longest_word







Create a list of list lengths and a list of the longest words in each list in wlist.
# Define a function searching for the longest word
def get_longest_word(words):
    longest_word = ''
    for word in words:
        if len(word) > len(longest_word):
            longest_word = word
    return longest_word

# Create lists with the lengths and longest words
# lengths = [len(item) for item in get_longest_word(wlist)]
# words = [item for item in get_longest_word(wlist)]
lengths = [len(item) for item in wlist]
words = [get_longest_word(item) for item in wlist]


In [4]: lengths
Out[4]: [3, 5, 7]

In [5]: words
Out[5]: ['creativity', 'university', 'programming']









Combine wlist, lengths, and words into one iterable object and print each element.
# Define a function searching for the longest word
def get_longest_word(words):
    longest_word = ''
    for word in words:
        if len(word) > len(longest_word):
            longest_word = word
    return longest_word

# Create lists with the lengths and longest words
lengths = [len(item) for item in wlist]
words = [get_longest_word(item) for item in wlist]

# Combine the resulting data into one iterable object
for item in zip(wlist, lengths, words):
    print(item)


<script.py> output:
    (['Python', 'creativity', 'universe'], 3, 'creativity')
    (['interview', 'study', 'job', 'university', 'lecture'], 5, 'university')
    (['task', 'objective', 'aim', 'subject', 'programming', 'test', 'research'], 7, 'programming')


Good job! Don't hesitate to play around with the zip object to fully understand its properties.

