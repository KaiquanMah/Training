enumerate()
Let's enumerate! Your task is, given a string, to define the function retrieve_character_indices() that creates a dictionary character_indices, where each key represents a unique character from the string and the corresponding value is a list containing the indices/positions of this letter in the string.
For example, passing the string 'ukulele' to the retrieve_character_indices() function should result in the following output: {'e': [4, 6], 'k': [1], 'l': [3, 5], 'u': [0, 2]}.
For this task, you are not allowed to use any string methods!


Define the for loop that iterates over the characters in the string and their indices.
Update the dictionary if the key already exists.
Update the dictionary if the key is absent.

def retrieve_character_indices(string):
    character_indices = dict()
    # Define the 'for' loop
    for index, character in enumerate(string):
        # Update the dictionary if the key already exists
        if character in character_indices:
            character_indices[character].append(index)
        # Update the dictionary if the key is absent
        else:
            character_indices[character] = [index]
            
    return character_indices
  
print(retrieve_character_indices('enumerate an Iterable'))



<script.py> output:
    {'e': [0, 4, 8, 15, 20], 
     'n': [1, 11], 
     'u': [2], 
     'm': [3], 
     'r': [5, 16], 
     'a': [6, 10, 17], 
     't': [7, 14], 
     ' ': [9, 12], 
     'I': [13], 
     'b': [18], 
     'l': [19]}


Very good! A little trick: actually, you can pass an integer value to the enumerate() initializer. In this case, it will start to count from that value.

