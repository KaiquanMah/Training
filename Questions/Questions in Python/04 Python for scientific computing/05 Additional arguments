Additional arguments
Let's use additional arguments in the .apply() method!

Your task is to create two new columns in scores:
mean is the row-wise mean value of the math score, reading score and writing score
rank defines how high the mean score is:
'high' if the mean value >90
'medium' if the mean value >60 but ≤ 90
'low' if the mean value ≤60


To accomplish this task, you'll need to define the function rank that, given a series, returns a list with two values: the mean of the series and a string defined by the aforementioned rule.
The module numpy is already imported for you as np.







Calculate the mean of the input series.
Return the mean and its rank as a list.
Insert the output of rank() into new columns of scores.

def rank(series):
    # Calculate the mean of the input series
    mean = series.mean()
    # Return the mean and its rank as a list
    if mean>90:
        return [mean, 'high']
    if (mean>60) and (mean<=90):
        return [mean, 'medium']
    return [mean, 'low']


# Insert the output of rank() into new columns of scores
cols = ['math score', 'reading score', 'writing score']
scores[['mean', 'rank']] = scores[cols].apply(rank, axis= 1, result_type='expand')
print(scores[['mean', 'rank']].head())



<script.py> output:
            mean    rank
    0  80.666667  medium
    1  48.666667     low
    2  47.666667     low
    3  91.666667    high
    4  82.333333  medium


Good job! The .apply() method is very useful when you need to create new columns in your DataFrame.


















In [12]: scores[['mean', 'rank']]
Out[12]: 
         mean    rank
0   80.666667  medium
1   48.666667     low
2   47.666667     low
3   91.666667    high
4   82.333333  medium
5   84.000000  medium
6   75.000000  medium
7   70.666667  medium
8   70.333333  medium
9   52.000000     low
10  63.000000  medium
11  62.000000  medium
12  47.666667     low
13  61.333333  medium
14  48.000000     low
15  78.666667  medium
16  71.000000  medium
17  55.000000     low
18  38.000000     low
19  63.333333  medium
20  96.333333    high
21  94.333333    high
22  50.666667     low
23  71.000000  medium
24  59.333333     low
25  58.666667     low
26  75.333333  medium
27  66.666667  medium
28  44.333333     low
29  69.333333  medium
..        ...     ...
70  75.000000  medium
71  74.000000  medium
72  86.666667  medium
73  64.666667  medium
74  55.000000     low
75  65.666667  medium
76  68.000000  medium
77  56.000000     low
78  72.666667  medium
79  72.666667  medium
80  67.666667  medium
81  70.333333  medium
82  75.333333  medium
83  63.333333  medium
84  61.666667  medium
85  74.666667  medium
86  66.333333  medium
87  68.666667  medium
88  64.666667  medium
89  53.666667     low
90  85.000000  medium
91  62.000000  medium
92  86.666667  medium
93  68.666667  medium
94  52.333333     low
95  78.666667  medium
96  66.333333  medium
97  81.333333  medium
98  58.000000     low
99  87.333333  medium

[100 rows x 2 columns]
