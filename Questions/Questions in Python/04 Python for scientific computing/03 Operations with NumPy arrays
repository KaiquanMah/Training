Operations with NumPy arrays
The following blocks of code create new lists given input lists input_list1, input_list2, input_list3 (you can check their values in the console). If you had analogous NumPy arrays with the same values input_array1, input_array2, input_array3 (you can check their values in the console), how would you create similar output as NumPy arrays using the knowledge on broadcasting, accessing element in NumPy arrays, and performing element-wise operations?

Block 1
list(map(lambda x: [5*i for i in x], input_list1))

Block 2
list(filter(lambda x: x % 2 == 0, input_list2))

Block 3
[[i*i for i in j] for j in input_list3]




Substitute the code in the block 1 given the input_array1.
# Substitute the code in the block 1 given the input_array1
output_array1 = 5*input_array1
print(list(map(lambda x: [5*i for i in x], input_list1)))
print(output_array1)

In [2]: input_list1
Out[2]: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

In [1]: input_array1
Out[1]: 
array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
       
       
       
<script.py> output:
    [[5, 10, 15], [20, 25, 30], [35, 40, 45]]

    [[ 5 10 15]
     [20 25 30]
     [35 40 45]]












Substitute the code in the block 2 given input_array2.
In [3]: input_list2
Out[3]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

In [4]: input_array2
Out[4]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

# Substitute the code in the block 2 given the input_array2
output_array2 = input_array2[input_array2%2 == 0]
print(list(filter(lambda x: x % 2 == 0, input_list2)))
print(output_array2)

<script.py> output:
    [0, 2, 4, 6, 8]
    
    [0 2 4 6 8]
    








Substitute the code in the block 3 given input_array3.
In [5]: input_list3
Out[5]: [[1, 2], [3, 4], [5, 6]]

In [6]: input_array3
Out[6]: 
array([[1, 2],
       [3, 4],
       [5, 6]])


# Substitute the code in the block 3 given the input_array3
output_array3 = input_array3**2
print([[i*i for i in j] for j in input_list3])
print(output_array3)

<script.py> output:
    [[1, 4], [9, 16], [25, 36]]

    [[ 1  4]
     [ 9 16]
     [25 36]]



Well done! Of course, decision to use a list or a NumPy array depends on a concrete task. As you can see, Python is very flexible for both scenarios. But if you need performance and scalability, then NumPy arrays is the choice!

