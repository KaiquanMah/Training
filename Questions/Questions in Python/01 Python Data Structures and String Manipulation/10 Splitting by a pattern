Splitting by a pattern
You are given the movies list where each element stores a movie name, its release date, and the director (e.g. "The Godfather, 1972, Francis Ford Coppola").
Let's practice some splitting with the help of regular expressions. Your task is to retrieve from each element of the list its name and the director. For example, if the element is "The Godfather, 1972, Francis Ford Coppola", the result would be:
['The Godfather', 'Francis Ford Coppola']

Eventually, this result should be modified to represent a single string, e.g.
"The Godfather, Francis Ford Coppola"



1984, 1984, Michael Radford
The Good, the Bad and the Ugly, 1966, Sergio Leone
Terminator 2: Judgment Day, 1991, James Cameron
Harry Potter and the Philosopher's Stone, 2001, Chris Columbus
Back to the Future, 1985, Robert Zemeckis
No Country for Old Men, 2007, Joel Coen, Ethan Coen




Compile a regular expression that splits strings in movies into a movie name and its director.
Retrieve a movie name and its director using re.split().
Create a new string with a movie name and its director separated by ,.
Append the resulting string to movies_without_year.

# Compile a regular expression
pattern = re.compile(r', \d+, ')

movies_without_year = []
for movie in movies:
    # Retrieve a movie name and its director
    split_result = re.split(pattern, movie)
    # Create a new string with a movie name and its director
    movie_without_year = ', '.join(split_result)
    # Append the resulting string to movies_without_year
    movies_without_year.append(movie_without_year)



In [20]: split_result
Out[20]: ['No Country for Old Men', 'Joel Coen, Ethan Coen']

In [23]: movies_without_year
Out[23]: ['No Country for Old Men, Joel Coen, Ethan Coen']


for movie in movies_without_year:
    print(movie)


<script.py> output:
    1984, Michael Radford
    The Good, the Bad and the Ugly, Sergio Leone
    Terminator 2: Judgment Day, James Cameron
    Harry Potter and the Philosopher's Stone, Chris Columbus
    Back to the Future, Robert Zemeckis
    No Country for Old Men, Joel Coen, Ethan Coen



Very good! Figuring out the right regular expression is often a challenging task. But now you can cope with them!

