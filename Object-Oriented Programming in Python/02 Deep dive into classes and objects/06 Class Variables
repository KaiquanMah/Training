Class Variables
We saw that we can specify different instance variables.
But, what if we want any instance of a class to hold the same value for a specific variable? Enter class variables.
Class variables must not be specified at the time of instantiation and instead, are declared/specified at the class definition phase.


Create a class called DataShell.
Declare a class variable called family and assign it the value of "DataShell".
Create an instance of DataShell called my_data_shell, passing x to the initializer method.
Print the my_data_shell.family to explore its contents.


# Create class: DataShell
class DataShell:
  
    # Declare a class variable family, and assign value of "DataShell"
    family = "DataShell"
    
    # Initialize class with self, identifier arguments
    def __init__(self, identifier):
      
        # Set identifier as instance variable of input argument
        self.identifier = identifier

# Declare variable x with value of 100
x = 100

# Instantiate DataShell passing x as argument: my_data_shell
my_data_shell = DataShell(x)

# Print my_data_shell class variable family
print(my_data_shell.family)


<script.py> output:
    DataShell
    
Awesome! Class variables are different from instance variables (which we saw earlier). Even though class variables may be overridden, they are generally set even before object instantiation; therefore, class variable values across instances of the same class tend to be the same.


    
