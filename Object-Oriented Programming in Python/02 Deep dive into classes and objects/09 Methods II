Methods II
In the previous exercise our print_static() method was kind of boring.
We can do more interesting things with our objects' methods. For example, we can interact with our objects' data. In this exercise we will declare a method that prints the value of one of our instance variables.


Create a class called DataShell with its initialization method, taking self and dataList as arguments. Declare data as an instance variable and assign it the value of dataList.
Define show() as a class method, taking self as an argument. Inside of the method print the instance variable data.
Declare a list called integer_list with integers 1 to 10. Then create an instance of DataShell called my_data_shell with integer_list as an argument to the constructor.
Call your object's show() method and explore its output.


# Create class: DataShell
class DataShell:
  
	# Initialize class with self and dataList as arguments
    def __init__(self, dataList):
      	# Set data as instance variable, and assign it the value of dataList
        self.data = dataList
        
        
	# Define class method which takes self argument: show
    def show(self):
        # Print the instance variable data
        print(self.data)



# Declare variable with list of integers from 1 to 10: integer_list   
integer_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        
# Instantiate DataShell taking integer_list as argument: my_data_shell
my_data_shell = DataShell(integer_list)

# Call the show method of your newly created object
my_data_shell.show()


<script.py> output:
    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

Outstanding! You accessed an instance variable from within your method, and were able to wrangle its data to output useful information! What other magic can be done with class and object internals?

