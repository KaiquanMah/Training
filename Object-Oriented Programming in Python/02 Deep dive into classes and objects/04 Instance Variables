Instance Variables
Class instances are useful in that we can store values in them at the time of instantiation. We store these values in instance variables. This means that we can have many instances of the same class whose instance variables hold different values!


Create a class called DataShell.
In the class definition, include the __init__() method, and pass it the self and integerInput arguments. In the body of the __init__() method, set the data as the instance variable.
Create an instance of DataShell called my_data_shell. Pass x as an argument to the constructor function.
Print the my_data_shell.data and explore its contents.


# Create class: DataShell
class DataShell:
  
	# Initialize class with self and integerInput arguments
    def __init__(self, integerInput):
      
		# Set data as instance variable, and assign the value of integerInput
        self.data = integerInput

# Declare variable x with value of 10
x = 10      

# Instantiate DataShell passing x as argument: my_data_shell
my_data_shell = DataShell(x)

# Print my_data_shell
print(my_data_shell.data)


<script.py> output:
    10

Great job declaring instance variables! Notice that instance variables live in the body of the initialization method, as they are initialized when the object is instantiated. Also important to notice that they are preceded by self., as this is referring to the instance itself.


