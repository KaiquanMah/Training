Overriding Class Variables
Sometimes our object instances have class variables whose values are not correct, and hence, not useful. For this reason it makes sense to modify our object's class variables.
In this exercise, we will do just that: override class variables with values of our own!


Create a class called DataShell.
Declare a class variable called family and assign it the value of "DataShell".
Create an instance of DataShell called my_data_shell passing x to the initializer method, then print the my_data_shell.family to explore its contents.
Override the class variable my_data_shell.family by assigning it the value "NotDataShell" to explore its contents.


# Create class: DataShell
class DataShell:
  
    # Declare a class variable family, and assign value of "DataShell"
    family = 'DataShell'
    
    # Initialize class with self, identifier arguments
    def __init__(self, identifier):
      
        # Set identifier as instance variables, assigning value of input arguments
        self.identifier = identifier



# Declare variable x with value of 100
x = 100

# Instantiate DataShell passing x as the argument: my_data_shell
my_data_shell = DataShell(x)

# Print my_data_shell class variable family
print(my_data_shell.family)

# Override the my_data_shell.family value with "NotDataShell"
my_data_shell.family = 'NotDataShell'

# Print my_data_shell class variable family once again
print(my_data_shell.family)



<script.py> output:
    DataShell
    NotDataShell

Great! Now you have learned how to override class variables. Does this look too different from changing the value of instance variables?

