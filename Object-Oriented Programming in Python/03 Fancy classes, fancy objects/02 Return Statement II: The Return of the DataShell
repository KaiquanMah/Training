Return Statement II: The Return of the DataShell
Let's now go back to the class DataShell that we were working with earlier, and refactor it such that it uses the return statement instead of the print() function.
Notice that since we are now using the return statement, we need to include our calls to object methods within the print() function.


Create a class called DataShell with its initialization method, taking self and dataList as arguments. Declare data as an instance variable and assign it the value of the input argument dataList.
Define show() as a class method, taking self as an argument. Inside of the method's body, return the instance variable data.
Define avg() as a class method, taking self as an argument. Inside of the method's body, declare the variable avg and assign it the value of the average of the instance variable data. Then return avg.
Instantiate DataShell as my_data_shell passing integer_list as an argument to the constructor. Then print the output of your object's show() and avg() methods.

# Create class: DataShell
class DataShell:
  
	# Initialize class with self and dataList as arguments
    def __init__(self, dataList):
      	# Set data as instance variable, and assign it the value of dataList
        self.data = dataList
        
	# Define method that returns data: show
    def show(self):
        return self.data
        
    # Define method that prints average of data: avg 
    def avg(self):
        # Declare avg and assign it the average of data
        avg = sum(self.data)/float(len(self.data))
        # Return avg
        return avg
        
# Instantiate DataShell taking integer_list as argument: my_data_shell
my_data_shell = DataShell(integer_list)

# Print output of your object's show method
print(my_data_shell.show())

# Print output of your object's avg method
print(my_data_shell.avg())



<script.py> output:
    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    5.5

Awesome! We saw the return statement earlier in our functions exercise and similarly, the return statement is very useful when writing methods for our classes and methods. Think of it as a way to enable objects to talk to other objects, as they are able to return useful information when called.

