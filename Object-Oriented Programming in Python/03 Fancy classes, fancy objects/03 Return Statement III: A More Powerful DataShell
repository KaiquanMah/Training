Return Statement III: A More Powerful DataShell
In this exercise our DataShell class will evolve from simply consuming lists to consuming CSV files so that we can do more sophisticated things.
For this, we will employ the return statement once again. Additionally, we will leverage some neat functionality from both the numpy and pandas packages.


Import the numpy and pandas packages as np and pd, respectively.
Create a class called DataShell with its initialization method, taking self and inputFile as arguments. Declare file as an instance variable and assign to it the value of the input argument inputFile.
Define a method called generate_csv(), taking self as argument. In the body of this method, declare an instance variable called data_as_csv and assign it to the value of pd.read_csv(self.file). Finally, have generate_csv() return the value of data_as_csv.
Instantiate DataShell as data_shell passing us_life_expectancy as an argument to the constructor. Declare a variable called df and assign to it the value of data_shell.generate_csv(). Finally, print the value of df.

# Load numpy as np and pandas as pd
import numpy as np
import pandas as pd

# Create class: DataShell
class DataShell:
  
    # Initialize class with self and inputFile
    def __init__(self, inputFile):
        self.file = inputFile
        
    # Define generate_csv method, with self argument
    def generate_csv(self):
        self.data_as_csv = pd.read_csv(self.file)
        return self.data_as_csv


# Instantiate DataShell with us_life_expectancy as input argument
data_shell = DataShell(us_life_expectancy)

# Call data_shell's generate_csv method, assign it to df
df = data_shell.generate_csv()


In [2]: data_shell
Out[2]: <__main__.DataShell at 0x7fe35069f320>



# Print df
print(df)


<script.py> output:
               country code  year  life_expectancy
    0    United States  USA  1880        39.410000
    1    United States  USA  1890        45.209999
    2    United States  USA  1901        49.299999
    3    United States  USA  1902        50.500000
...
    [117 rows x 4 columns]

Great! Now you are starting to build classes with more sophisticated functionality!

