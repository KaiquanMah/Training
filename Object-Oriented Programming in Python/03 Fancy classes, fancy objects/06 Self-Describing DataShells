Self-Describing DataShells
In this exercise you will add functionality to your DataShell class such that it returns information about itself.
numpy and pandas are already imported in your workspace as np and pd, respectively.


Create class DataShell, with initialization method, taking self and filepath as arguments. Set filepath and data_as_csv as instance variables.
Create a method rename_column (this is already done for you). Create a second method, get_stats, which takes self as argument, and returns self.data_as_csv.describe().
Instantiate DataShell as us_data_shell, taking us_life_expectancy as input to the constructor.
Print the output of your object's get_stats() method.



# Create class DataShell
class DataShell:

    # Define initialization method
    def __init__(self, filepath):
        self.filepath = filepath
        self.data_as_csv = pd.read_csv(filepath)

    # Define method rename_column, with arguments self, column_name, and new_column_name
    def rename_column(self, column_name, new_column_name):
        self.data_as_csv.columns = self.data_as_csv.columns.str.replace(column_name, new_column_name)
        
    # Define get_stats method, with argument self
    def get_stats(self):
        # Return a description data_as_csv
        return self.data_as_csv.describe()
    

# Instantiate DataShell as us_data_shell
us_data_shell = DataShell(us_life_expectancy)

# Print the output of your objects get_stats method
print(us_data_shell.get_stats())



<script.py> output:
                  year  life_expectancy
    count   117.000000       117.000000
    mean   1956.752137        66.556684
    std      34.398252         9.551079
    min    1880.000000        39.410000
    25%    1928.000000        58.500000
    50%    1957.000000        69.599998
    75%    1986.000000        74.772003
    max    2015.000000        79.244003


Great! Not only does your DataShell class store data, it can also modify it, and output information about it! What other kinds of data could you store? And what other procedures could you execute on such data?


