Counting bad weather conditions
The weather DataFrame contains 20 columns that start with 'WT', each of which represents a bad weather condition. For example:
WT05 indicates "Hail"
WT11 indicates "High or damaging winds"
WT17 indicates "Freezing rain"

For every row in the dataset, each WT column contains either a 1 (meaning the condition was present that day) or NaN (meaning the condition was not present).
In this exercise, you'll quantify "how bad" the weather was each day by counting the number of 1 values in each row.


Copy the columns WT01 through WT22 from weather to a new DataFrame named WT.
Calculate the sum of each row in WT, and store the results in a new weather column named bad_conditions.
Replace any missing values in bad_conditions with a 0. (This has been done for you.)
Create a histogram to visualize bad_conditions, and then display the plot.

# Copy 'WT01' through 'WT22' to a new DataFrame
WT = weather.loc[:, 'WT01':'WT22']

# Calculate the sum of each row in 'WT'
weather['bad_conditions'] = WT.sum(axis='columns')

# Replace missing values in 'bad_conditions' with '0'
weather['bad_conditions'] = weather.bad_conditions.fillna(0).astype('int')

# Create a histogram to visualize 'bad_conditions'
weather.bad_conditions.plot(kind='hist')

# Display the plot
plt.show()
Excellent work! It looks like many days didn't have any bad weather conditions, and only a small portion of days had more than four bad weather conditions.










Rating the weather conditions
In the previous exercise, you counted the number of bad weather conditions each day. In this exercise, you'll use the counts to create a rating system for the weather.


The counts range from 0 to 9, and should be converted to ratings as follows:
Convert 0 to 'good'
Convert 1 through 4 to 'bad'
Convert 5 through 9 to 'worse'

Count the unique values in the bad_conditions column and sort the index. (This has been done for you.)
Create a dictionary called mapping that maps the bad_conditions integers to strings as specified above.
Convert the bad_conditions integers to strings using the mapping and store the results in a new column called rating.
Count the unique values in rating to verify that the integers were properly converted to strings.

# Count the unique values in 'bad_conditions' and sort the index
print(weather.bad_conditions.value_counts().sort_index())
<script.py> output:
    0    1749
    1     613
    2     367
    3     380
    4     476
    5     282
    6     101
    7      41
    8       4
    9       4
    Name: bad_conditions, dtype: int64


# Create a dictionary that maps integers to strings
mapping = {0:'good', 
           1:'bad', 
           2:'bad', 
           3:'bad',
           4:'bad',
           5:'worse',
           6:'worse',
           7:'worse',
           8:'worse',
           9:'worse'
           }

# Convert the 'bad_conditions' integers to strings using the 'mapping'
weather['rating'] = weather.bad_conditions.map(mapping)

# Count the unique values in 'rating'
print(weather.rating.value_counts())
<script.py> output:
    bad      1836
    good     1749
    worse     432
    Name: rating, dtype: int64

Nice job! This rating system should make the weather condition data easier to understand.















Changing the data type to category
Since the rating column only has a few possible values, you'll change its data type to category in order to store the data more efficiently. You'll also specify a logical order for the categories, which will be useful for future exercises.


Create a list object called cats that lists the weather ratings in a logical order: 'good', 'bad', 'worse'.
Change the data type of the rating column from object to category. Make sure to use the cats list to define the category ordering.
Examine the head of the rating column to confirm that the categories are logically ordered.

# Create a list of weather ratings in logical order
cats=['good', 'bad', 'worse']

# Change the data type of 'rating' to category
weather['rating'] = weather.rating.astype('category', 
                                          ordered=True, 
                                          categories=cats)

# Examine the head of 'rating'
print(weather.rating.head())

<script.py> output:
    0    bad
    1    bad
    2    bad
    3    bad
    4    bad
    Name: rating, dtype: category
    Categories (3, object): [good < bad < worse]
    
Excellent! You'll use the rating column in future exercises to analyze the effects of weather on police behavior.


