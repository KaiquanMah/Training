Finding an incorrect data type
The dtypes attribute of the ri DataFrame has been printed for you. Your task is to explore the ri DataFrame in the IPython Shell to determine which column's data type should be changed.

stop_date             object
stop_time             object
driver_gender         object
driver_race           object
violation_raw         object
violation             object
search_conducted        bool
search_type           object
stop_outcome          object
is_arrested           object
stop_duration         object
drugs_related_stop      bool
district              object
dtype: object

stop_time should have a data type of float
search_conducted should have a data type of object
district should have a data type of int

#yes is_arrested should have a data type of bool







Fixing a data type
We saw in the previous exercise that the is_arrested column currently has the object data type. In this exercise, we'll change the data type to bool, which is the most suitable type for a column containing True and False values.
Fixing the data type will enable us to use mathematical operations on the is_arrested column that would not be possible otherwise.

Examine the head of the is_arrested column to verify that it contains True and False values and to check the column's data type.
Use the .astype() method to convert is_arrested to a bool column.
Check the new data type of is_arrested to confirm that it is now a bool column.

# Examine the head of the 'is_arrested' column
print(ri.is_arrested.head())
<script.py> output:
    0    False
    1    False
    2    False
    3     True
    4    False
    Name: is_arrested, dtype: object
    
# Change the data type of 'is_arrested' to 'bool'
ri['is_arrested'] = ri.is_arrested.astype('bool')

# Check the data type of 'is_arrested' 
print(ri.is_arrested.dtype)
<script.py> output:
    bool

Great! It's best to fix these data type problems early, before you begin your analysis.


