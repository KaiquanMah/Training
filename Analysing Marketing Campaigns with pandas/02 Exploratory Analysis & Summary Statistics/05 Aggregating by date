Aggregating by date
The marketing team wants to know whether there is any difference in the conversion rate based on when in the month, your users saw an ad. In this exercise, you will practice .groupby() again, this time looking at how metrics have evolved.


Group the marketing DataFrame by date_served and count the number of unique users per day.
Isolate converted users in marketing while grouping by date_served and counting the number of unique converted users per day.

# Group by date_served and count unique users
total = marketing.groupby('date_served')['user_id'].nunique()

# Group by date_served and count unique converted users
subscribers = marketing[marketing['converted'] == True].groupby('date_served')['user_id'].nunique()

# Calculate the conversion rate per day
daily_conversion_rate = subscribers/total
print(daily_conversion_rate)

<script.py> output:
    date_served
    2018-01-01    0.099448
    2018-01-02    0.098930
    2018-01-03    0.103448
    2018-01-04    0.108359
    2018-01-05    0.125392
    2018-01-06    0.113636
    2018-01-07    0.141818
    2018-01-08    0.115385
    2018-01-09    0.125000
    2018-01-10    0.118694
    2018-01-11    0.080645
    2018-01-12    0.076412
    2018-01-13    0.084967
    2018-01-14    0.085246
    2018-01-15    0.113429
    2018-01-16    0.255155
    2018-01-17    0.219512
    2018-01-18    0.091195
    2018-01-19    0.059016
    2018-01-20    0.067524
    2018-01-21    0.087336
    2018-01-22    0.123596
    2018-01-23    0.122093
    2018-01-24    0.115789
    2018-01-25    0.125000
    2018-01-26    0.090090
    2018-01-27    0.065625
    2018-01-28    0.062500
    2018-01-29    0.059561
    2018-01-30    0.066246
    2018-01-31    0.052941
    Name: user_id, dtype: float64
    
