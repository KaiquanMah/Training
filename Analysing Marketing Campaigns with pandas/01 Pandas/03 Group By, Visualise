Daily marketing reach by channel
In this exercise, you'll determine how many users are seeing the marketing assets each day. This is crucial to understand how effective our marketing efforts have been over the past month.
You'll use .groupby() and .nunique() to calculate daily users.

Group the marketing DataFrame by 'date_served' and count the number of unique user IDs.
In [1]: marketing.groupby(['date_served'])
Out[1]: <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f172b998898>

In [2]: marketing.groupby(['date_served'])['user_id']
Out[2]: <pandas.core.groupby.generic.SeriesGroupBy object at 0x7f172b998f60>

In [3]: marketing.groupby(['date_served']).nunique()
Out[3]: 
             user_id  date_served  marketing_channel  variant  converted  ...  subscribing_channel  is_retained  DoW  channel_code  is_correct_lang
date_served                                                               ...                                                                      
2018-01-01       362            1                  5        2          2  ...                    5            2    7             5                2
2018-01-02       374            1                  5        2          2  ...                    5            2    7             5                2
2018-01-03       348            1                  5        2          2  ...                    5            2    7             5                2
2018-01-04       323            1                  5        2          2  ...                    5            2    7             5                1
2018-01-05       319            1                  5        2          2  ...                    5            2    7             5                1
2018-01-06       308            1                  5        2          2  ...                    5            2    5             5                2
2018-01-07       275            1                  5        2          2  ...                    5            2    6             5                2
2018-01-08       312            1                  5        2          2  ...                    5            2    7             5                1
2018-01-09       312            1                  5        2          2  ...                    5            2    7             5                1
2018-01-10       337            1                  5        2          2  ...                    5            2    7             5                2
2018-01-11       310            1                  5        2          2  ...                    5            2    7             5                2
2018-01-12       301            1                  5        2          2  ...                    5            2    7             5                2
2018-01-13       306            1                  5        2          2  ...                    5            2    6             5                2
2018-01-14       305            1                  5        2          2  ...                    5            2    5             5                2
2018-01-15       767            1                  5        2          2  ...                    5            2    7             5                2
2018-01-16       388            1                  5        2          2  ...                    5            2    5             5                2
2018-01-17       369            1                  5        2          2  ...                    5            2    3             5                2
2018-01-18       318            1                  5        2          2  ...                    5            2    3             5                2
2018-01-19       305            1                  5        2          2  ...                    5            2    4             5                2
2018-01-20       311            1                  5        2          2  ...                    5            2    7             5                2
2018-01-21       229            1                  5        2          2  ...                    5            2    6             5                2
2018-01-22       178            1                  5        2          2  ...                    5            2    7             5                2
2018-01-23       172            1                  5        2          2  ...                    5            2    6             5                2
2018-01-24       190            1                  5        2          2  ...                    5            2    7             5                2
2018-01-25       184            1                  5        2          2  ...                    5            2    4             5                2
2018-01-26       222            1                  5        2          2  ...                    5            2    7             5                2
2018-01-27       320            1                  5        2          2  ...                    5            2    7             5                2
2018-01-28       320            1                  5        2          2  ...                    5            2    7             5                2
2018-01-29       319            1                  5        2          2  ...                    5            2    4             5                2
2018-01-30       317            1                  5        2          2  ...                    5            2    7             5                2
2018-01-31       340            1                  5        2          2  ...                    5            2    7             5                2

[31 rows x 15 columns]





In [5]: daily_users
Out[5]: 
date_served
2018-01-01    362
2018-01-02    374
2018-01-03    348
2018-01-04    323
2018-01-05    319
2018-01-06    308
2018-01-07    275
2018-01-08    312
2018-01-09    312
2018-01-10    337
2018-01-11    310
2018-01-12    301
2018-01-13    306
2018-01-14    305
2018-01-15    767
2018-01-16    388
2018-01-17    369
2018-01-18    318
2018-01-19    305
2018-01-20    311
2018-01-21    229
2018-01-22    178
2018-01-23    172
2018-01-24    190
2018-01-25    184
2018-01-26    222
2018-01-27    320
2018-01-28    320
2018-01-29    319
2018-01-30    317
2018-01-31    340
Name: user_id, dtype: int64






# Group by date_served and count number of unique user_id's
daily_users = marketing.groupby(['date_served'])['user_id'].nunique()

# Print head of daily_users
print(daily_users.head())

<script.py> output:
    date_served
    2018-01-01    362
    2018-01-02    374
    2018-01-03    348
    2018-01-04    323
    2018-01-05    319
    Name: user_id, dtype: int64

The groupby statement enabled you to see how many users saw marketing assets each day. Now let's visualize the results




















Visualizing daily marketing reach
In the previous exercise, you created a daily_subscribers DataFrame, which contained the number of users who subscribed each day. While this was a great first step, it is challenging to interpret daily trends by looking at a table. To make it easier for you and your business stakeholders to notice subscriber trends, you will visualize your results using a line plot.


Use the .plot() method to visualize the results of date_served.
Add the title 'Daily users' and the y-axis label 'Number of users'.
Rotate the x-axis labels by 45 degrees.
Display the plot.


# Plot daily_subscribers
daily_users.plot()

# Include a title and y-axis label
plt.title('Daily users')
plt.ylabel('Number of users')

# Rotate the x-axis labels by 45 degrees
plt.xticks(rotation=45)

# Display the plot
plt.show()

Perfect. Much like in daily users who view marketing assets, there's a large peak around the time when an email blast goes out. We will explore this further in future lessons.


