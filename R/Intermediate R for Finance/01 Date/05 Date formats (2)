Not only can you convert characters to dates, but you can convert objects that are already dates to differently formatted dates using format():
https://www.rdocumentation.org/packages/base/versions/3.3.2/topics/format

# The best point move in stock market history. A +936 point change in the Dow!
best_date
[1] "2008-10-13"

format(best_date, format = "%Y/%m/%d")
[1] "2008/10/13"

format(best_date, format = "%B %d, %Y")
[1] "October 10, 2008"
As a reminder, here are the formats:

%Y: 4-digit year (1982)
%y: 2-digit year (82)
%m: 2-digit month (01)
%d: 2-digit day of the month (13)
%A: weekday (Wednesday)
%a: abbreviated weekday (Wed)
%B: month (January)
%b: abbreviated month (Jan)



The vector char_dates has been created for you
Create the vector dates from char_date. Specify the format so R reads them correctly.
Modify dates using format() so that each date looks like "Jan 04, 17".
Modify dates using format() so that each date looks like "01,04,2017".


# char_dates
char_dates <- c("1jan17", "2jan17", "3jan17", "4jan17", "5jan17")

# Create dates using as.Date() and the correct format 
dates <- as.Date(char_dates, format = "%d %b %y")

>class(dates)
[1] "Date"



# Use format() to go from "2017-01-04" -> "Jan 04, 17"
format(dates, format = "%b %d, %y")
[1] "Jan 01, 17" "Jan 02, 17" "Jan 03, 17" "Jan 04, 17" "Jan 05, 17"

# Use format() to go from "2017-01-04" -> "01,04,2017"
format(dates, format = "%m,%d,%Y")
[1] "01,01,2017" "01,02,2017" "01,03,2017" "01,04,2017" "01,05,2017"



