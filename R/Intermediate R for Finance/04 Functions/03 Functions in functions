To write clean code, sometimes it is useful to use functions inside of other functions. This let's you use the result of one function directly in another one, without having to create an intermediate variable. You have actually already seen an example of this with print() and paste().

company <- c("Goldman Sachs", "J.P. Morgan", "Fidelity Investments")

for(i in 1:3) {
    print(paste("A large financial institution is", company[i]))
}
[1] "A large financial institution is Goldman Sachs"
[1] "A large financial institution is J.P. Morgan"
[1] "A large financial institution is Fidelity Investments"
paste() strings together the character vectors, and print() prints it to the console.

The exercise below explores simplifying the calculation of the correlation matrix using nested functions.





3 vectors of stock prices are in your workspace.
First, cbind() them together in the order of apple, ibm, micr. Save this as stocks.
Then, use cor() on stocks.
Now, let's see how this would work all at once. Use cbind() inside of cor() with the 3 stock vectors in the same order as above to create the correlation matrix.



# cbind() the stocks
stocks <- cbind(apple, ibm, micr)

>cbind(apple, ibm, micr)
       apple    ibm  micr
 [1,] 109.49 159.82 59.20
 [2,] 109.90 160.02 59.25
 [3,] 109.11 159.84 60.22
 [4,] 109.95 160.35 59.95
 [5,] 111.03 164.79 61.37
 [6,] 112.12 165.36 61.01
 [7,] 113.95 166.52 61.97
 [8,] 113.30 165.50 62.17
 [9,] 115.19 168.29 62.98
[10,] 115.19 168.51 62.68
[11,] 115.82 168.02 62.58
[12,] 115.97 166.73 62.30
[13,] 116.64 166.68 63.62
[14,] 116.95 167.60 63.54
[15,] 117.06 167.33 63.54
[16,] 116.29 167.06 63.55
[17,] 116.52 166.71 63.24
[18,] 117.26 167.14 63.28
[19,] 116.76 166.19 62.99
[20,] 116.73 166.60 62.90
[21,] 115.82 165.99 62.14










# cor() to create the correlation matrix
cor(stocks)
          apple       ibm      micr
apple 1.0000000 0.8872467 0.9477010
ibm   0.8872467 1.0000000 0.9126597
micr  0.9477010 0.9126597 1.0000000


# All at once! Nest cbind() inside of cor()
cor(cbind(apple, ibm, micr))
          apple       ibm      micr
apple 1.0000000 0.8872467 0.9477010
ibm   0.8872467 1.0000000 0.9126597
micr  0.9477010 0.9126597 1.0000000
