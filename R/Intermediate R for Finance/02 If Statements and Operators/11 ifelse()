A powerful function to know about is ifelse(). It creates an if statement in 1 line of code, and more than that, it works on entire vectors!

Suppose you have a vector of stock prices. What if you want to return "Buy!" each time apple > 110, and "Do nothing!", otherwise? A simple if statement would not be enough to solve this problem. However, with ifelse() you can do:

apple
[1] 109.49 109.90 109.11 109.95 111.03 112.12

ifelse(test = apple > 110, yes = "Buy!", no = "Do nothing!")
[1] "Do nothing!" "Do nothing!" "Do nothing!" "Do nothing!" "Buy!"       
[6] "Buy!"
ifelse() evaluates the test to get a logical vector, and where the logical vector is TRUE it replaces TRUE with whatever is in yes. Similarly, FALSE is replaced by no.




stocks is in your workspace.
Use ifelse() to test if micr is above 60 but below 62. When true, return a 1 and when false return a 0. Add the result to stocks as the column, micr_buy.
Use ifelse() to test if apple is greater than 117. The returned value should be the date column if TRUE, and NA otherwise.
Print stocks. date became a numeric! ifelse() strips the date of its attribute before returning it, so it becomes a numeric.
Assigning the apple_date column the class() of "Date".
Print stocks again.



# Microsoft test
stocks$micr_buy <- ifelse(test = stocks$micr > 60 & stocks$micr < 62, yes = 1, no = 0)
# Apple test
stocks$apple_date <- ifelse(test = stocks$apple > 117, yes = stocks$date, no = NA)


# Print stocks
stocks
         date  apple  micr micr_buy apple_date
1  2016-12-01 109.49 59.20        0         NA
2  2016-12-02 109.90 59.25        0         NA
5  2016-12-05 109.11 60.22        1         NA
6  2016-12-06 109.95 59.95        0         NA
7  2016-12-07 111.03 61.37        1         NA
8  2016-12-08 112.12 61.01        1         NA
9  2016-12-09 113.95 61.97        1         NA
12 2016-12-12 113.30 62.17        0         NA
13 2016-12-13 115.19 62.98        0         NA
14 2016-12-14 115.19 62.68        0         NA
15 2016-12-15 115.82 62.58        0         NA
16 2016-12-16 115.97 62.30        0         NA
19 2016-12-19 116.64 63.62        0         NA
20 2016-12-20 116.95 63.54        0         NA
21 2016-12-21 117.06 63.54        0      17156
22 2016-12-22 116.29 63.55        0         NA
23 2016-12-23 116.52 63.24        0         NA
26 2016-12-27 117.26 63.28        0      17162
27 2016-12-28 116.76 62.99        0         NA
28 2016-12-29 116.73 62.90        0         NA
29 2016-12-30 115.82 62.14        0         NA






# Change the class() of apple_date.
class(stocks$apple_date) <- "Date"





# Print stocks again
stocks
         date  apple  micr micr_buy apple_date
1  2016-12-01 109.49 59.20        0       <NA>
2  2016-12-02 109.90 59.25        0       <NA>
5  2016-12-05 109.11 60.22        1       <NA>
6  2016-12-06 109.95 59.95        0       <NA>
7  2016-12-07 111.03 61.37        1       <NA>
8  2016-12-08 112.12 61.01        1       <NA>
9  2016-12-09 113.95 61.97        1       <NA>
12 2016-12-12 113.30 62.17        0       <NA>
13 2016-12-13 115.19 62.98        0       <NA>
14 2016-12-14 115.19 62.68        0       <NA>
15 2016-12-15 115.82 62.58        0       <NA>
16 2016-12-16 115.97 62.30        0       <NA>
19 2016-12-19 116.64 63.62        0       <NA>
20 2016-12-20 116.95 63.54        0       <NA>
21 2016-12-21 117.06 63.54        0 2016-12-21
22 2016-12-22 116.29 63.55        0       <NA>
23 2016-12-23 116.52 63.24        0       <NA>
26 2016-12-27 117.26 63.28        0 2016-12-27
27 2016-12-28 116.76 62.99        0       <NA>
28 2016-12-29 116.73 62.90        0       <NA>
29 2016-12-30 115.82 62.14        0       <NA>


