AFINN: I'm your Huckleberry
Now we transition to the AFINN lexicon. The AFINN lexicon has numeric values from 5 to -5, not just positive or negative. Unlike the Bing lexicon's sentiment, the AFINN lexicon's sentiment score column is called value.

As before, you apply inner_join() then count(). Next, to sum the scores of each line, we use dplyr's group_by() and summarize() functions. The group_by() function takes an existing data frame and converts it into a grouped data frame where operations are performed "by group". Then, the summarize() function lets you calculate a value for each group in your data frame using a function that aggregates data, like sum() or mean(). So, in our case we can do something like
data_frame %>% 
    group_by(book_line) %>% 
    summarize(total_score = sum(book_line))


In the tidy version of Huckleberry Finn, line 9703 contains words "best", "ever", "fun", "life" and "spirit". "best" and "fun" have AFINN scores of 3 and 4 respectively. After aggregating, line 9703 will have a total score of 7.
In the tidyverse, filter() is preferred to subset() because it combines the functionality of subset() with simpler syntax. Here is an example that filter()s data_frame where some value in column1 is equal to 24. Notice the column name is not in quotes.
filter(data_frame, column1 == 24)

The afinn object contains the AFINN lexicon. The huck object is a tidy version of Mark Twain's Adventures of Huckleberry Finn for analysis.
Line 5400 is All the loafers looked glad; I reckoned they was used to having fun out of Boggs. Stopwords and punctuation have already been removed in the dataset.





Run the code to look at line 5400, and see the sentiment scores of some words.
inner_join() huck to the afinn lexicon.
Remember huck is already piped into the function so just add the lexicon.
Join by the term column in the text and the word column in the lexicon.
Use count() with value and line to tally/count observations by group.
Assign the result to huck_afinn.


# See abbreviated line 5400
huck %>% filter(line == 5400)
> huck %>% filter(line == 5400)
# A tibble: 7 x 3
  term     count  line
  <chr>    <dbl> <dbl>
1 all          1  5400
2 fun          1  5400
3 glad         1  5400
4 loafers      1  5400
5 looked       1  5400
6 reckoned     1  5400
7 used         1  5400



> afinn
# A tibble: 2,477 x 2
   word       value
   <chr>      <dbl>
 1 abandon       -2
 2 abandoned     -2
 3 abandons      -2
 4 abducted      -2
 5 abduction     -2
 6 abductions    -2
 7 abhor         -3
 8 abhorred      -3
 9 abhorrent     -3
10 abhors        -3
# ... with 2,467 more rows



# What are the scores of the sentiment words?
afinn %>% filter(word %in% c("fun", "glad"))
# A tibble: 2 x 2
  word  value
  <chr> <dbl>
1 fun       4
2 glad      3











#before counting
> huck_afinn <- huck %>% 
    # Inner Join to AFINN lexicon
    inner_join(afinn, by = c("term" = "word"))
> huck_afinn
# A tibble: 4,849 x 4
   term       count  line value
   <chr>      <dbl> <dbl> <dbl>
 1 adventures     1    11     2
 2 matter         1    11     1
 3 lied           1    14    -2
 4 true           1    17     2
 5 hid            1    20    -1
 6 rich           1    20     2
 7 awful          1    21    -3
 8 interest       1    23     1
 9 dismal         1    26    -2
10 free           1    29     1
# ... with 4,839 more rows


#after counting
> huck_afinn <- huck %>% 
    # Inner Join to AFINN lexicon
    inner_join(afinn, by = c("term" = "word")) %>%
    # Count by value and line
    count(value, line)
> huck_afinn
# A tibble: 4,597 x 3
   value  line     n
   <dbl> <dbl> <int>
 1    -5   131     1
 2    -5   192     1
 3    -5   197     1
 4    -5   603     1
 5    -5   965     1
 6    -5   976     1
 7    -5   980     1
 8    -5   985     1
 9    -5   989     1
10    -5   994     1
# ... with 4,587 more rows


















Get the total sentiment score by line forwarding huck_afinn to group_by() and passing line without quotes.
Create huck_afinn_agg using summarize(), setting total_value equal to the sum() of value * n.
Use filter() on huck_afinn_agg and line == 5400 to review a single line.

# From previous step
huck_afinn <- huck %>% 
  inner_join(afinn, by = c("term" = "word")) %>%
  count(value, line)
  
huck_afinn_agg <- huck_afinn %>% 
  # Group by line
  group_by(line) %>%
  # Sum values times n (by line)
  # i.e. sentiment value X count
  summarise(total_value = sum(value * n))
# A tibble: 3,701 x 2
    line total_value
   <dbl>       <dbl>
 1    11           3
 2    14          -2
 3    17           2
 4    20           1
 5    21          -3
 6    23           1
 7    26          -2
 8    29           3
 9    30           1
10    33          -7
# ... with 3,691 more rows




huck_afinn_agg %>% 
  # Filter for line 5400
  filter(line == 5400)
# A tibble: 1 x 2
   line total_value
  <dbl>       <dbl>
1  5400           7  
  
  


















Create a sentiment timeline. Pass huck_afinn_agg to the data argument of ggplot().
Then specify the x and y within aes() as line and total_value without quotes.
Add a layer with geom_smooth().

# Plot total_value vs. line
ggplot(huck_afinn_agg, aes(x = line, y = total_value)) + 
  # Add a smooth trend curve
  geom_smooth() 
  
  

Huckleberry Finn has a not-quite-a-happy-ending.

