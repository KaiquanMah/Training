Real insight?
You are given a stack of 10 employee surveys and told to figure out the team's sentiment. The two question survey has 1 question with a numeric scale (1-10) where employees answer how inspired they are at work and a second question for free form text.
You are asked to perform a sentiment analysis on the free form text. Would performing sentiment analysis on the text be appropriate?

# No, the free form text will correlate with the ratings and with only 10 surveys the results may have selection and simultaneity bias.
Therefore sentiment anlaysis here is unlikely to tell you much that you don't know already from the numeric scores.




Unhappy ending? Chronological polarity
Sometimes you want to track sentiment over time. For example, during an ad campaign you could track brand sentiment to see the campaign's effect. You saw a few examples of this at the end of the last chapter.
In this exercise you'll recap the workflow for exploring sentiment over time using the novel Moby Dick. One should expect that happy moments in the book would have more positive words than negative. Conversely dark moments and sad endings should use more negative language. You'll also see some tricks to make your sentiment time series more visually appealing.

Recall that the workflow is:
Inner join the text to the lexicon by word.
Count the sentiments by line.
Reshape the data so each sentiment has its own column.
(Depending upon the lexicon) Calculate the polarity as positive score minus negative score.
Draw the polarity time series.

This exercise should look familiar: it extends Bing tidy polarity: Call me Ishmael (with ggplot2)!.




inner_join() the pre-loaded tidy version of Moby Dick, moby, to the bing lexicon.
Join by the "term" column in the text and the "word" column in the lexicon.
Count by sentiment and index.
Reshape so that each sentiment has its own column using spread() with the column sentiment and the counts column called n.
Also specify fill = 0 to fill out missing values with a zero.
Using mutate() add two columns: polarity and line_number.
Set polarity equal to the positive score minus the negative score.
Set line_number equal to the row number using the row_number() function.

> moby
# A tibble: 105,245 x 3
   term      count index
   <chr>     <dbl> <dbl>
 1 chapter       1     2
 2 loomings      1     2
 3 agonever      1     5
 4 call          1     5
 5 ishmael       1     5
 6 long          1     5
 7 mind          1     5
 8 precisely     1     5
 9 years         1     5
10 interest      1     6
# ... with 105,235 more rows

> bing
# A tibble: 6,786 x 2
   word        sentiment
   <chr>       <chr>    
 1 2-faces     negative 
 2 abnormal    negative 
 3 abolish     negative 
 4 abominable  negative 
 5 abominably  negative 
 6 abominate   negative 
 7 abomination negative 
 8 abort       negative 
 9 aborted     negative 
10 aborts      negative 
# ... with 6,776 more rows

> moby_polarity <- moby %>%
    # Inner join to the lexicon
    inner_join(bing, by = c("term" = "word")) %>%
    # Count by sentiment, index
    count(sentiment, index)
> moby_polarity
# A tibble: 10,609 x 3
   sentiment index     n
   <chr>     <dbl> <int>
 1 negative      9     1
 2 negative     11     1
 3 negative     22     1
 4 negative     41     1
 5 negative     42     2
 6 negative     44     1
 7 negative     56     1
 8 negative     64     1
 9 negative     66     1
10 negative     68     1
# ... with 10,599 more rows


> moby_polarity <- moby %>%
    # Inner join to the lexicon
    inner_join(bing, by = c("term" = "word")) %>%
    # Count by sentiment, index
    count(sentiment, index) %>%
    # Spread sentiments
    spread(sentiment, n, fill=0)
> moby_polarity
# A tibble: 9,234 x 3
   index negative positive
   <dbl>    <dbl>    <dbl>
 1     5        0        1
 2     9        1        0
 3    11        1        0
 4    13        0        1
 5    17        0        1
 6    19        0        1
 7    22        1        0
 8    24        0        1
 9    25        0        1
10    31        0        2
# ... with 9,224 more rows






moby_polarity <- moby %>%
  # Inner join to the lexicon
  inner_join(bing, by = c("term" = "word")) %>%
  # Count by sentiment, index
  count(sentiment, index) %>%
  # Spread sentiments
  spread(sentiment, n, fill=0) %>%
  mutate(
    # Add polarity field
    polarity = positive - negative,
    # Add line number field
    line_number = row_number()
  )
  
> moby_polarity
# A tibble: 9,234 x 5
   index negative positive polarity line_number
   <dbl>    <dbl>    <dbl>    <dbl>       <int>
 1     5        0        1        1           1
 2     9        1        0       -1           2
 3    11        1        0       -1           3
 4    13        0        1        1           4
 5    17        0        1        1           5
 6    19        0        1        1           6
 7    22        1        0       -1           7
 8    24        0        1        1           8
 9    25        0        1        1           9
10    31        0        2        2          10
# ... with 9,224 more rows  














Create a sentiment time series with ggplot().
Pass in moby_polarity to the data argument.
Call aes() and pass in line_number and polarity without quotes.
Add a smoothed curve with geom_smooth().
Add a red horizontal line at zero by calling geom_hline(), with parameters 0 and "red".
Add a title with ggtitle() set to "Moby Dick Chronological Polarity".

ggplot(moby_polarity, aes(x = line_number, y= polarity)) + 
  # Add a smooth trend curve
  geom_smooth() +
  # Add a horizontal line at y = 0
  geom_hline(yintercept = 0, color = "red") +
  # Add a plot title
  ggtitle("Moby Dick Chronological Polarity") +
  theme_gdocs()

The story isn't much happier this time around!


