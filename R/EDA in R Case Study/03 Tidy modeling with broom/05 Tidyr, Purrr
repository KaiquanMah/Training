Performing linear regression on each nested dataset
Now that you've divided the data for each country into a separate dataset in the data column, you need to fit a linear model to each of these datasets.

The map() function from purrr works by applying a formula to each item in a list, where . represents the individual item. For example, you could add one to each of a list of numbers:
map(numbers, ~ 1 + .)

This means that to fit a model to each dataset, you can do:
map(data, ~ lm(percent_yes ~ year, data = .))
where . represents each individual item from the data column in by_year_country. Recall that each item in the data column is a dataset that pertains to a specific country.


Load the tidyr and purrr packages.
After nesting, use the map() function within a mutate() to perform a linear regression on each dataset (i.e. each item in the data column in by_year_country) modeling percent_yes as a function of year. Save the results to the model column.






# Load tidyr and purrr
library(tidyr)
library(purrr)

# Perform a linear regression on each item in the data column
by_year_country %>%
  nest(-country) %>%
  mutate(model = map(data, ~ lm(percent_yes ~ year, data = .)))
  
  
# A tibble: 200 x 3
   country                                   data model 
   <chr>                           <list<df[,3]>> <list>
 1 Afghanistan                           [34 x 3] <lm>  
 2 Argentina                             [34 x 3] <lm>  
 3 Australia                             [34 x 3] <lm>  
 4 Belarus                               [34 x 3] <lm>  
 5 Belgium                               [34 x 3] <lm>  
 6 Bolivia, Plurinational State of       [34 x 3] <lm>  
 7 Brazil                                [34 x 3] <lm>  
 8 Canada                                [34 x 3] <lm>  
 9 Chile                                 [34 x 3] <lm>  
10 Colombia                              [34 x 3] <lm>  
# ... with 190 more rows  
  
  














