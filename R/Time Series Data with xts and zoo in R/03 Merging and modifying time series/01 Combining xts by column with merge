xts makes it easy to join data by column and row using a few different functions. All results will be correctly ordered in time, regardless of original frequencies or date class. One of the most important functions to accomplish this is merge(). It takes one or more series and joins them by column. It's also possible to combine a series with a vector of dates. This is especially useful for normalizing observations to a fixed calendar.

merge() takes three key arguments which we will emphasize here. First is the ..., which lets you pass in an arbitrary number of objects to combine. The second argument is join, which specifies how to join the series - accepting arguments such as inner or left. This is similar to a relational database join, only here, the index is what we join on. The final argument for this exercise is fill. This keyword specifies what to do with the new values in a series if there is missingness introduced as a result of the merge.

# Basic argument use
merge(a, b, join = "right", fill = 9999)
For this exercise, you will explore some of the different join types to get a feel for using merge(). The objects a and b have been pre-loaded into your workspace.



Merge a and b using merge() (or cbind()), with the argument join set to "inner".
Perform a left-join of a and b. Use merge() and set the argument join to the correct value. Fill all missing values with zero (use the fill argument).


# Perform an inner join of a and b
merge(a, b, join = "inner")
                    a          b
2016-06-05 -1.2070657  0.4291247
2016-06-08  0.2774292 -0.5747400
2016-06-09  1.0844412 -0.5466319


# Perform a left-join of a and b, fill missing values with 0
merge(a, b, join = "left", fill = 0)
                    a          b
2016-06-05 -1.2070657  0.4291247
2016-06-08  0.2774292 -0.5747400
2016-06-09  1.0844412 -0.5466319
2016-06-13 -2.3456977  0.0000000

