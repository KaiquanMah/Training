It is best to think of xts objects as normal R matrices, but with special powers. These powers let you manipulate your data as a function of time, as your data is now self-aware of when it exists in time. Before we can start to exploit these powers, it will be helpful to see how xts objects relate to their base-R relatives.

In this exercise, you will get a feel for xts and how it behaves like a matrix object. The xts object ex_matrix and matrix object core have been pre-loaded for you.


Load the xts package using the library() function.
Look at the structure of the sample xts called ex_matrix using str().
Given that ex_matrix is a matrix, extract the 3rd row and 2nd column.
Now take the matrix core and extract the 3rd row and 2nd column. Notice the difference.



>ex_matrix
           [,1] [,2]
2016-06-01    1    2
2016-06-02    1    2
2016-06-03    1    2

>core
     [,1] [,2]
[1,]    1    2
[2,]    1    2
[3,]    1    2





# Load xts
library(xts)


# View the structure of ex_matrix
str(ex_matrix)
-----------------
An 'xts' object on 2016-06-01/2016-06-03 containing:
  Data: num [1:3, 1:2] 1 1 1 2 2 2
  Indexed by objects of class: [Date] TZ: UTC
  xts Attributes:  
List of 1
 $ createdOn: POSIXct[1:1], format: "2022-05-15 09:43:27"
-----------------



str(core)
 -----------------
 num [1:3, 1:2] 1 1 1 2 2 2
 -----------------
 
# Extract the 3rd observation of the 2nd column of ex_matrix
ex_matrix[3, 2]

           [,1]
2016-06-03    2


# Extract the 3rd observation of the 2nd column of core 
core[3, 2]

[1] 2

