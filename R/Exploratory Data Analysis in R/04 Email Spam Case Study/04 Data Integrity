Data Integrity
In the process of exploring a dataset, you'll sometimes come across something that will lead you to question how the data were compiled. For example, the variable num_char contains the number of characters in the email, in thousands, so it could take decimal values, but it certainly shouldn't take negative values.

You can formulate a test to ensure this variable is behaving as we expect:
email$num_char < 0

If you run this code at the console, you'll get a long vector of logical values indicating for each case in the dataset whether that condition is TRUE. Here, the first 1000 values all appear to be FALSE. To verify that all of the cases indeed have non-negative values for num_char, we can take the sum of this vector:
sum(email$num_char < 0)

This is a handy shortcut. When you do arithmetic on logical values, R treats TRUE as 1 and FALSE as 0. Since the sum over the whole vector is zero, you learn that every case in the dataset took a value of FALSE in the test. That is, the num_char column is behaving as we expect and taking only non-negative values.





Consider the variables image and attach. You can read about them with ?email, but the help file is ambiguous: do attached images count as attached files in this dataset?
Design a simple test to determine if images count as attached files. This involves creating a logical condition to compare the values of the two variables, then using sum() to assess every case in the dataset. Recall that the logical operators are < for less than, <= for less than or equal to, > for greater than, >= for greater than or equal to, and == for equal to.

> table(email$image)
   0    1    2    3    4    5    9   20 
3811   76   17   11    2    2    1    1

> table(email$attach)
   0    1    2    3    4    5    6    7    8    9   10   20   21 
3638  158   90   19    3    4    2    2    1    1    1    1    1




# Test if images count as attachments
sum(email$image > email$attach)
> sum(email$image > email$attach)
[1] 0

Since image is never greater than attach, we can infer that images are counted as attachments.















Answering questions with chains
When you have a specific question about a dataset, you can find your way to an answer by carefully constructing the appropriate chain of R code. For example, consider the following question:
"Within non-spam emails, is the typical length of emails shorter for those that were sent to multiple people?"

This can be answered with the following chain:
email %>%
   filter(spam == "not-spam") %>%
   group_by(to_multiple) %>%
   summarize(median(num_char))

The code makes it clear that you are using num_char to measure the length of an email and median() as the measure of what is typical. If you run this code, you'll learn that the answer to the question is "yes": the typical length of non-spam sent to multiple people is a bit lower than those sent to only one person.
This chain concluded with summary statistics, but others might end in a plot; it all depends on the question that you're trying to answer.






Build a chain to answer each of the following questions, both about the variable dollar.

For emails containing the word "dollar", does the typical spam email contain a greater number of occurrences of the word than the typical non-spam email? Create a summary statistic that answers this question.
If you encounter an email with greater than 10 occurrences of the word "dollar", is it more likely to be spam or not-spam? Create a barchart that answers this question.


> summary(email$dollar)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.000   0.000   0.000   1.467   0.000  64.000
  
  
  

# Question 1
email %>%
  filter(dollar > 0) %>%
  group_by(spam) %>%
  summarize(median(dollar))
# A tibble: 2 x 2
  spam     `median(dollar)`
  <fct>               <dbl>
1 not-spam                4
2 spam                    2
#infer that non-spam emails have more occurrences of the "dollar" sign



> email %>%
    filter(dollar > 0) %>%
    group_by(spam) %>%
    summarize(n())
# A tibble: 2 x 2
  spam     `n()`
  <fct>    <int>
1 not-spam   668
2 spam        78





# Question 2
email %>%
  filter(dollar > 10) %>%
  ggplot(aes(x = spam)) +
  geom_bar()
#"not spam" bar has a count > 180
#"spam" bar has a count < 5
#infer that mails containing the word dollar more than 10 times are probably not spam

