Some data are naturally evenly spaced by time. The time series discrete_data shown in the top figure has 20 observations, with one observation appearing at each of the discrete time indices 1 through 20. Discrete time indexing is appropriate for discrete_data.

The time series continuous_series shown in the bottom figure also has 20 observations, it is following the same periodic pattern as discrete_data, but its observations are not evenly spaced. Its first, second, and last observations were observed at times 1.210322, 1.746137, and 20.180524, respectively. Continuous time indexing is natural for continuous_series, however, the observations are approximately evenly spaced, with about 1 observation observed per time unit. Let's investigate using a discrete time indexing for continuous_series.




Use plot(___, ___, type = "b") to display continuous_series versus continuous_time_index, its continuous time index
Create a vector 1:20 to be used as a discrete time index.
Now use plot(___, ___, type = "b") to display continuous_series versus discrete_time_index
Note the various differences between the resulting figures, but the approximation appears reasonable because the overall trend remained preserved



>continuous_time_index
 [1]  1.210322  1.746137  2.889634  3.591384  5.462065  5.510933  7.074295
 [8]  8.264398  9.373382  9.541063 11.161122 12.378371 13.390559 14.066280
[15] 15.093547 15.864515 16.857413 18.091457 19.365451 20.180524


>continuous_series
 [1]  0.56889468  0.76630408  0.99207512  0.97481741  0.39912320  0.37660246
 [7] -0.38532033 -0.83635852 -0.99966983 -0.99831019 -0.64622280 -0.09386151
[13]  0.40052909  0.68160578  0.95318159  0.99693803  0.83934194  0.37003754
[19] -0.25509676 -0.61743983



>discrete_data
Time Series:
Start = 1 
End = 20 
Frequency = 1 
 [1]  0.47942554  0.84147098  0.99749499  0.90929743  0.59847214  0.14112001
 [7] -0.35078323 -0.75680250 -0.97753012 -0.95892427 -0.70554033 -0.27941550
[13]  0.21511999  0.65698660  0.93799998  0.98935825  0.79848711  0.41211849
[19] -0.07515112 -0.54402111





# Plot the continuous_series using continuous time indexing
par(mfrow=c(2,1))
plot(continuous_time_index,continuous_series, type = "b")


# Make a discrete time index using 1:20 
discrete_time_index <- 1:20
discrete_time_index
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
 
 
# Now plot the continuous_series using discrete time indexing
plot(discrete_time_index,continuous_series, type = "b")







