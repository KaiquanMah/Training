Testing with multiple assert statements
You're now going to test the function split_into_training_and_testing_sets() from the models module.
It takes a NumPy array containing housing area and prices as argument.
The function randomly splits the argument array into training and testing arrays in the ratio 3:1, and returns the resulting arrays in a tuple. This means that if the argument array had n rows, the training array will have int(0.75 * n) rows.
You can see an example argument and the corresponding expected return value by printing out the variable example_argument and expected_return_value respectively in the IPython console.
numpy as np, pytest and split_into_training_and_testing_sets have already been imported for you.


Calculate the expected number of rows of the training array using the formula int(0.75*n), where n is the number of rows in example_argument, and assign the variable expected_training_array_num_rows to this number.
def test_on_six_rows():
    example_argument = np.array([[2081.0, 314942.0], [1059.0, 186606.0],
                                 [1148.0, 206186.0], [1506.0, 248419.0],
                                 [1210.0, 214114.0], [1697.0, 277794.0]]
                                )
    # Fill in with training array's expected number of rows
    expected_training_array_num_rows = int(0.75 * example_argument.shape[0])




Calculate the expected number of rows of the testing array using the formula n - int(0.75*n), where n is the number of rows in example_argument, and assign the variable expected_testing_array_num_rows to this number.
def test_on_six_rows():
    example_argument = np.array([[2081.0, 314942.0], [1059.0, 186606.0],
                                [1148.0, 206186.0], [1506.0, 248419.0],
                                [1210.0, 214114.0], [1697.0, 277794.0]]
                               )
    # Fill in with training array's expected number of rows
    expected_training_array_num_rows = 4
    # Fill in with testing array's expected number of rows
    expected_testing_array_num_rows = example_argument.shape[0] - int(0.75 * example_argument.shape[0])










Write an assert statement that checks if training array has the correct number of rows, stored in expected_training_array_num_rows.
In [1]: split_into_training_and_testing_sets(example_argument)
Out[1]: 
(array([[  1059., 186606.],
        [  1506., 248419.],
        [  1210., 214114.],
        [  2081., 314942.]]), array([[  1148., 206186.],
        [  1697., 277794.]]))

Check the definition of test_on_six_rows(). Did you correctly specify the body? Did you check the number of rows of your training set? Remember that actual is a tuple and the 0-th index contains the training array. The shape attribute returns the number of rows and columns of the training array in a tuple, so you have to use the 0-th index of the tuple to get the number of rows.

def test_on_six_rows():
    example_argument = np.array([[2081.0, 314942.0], [1059.0, 186606.0],
                                 [1148.0, 206186.0], [1506.0, 248419.0],
                                 [1210.0, 214114.0], [1697.0, 277794.0]]
                                )
    # Fill in with training array's expected number of rows
    expected_training_array_num_rows = 4
    # Fill in with testing array's expected number of rows
    expected_testing_array_num_rows = 2
    actual = split_into_training_and_testing_sets(example_argument)
    # Write the assert statement checking training array's number of rows
    assert actual[0].shape[0] == expected_training_array_num_rows, "The actual number of rows in the training array is not {}".format(expected_training_array_num_rows)







Write an assert statement that checks if testing array has the correct number of rows, stored in expected_testing_array_num_rows.
def test_on_six_rows():
    example_argument = np.array([[2081.0, 314942.0], [1059.0, 186606.0],
                                 [1148.0, 206186.0], [1506.0, 248419.0],
                                 [1210.0, 214114.0], [1697.0, 277794.0]]
                                )
    # Fill in with training array's expected number of rows
    expected_training_array_num_rows = 4
    # Fill in with testing array's expected number of rows
    expected_testing_array_num_rows = 2
    actual = split_into_training_and_testing_sets(example_argument)
    # Write the assert statement checking training array's number of rows
    assert actual[0].shape[0] == expected_training_array_num_rows, "The actual number of rows in the training array is not {}".format(expected_training_array_num_rows)
    # Write the assert statement checking testing array's number of rows
    assert actual[1].shape[0] == expected_testing_array_num_rows, "The actual number of rows in the testing array is not {}".format(expected_testing_array_num_rows)

Well done! You seem to have mastered the art of writing assert statements. This test will pass only if both assertions pass. It will fail if any one of them raises an AssertionError.

In [3]: actual[0].shape[0]
Out[3]: 4

In [5]: actual[0]
Out[5]: 
array([[  1059., 186606.],
       [  1506., 248419.],
       [  1210., 214114.],
       [  2081., 314942.]])
       
       
       
In [4]: actual[1].shape[0]
Out[4]: 2

In [6]: actual[1]
Out[6]: 
array([[  1148., 206186.],
       [  1697., 277794.]])


