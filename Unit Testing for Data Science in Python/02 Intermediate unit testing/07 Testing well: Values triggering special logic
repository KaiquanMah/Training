Testing well: Values triggering special logic
Look at the plot. The boundary values of row_to_list() are now marked in orange. The normal argument is marked in green and the values triggering special behavior are marked in blue.
In the last exercise, you wrote tests for boundary values. In this exercise, you are going to write tests for values triggering special behavior, in particular, (0, 1) and (2, 1).


Assign the variable actual to the actual return value for "\n".
Complete the assert statement for test_on_no_tab_with_missing_value(), making sure to format the failure message appropriately.
Assign the variable actual to the actual return value for "123\t\t89\n".
Complete the assert statement for test_on_two_tabs_with_missing_value(), making sure to format the failure message appropriately.

import pytest
from preprocessing_helpers import row_to_list

def test_on_no_tab_with_missing_value():    # (0, 1) case
    # Assign to the actual return value for the argument "\n"
    actual = row_to_list("\n")
    # Write the assert statement with a failure message
    assert actual is None, "Expected: None, Actual: {0}".format(actual)
    
    
def test_on_two_tabs_with_missing_value():    # (0, 1) case
    # Assign to the actual return value for the argument "123\t\t89\n"
    actual = row_to_list("123\t\t89\n")
    # Write the assert statement with a failure message
    assert actual is None, "Expected: None, Actual: {0}".format(actual)


Kudos! You have now written tests for both boundary values and values triggering special logic for row_to_list(). In the next exercise, you will test normal arguments and then declare this function well tested!

