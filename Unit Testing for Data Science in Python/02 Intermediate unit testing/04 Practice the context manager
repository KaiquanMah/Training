Practice the context manager
In pytest, you can test whether a function raises an exception by using a context manager. Let's practice your understanding of this important context manager, the with statement and the as clause.
At any step, feel free to run the code by pressing the "Run Code" button and check if the output matches your expectations.


Complete the with statement by filling in with a context manager that will silence the ValueError raised in the context.
#https://docs.pytest.org/en/latest/reference.html#pytest-raises
#pytest.raises is True if an exception is raised -> since the assertion would be True, no output would be generated
#pytest.raises is False if NO exception is raised, i.e. when the output is ok!

import pytest

# Fill in with a context manager that will silence the ValueError
with pytest.raises(ValueError):
    raise ValueError








Complete the with statement with a context manager that raises Failed if no OSError is raised in the context.
#The pytest.raises() context manager is used for testing whether an exception is raised in the context. It takes an exception e.g. TypeError as the first argument. If no TypeError is raised within the context, it will raises Failed before exiting the context.
#Make sure the argument to pytest.raises() matches the exception that you are testing. pytest.raises(TypeError) has no effect on any raised SyntaxErrors, for instance.

import pytest

try:
    # Fill in with a context manager that raises Failed if no OSError is raised
    with pytest.raises(OSError):
        raise ValueError
except:
    print("pytest raised an exception because no OSError was raised in the context.")

<script.py> output:
    pytest raised an exception because no OSError was raised in the context.







Extend the with statement so that any raised ValueError is stored in the variable exc_info.

import pytest

# Store the raised ValueError in the variable exc_info
with pytest.raises(ValueError) as exc_info:
    raise ValueError("Silence me!")





Write an assert statement to check if the raised ValueError contains the message "Silence me!".

import pytest

with pytest.raises(ValueError) as exc_info:
    raise ValueError("Silence me!")
# Check if the raised ValueError contains the correct message
assert exc_info.match("Silence me!")


Well done! In the next exercise, you will apply our knowledge of pytest.raises() to write a unit test for a function in the example linear regression project.

