Creating and querying a view
Have you ever found yourself running the same query over and over again? Maybe, you used to keep a text copy of the query in your desktop notes app, but that was all before you knew about views!
In these Pitchfork reviews, we're particularly interested in high-scoring reviews and if there's a common thread between the works that get high scores. In this exercise, you'll make a view to help with this analysis so that we don't have to type out the same query often to get these high-scoring reviews.


Create a view called high_scores that holds reviews with scores above a 9.
reviews
reviewid	title	url	score	best_new_music	author	author_type	pub_date	pub_weekday	pub_day	pub_month	pub_year
22703	mezzanine	http://pitchfork.com/reviews/albums/22703-mezzanine/	9.3	0	nate patrin	contributor	2017-01-08	6	8	1	2017
22721	prelapsarian	http://pitchfork.com/reviews/albums/22721-prelapsarian/	7.9	0	zoe camp	contributor	2017-01-07	5	7	1	2017
22659	all of them naturals	http://pitchfork.com/reviews/albums/22659-all-of-them-naturals/	7.3	0	david glickman	contributor	2017-01-07	5	7	1	2017
...


-- Create a view for reviews with a score above 9
CREATE VIEW high_scores AS
SELECT * FROM reviews
WHERE score > 9;












Count the number of records in high_scores that are self-released in the label field of the labels table.
labels
reviewid	label
22703	virgin
22721	hathenter
22659	static shock
...

-- Count the number of self-released works in high_scores
SELECT COUNT(*) FROM high_scores
INNER JOIN labels ON high_scores.reviewid = labels.reviewid
WHERE label = 'self-released';

count
3



Views are great because they're easy to set up and use immediately thereafter.

