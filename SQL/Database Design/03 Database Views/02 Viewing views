Viewing views
Because views are very useful, it's common to end up with many of them in your database. It's important to keep track of them so that database users know what is available to them.
The goal of this exercise is to get familiar with viewing views within a database and interpreting their purpose. This is a skill needed when writing database documentation or organizing views.

Query the information schema to get views.
Exclude system views in the results.
-- Get all non-systems views
SELECT * FROM information_schema.views
WHERE table_schema NOT IN ('pg_catalog', 'information_schema');

table_catalog	table_schema	table_name	view_definition	        check_option	is_updatable	is_insertable_into	is_trigger_updatable	is_trigger_deletable	is_trigger_insertable_into
dataarchpost	public	view1	 SELECT content.reviewid,
                              content.content
                              FROM content
                              WHERE (length(content.content) > 4000);	NONE	YES	YES	NO	NO	NO

dataarchpost	public	view2	 SELECT reviews.reviewid,
                              reviews.title,
                              reviews.score
                              FROM reviews
                              WHERE (reviews.pub_year = 2017)
                              ORDER BY reviews.score DESC
                              LIMIT 10;	                              NONE	NO	NO	NO	NO	NO







What does view1 do?
Returns the content records with reviewids that have been viewed more than 4000 times.
Returns the first 4000 records in content.

#YES - Returns the content records that have reviews of more than 4000 characters.





What does view2 do?
Returns 10 random reviews published in 2017.
Returns the top 10 lowest scored reviews published in 2017.

#YES - Returns the top 10 highest scored reviews published in 2017.





Did view1 and view2 give you more ideas of how views can be used? Note that unlike this exercise, you should always give views descriptive names for views!

