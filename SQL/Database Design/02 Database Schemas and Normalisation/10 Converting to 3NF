Converting to 3NF
Last, but not least, we are at 3NF. In the last exercise, you created a table holding car_idss and car attributes. This has been expanded upon. For example, car_id is now a primary key. The resulting table, rental_cars, has been loaded for you.


rental_cars
car_id	model	manufacturer	type_car	condition	color
4KL298	 Golf 2017	 Volkswagen	 hatchback	 fair	 blue
5PL4YY	 Camaro 2019	 Chevrolet	 convertible	 excellent	 red
5H9OP5	 CRV 2018	 Honda	 SUV	 good	 grey
499ERW	 CRV 2018	 Honda	 SUV	 excellent	 black


Why doesn't rental_cars meet 3NF criteria?
#NOT - Because there are two columns that depend on the non-key column, color.
Try again. Color doesn't dictate any of the other columns.



#NOT - Because 2NF criteria isn't satisfied.
Try again. 2NF is satisfied because 1NF is satisfied and the table only has one primary key.

#YES - Because there are two columns that depend on the non-key column, model.








Create a new table for the non-key columns that were conflicting with 3NF criteria.
Drop those non-key columns from rental_cars.
-- Create a new table to satisfy 3NF
CREATE TABLE car_model(
  model VARCHAR(128),
  manufacturer VARCHAR(128),
  type_car VARCHAR(128)
);


-- Drop columns in rental_cars to satisfy 3NF
ALTER TABLE rental_cars
DROP COLUMN manufacturer, 
DROP COLUMN type_car;




Fantastic! You did it - the first three normal forms! Can you see how these 3NF tables help reduce data redundancy and potential data anomalies?

