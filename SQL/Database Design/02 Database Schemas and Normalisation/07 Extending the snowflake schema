Extending the snowflake schema
The company is thinking about extending their business beyond bookstores in Canada and the US. Particularly, they want to expand to a new continent. In preparation, you decide a continent field is needed when storing the addresses of stores.
Luckily, you have a snowflake schema in this scenario. As we discussed in the video, the snowflake schema is typically faster to extend while ensuring data consistency. Along with dim_country_sf, a table called dim_continent_sf has been loaded. It contains the only continent currently needed, North America, and a primary key. In this exercise, you'll need to extend dim_country_sf to reference dim_continent_sf.


dim_continent_sf
continent_id	continent
1	 North America


dim_country_sf
country_id	country
1	Canada
2	USA




Add a continent_id column to dim_country_sf with a default value of 1.
Make that new column a foreign key reference to dim_continent_sf's continent_id.
-- Add a continent_id column with default value of 1
ALTER TABLE dim_country_sf
ADD COLUMN continent_id int NOT NULL DEFAULT(1);

-- Add the foreign key constraint
ALTER TABLE dim_country_sf 
ADD CONSTRAINT country_continent FOREIGN KEY (continent_id) REFERENCES dim_continent_sf(continent_id);
   


-- Output updated table
SELECT * 
FROM dim_country_sf;

country_id	country	continent_id
1	Canada	1
2	USA	1



Great! We have successfully extended the snowflake schema to have continents. That wasn't too bad as it only required altering one table and we can be sure of data consistency. This type of extension is a big benefit of the snowflake schema.

