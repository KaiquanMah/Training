What's OVER here?
Window functions allow you to create a RANK of information according to any variable you want to use to sort your data. When setting this up, you will need to specify what column/calculation you want to use to calculate your rank. This is done by including an ORDER BY clause inside the OVER() clause. Below is an example:
SELECT 
    id,
    RANK() OVER(ORDER BY home_goal) AS rank
FROM match;

In this exercise, you will create a data set of ranked matches according to which leagues, on average, score the most goals in a match.
Select the league name and average total goals scored from league and match.
Complete the window function so it calculates the rank of average goals scored across all leagues in the database.
Order the rank by the average total of home and away goals scored.

SELECT 
	-- Select the league name and average goals scored
	l.name AS league,
    AVG(m.home_goal + m.away_goal) AS avg_goals,
    -- Rank each league according to the average goals
    RANK() OVER(ORDER BY AVG(m.home_goal + m.away_goal)) AS league_rank
FROM league AS l
LEFT JOIN match AS m 
ON l.id = m.country_id
WHERE m.season = '2011/2012'
GROUP BY l.name
-- Order the query by the rank you created
ORDER BY league_rank;




league	avg_goals	league_rank
Poland Ekstraklasa	2.1958333333333333	1
France Ligue 1	2.5157894736842105	2
Italy Serie A	2.5837988826815642	3
Switzerland Super League	2.6234567901234568	4
Scotland Premier League	2.6359649122807018	5
Portugal Liga ZON Sagres	2.6416666666666667	6
Spain LIGA BBVA	2.7631578947368421	7
England Premier League	2.8052631578947368	8
Germany 1. Bundesliga	2.8594771241830065	9
Belgium Jupiler League	2.8791666666666667	10
Netherlands Eredivisie	3.2581699346405229	11

Good job! You'll notice that the default order is from smallest to largest value -- in this case, the Polish league tends to have the fewest goals scored on average.

















Flip OVER your results
In the last exercise, the rank generated in your query was organized from smallest to largest. By adding DESC to your window function, you can create a rank sorted from largest to smallest.
SELECT 
    id,
    RANK() OVER(ORDER BY home_goal DESC) AS rank
FROM match;

Complete the same parts of the query as the previous exercise.
Complete the window function to rank each league from highest to lowest average goals scored.
Order the main query by the rank you just created.


SELECT 
	-- Select the league name and average goals scored
	l.name AS league,
    AVG(m.home_goal + m.away_goal) AS avg_goals,
    -- Rank leagues in descending order by average goals
    RANK() OVER(ORDER BY AVG(m.home_goal + m.away_goal) DESC) AS league_rank
FROM league AS l
LEFT JOIN match AS m 
ON l.id = m.country_id
WHERE m.season = '2011/2012'
GROUP BY l.name
-- Order the query by the rank you created
ORDER BY league_rank;


league	avg_goals	league_rank
Netherlands Eredivisie	3.2581699346405229	1
Belgium Jupiler League	2.8791666666666667	2
Germany 1. Bundesliga	2.8594771241830065	3
England Premier League	2.8052631578947368	4
Spain LIGA BBVA	2.7631578947368421	5
Portugal Liga ZON Sagres	2.6416666666666667	6
Scotland Premier League	2.6359649122807018	7
Switzerland Super League	2.6234567901234568	8
Italy Serie A	2.5837988826815642	9
France Ligue 1	2.5157894736842105	10
Poland Ekstraklasa	2.1958333333333333	11

Great job! Unlike a subquery in SELECT, your window function will apply the filter that you include in your WHERE clause.

