Contrasting ROW_NUMBER(), RANK(), and DENSE_RANK()
Among the ranking window functions, ROW_NUMBER() is the most common, followed by RANK() and DENSE_RANK(). Each of these ranking functions (as well as NTILE()) provides us with a different way to rank records in SQL Server.
In this exercise, we would like to determine how frequently each we see incident type 3 in our data set. We would like to rank the number of incidents in descending order, such that the date with the highest number of incidents has a row number, rank, and dense rank of 1, and so on. To make it easier to follow, we will only include dates with at least 8 incidents.


IncidentDate	IncidentTypeID	NumberOfIncidents
2019-07-01	1	2
2019-07-02	1	9
2019-07-02	3	3
...


Fill in each window function based on the column alias.
Fill in the OVER clause ordering by ir.NumberOfIncidents in descending order.
SELECT
	ir.IncidentDate,
	ir.NumberOfIncidents,
    -- Fill in each window function and ordering
    -- Note that all of these are in descending order!
	ROW_NUMBER() OVER (ORDER BY ir.NumberOfIncidents DESC) AS rownum,
	RANK() OVER (ORDER BY ir.NumberOfIncidents DESC) AS rk,
	DENSE_RANK() OVER (ORDER BY ir.NumberOfIncidents DESC) AS dr
FROM dbo.IncidentRollup ir
WHERE
	ir.IncidentTypeID = 3
	AND ir.NumberOfIncidents >= 8
ORDER BY
	ir.NumberOfIncidents DESC;


IncidentDate	NumberOfIncidents	rownum	rk	dr
2020-06-26	12	1	1	1
2020-04-20	11	2	2	2
2020-05-24	10	3	3	3
2020-02-21	10	4	3	3
2019-07-05	10	5	3	3
2019-09-09	10	6	3	3
2019-08-04	9	7	7	4
2019-08-22	9	8	7	4
2019-10-02	9	9	7	4
2019-11-09	9	10	7	4
2019-11-10	9	11	7	4
2020-03-16	9	12	7	4
2020-06-03	9	13	7	4
2020-02-12	9	14	7	4
2020-06-17	9	15	7	4
2020-06-20	8	16	16	5
2020-06-05	8	17	16	5
2020-06-07	8	18	16	5
2020-06-14	8	19	16	5
2020-03-30	8	20	16	5
2020-04-19	8	21	16	5
2020-03-10	8	22	16	5
2019-12-18	8	23	16	5
2019-12-24	8	24	16	5
2019-10-03	8	25	16	5
2019-10-15	8	26	16	5
2019-10-17	8	27	16	5
2019-10-21	8	28	16	5
2019-08-25	8	29	16	5
2019-09-06	8	30	16	5
2019-09-16	8	31	16	5
2019-07-22	8	32	16	5



Great job! Using the same core syntax, we can choose between a row number which is guaranteed to be unique, a rank which can have gaps, and a dense rank without gaps. All three of these are useful in their own right.

