Chapter 1

-- Describe the ecommerceonlineretail entity
DESC TABLE ecommerceonlineretail;

name	type	kind	null?	default	primary key	unique key	check	expression	comment	policy name	privacy domain
INVOICENO	VARCHAR(10)	COLUMN	Y	null	N	N	null	null	null	null	null
STOCKCODE	VARCHAR(15)	COLUMN	Y	null	N	N	null	null	null	null	null
DESCRIPTION	VARCHAR(255)	COLUMN	Y	null	N	N	null	null	null	null	null
QUANTITY	NUMBER(38,0)	COLUMN	Y	null	N	N	null	null	null	null	null
INVOICEDATE	TIMESTAMP_NTZ(9)	COLUMN	Y	null	N	N	null	null	null	null	null
UNITPRICE	NUMBER(10,2)	COLUMN	Y	null	N	N	null	null	null	null	null
CUSTOMERID	NUMBER(38,0)	COLUMN	Y	null	N	N	null	null	null	null	null
COUNTRY	VARCHAR(255)	COLUMN	Y	null	N	N	null	null	null	null	null


invoiceno	stockcode	description	quantity	invoicedate	unitprice	customerid	country
536365.0	21730	GLASS STAR FROSTED T-LIGHT HOLDER	6	2010-12-01 08:26:00	4.25	17850	United Kingdom
536365.0	22752	SET 7 BABUSHKA NESTING BOXES	2	2010-12-01 08:26:00	7.65	17850	United Kingdom





Conceptual data model
- entities
- relationships

Logical data model
- fields
- cardinality (btw entities) - one-to-one, one-to-many, many-to-many
- CREATE OR REPLACE TABLE

Physical data model
- data types
- PK FK



-- Create a new products entity
CREATE OR REPLACE TABLE products(
	-- List the entity's attributes
	stockcode VARCHAR(255),
    description VARCHAR(255)
);


-- Create a new 'orders' entity
CREATE OR REPLACE TABLE orders (
	-- List the invoice attributes
	invoiceno VARCHAR(10),
  invoicedate TIMESTAMP_NTZ(9),
  
  -- List the attributes related to price and quantity
	-- 10 digits b4 decimal pt, 2dp
  unitprice NUMBER(10,2),
	-- 38 digits b4 decimal, no dp
  quantity NUMBER(38,0)
  -- ALTERNATIVELY
  -- quantity INTEGER
);




-- Create customers table 
CREATE OR REPLACE TABLE customers (
  -- Define unique identifier
  customerid NUMBER(38,0) PRIMARY KEY,
  country VARCHAR(255)
);



-- Re-create orders table
CREATE OR REPLACE TABLE orders (
  -- Assign unique identifier column
  invoiceno VARCHAR(10) PRIMARY KEY,
  invoicedate TIMESTAMP_NTZ(9),
  unitprice NUMBER(10,2),
  quantity NUMBER(38,0),
  customerid NUMBER(38,0)
);

CREATE OR REPLACE TABLE orders (
  	invoiceno VARCHAR(10) PRIMARY KEY,
  	invoicedate TIMESTAMP_NTZ(9),
  	unitprice NUMBER(10,2),
  	quantity NUMBER(38,0),
  	-- Add columns that will refer the foreign key 
	customerid NUMBER(38,0),
  	stockcode VARCHAR(255)
);





CREATE OR REPLACE TABLE orders (
  	invoiceno VARCHAR(10) PRIMARY KEY,
  	invoicedate TIMESTAMP_NTZ(9),
  	unitprice NUMBER(10,2),
  	quantity NUMBER(38,0),
  	customerid NUMBER(38,0),
  	stockcode VARCHAR(255),
  	-- Add foreign key refering to the foreign tables
	FOREIGN KEY (customerid) REFERENCES customers(customerid),
  	FOREIGN KEY (stockcode) REFERENCES products(stockcode)
);







==============



Chapter 2
Data relationships, normalisation


CREATE OR REPLACE TABLE suppliers (
    name VARCHAR(255),
    location VARCHAR(255)
);



-- Alter suppliers table
ALTER TABLE suppliers
-- Add new column
ADD COLUMN IF NOT EXISTS region VARCHAR(255);

-- Alter suppliers table
ALTER TABLE suppliers
-- Add the new column
ADD COLUMN IF NOT EXISTS contact VARCHAR(255);


-- Alter suppliers table
ALTER TABLE suppliers
-- Assign the unique identifier
ADD PRIMARY KEY (supplier_id);








-- Create entity
CREATE OR REPLACE TABLE batchdetails (
	-- Add numerical attribute
	batch_id NUMBER(10,0),
	-- Add characters attributes
    batch_number VARCHAR(255),
    production_notes VARCHAR(255)
);

-- SET 'batch_id' as a unique identifier
ALTER TABLE batchdetails
ADD PRIMARY KEY (batch_id);

-- Modify the entity
ALTER TABLE productqualityrating
-- Add new column
ADD COLUMN IF NOT EXISTS batch_id NUMBER(10,0);











Identifying Data Redundancy
-- List all values from the attribute
SELECT manufacturer, company_location
-- Read all these values from the entity 
FROM productqualityrating;

MANUFACTURER	COMPANY_LOCATION
5150	U.S.A.
5150	U.S.A.




SELECT manufacturer, 
	company_location,
	-- Add a count of all the records, and set an alias for it
	COUNT(1) AS product_count
FROM productqualityrating 
-- Aggregate the results
GROUP BY manufacturer, company_location;

MANUFACTURER	COMPANY_LOCATION	PRODUCT_COUNT
Bar Au Chocolat	U.S.A.	7
Animas	U.S.A.	3
Benoit Nihant	Belgium	6




SELECT manufacturer, 
	company_location, 
	COUNT(*) AS product_count
FROM productqualityrating
GROUP BY manufacturer, 
	company_location
-- Add a filter for occurrence count greater than 1
HAVING product_count > 1;

MANUFACTURER	COMPANY_LOCATION	PRODUCT_COUNT
Aelan	Vanuatu	4
AMMA	Brazil	5
Bakau	Peru	2








-- Select the different values for the attributes list
SELECT DISTINCT manufacturer,
	cocoa_percent, 
    ingredients
FROM productqualityrating
-- Add filter for attribute referring to name
WHERE bar_name = 'Arriba'
	-- Add filter for attribute referring to year
	AND year_reviewed > 2006;

MANUFACTURER	COCOA_PERCENT	INGREDIENTS
Hachez	77.0	B;S;C;V
Hoja Verde (Tulicorp)	72.0	B;S
Hoja Verde (Tulicorp)	80.0	B;S;C;L
Hoja Verde (Tulicorp)	58.0	B;S;C;L
Chchukululu (Tulicorp)	55.0	B;S;C




SELECT manufacturer, 
	-- Add count of distinct combinations, and add alias to it
	COUNT(DISTINCT cocoa_percent, ingredients) AS distinct_combinations 
FROM productqualityrating
WHERE bar_name = 'Arriba' 
    AND year_reviewed > 2006 
-- Group the results    
GROUP BY manufacturer;

MANUFACTURER	DISTINCT_COMBINATIONS
Hoja Verde (Tulicorp)	3
Chchukululu (Tulicorp)	1
Hachez	1




SELECT manufacturer, 
	COUNT(DISTINCT cocoa_percent, ingredients) AS distinct_combinations
FROM productqualityrating
WHERE bar_name = 'Arriba' 
    AND year_reviewed > 2006 
GROUP BY manufacturer
-- Add the clause to filter
HAVING distinct_combinations > 1;

MANUFACTURER	DISTINCT_COMBINATIONS
Hoja Verde (Tulicorp)	3












Creating 1NF entities
-- Create a new entity
CREATE OR REPLACE TABLE ingredients (
	-- Add unique identifier 
    -- ingredient_id NUMBER(10,0) UNIQUE,
    ingredient_id NUMBER(10,0) PRIMARY KEY,
  	-- Add other attributes 
    ingredient VARCHAR(255)
);



-- Create a new entity
CREATE OR REPLACE TABLE reviews (
	-- Add unique identifier 
    review_id NUMBER(10,0) PRIMARY KEY,
  	-- Add other attributes 
    review VARCHAR(255)
);

















1NF
SELECT
	-- Clean empty values
	TRIM(f.value)
FROM productqualityrating,
-- Add function to split values separated by comma
LATERAL FLATTEN(INPUT => SPLIT(productqualityrating.ingredients, ';')) f;

TRIM(F.VALUE)
B
S
C
B
S
C
B
S
C
...


SELECT
	-- Create a sequential number
	ROW_NUMBER() OVER (ORDER BY TRIM(f.value)),
	TRIM(f.value)
FROM productqualityrating,
LATERAL FLATTEN(INPUT => SPLIT(productqualityrating.ingredients, ';')) f
-- Group the data
-- GROUP BY DEDUPES THE 'TRIM(f.value)' COL
GROUP BY TRIM(f.value);

ROW_NUMBER() OVER (ORDER BY TRIM(F.VALUE))	TRIM(F.VALUE)
1	B
2	C
3	L
4	S
5	S*
6	Sa
7	V
Showing 7 out of 7 rows




-- Add command to insert data
INSERT INTO ingredients(ingredient_id, ingredient)
SELECT
	ROW_NUMBER() OVER (ORDER BY TRIM(f.value)),
	TRIM(f.value)
FROM productqualityrating,
LATERAL FLATTEN(INPUT => SPLIT(productqualityrating.ingredients, ';')) f
GROUP BY TRIM(f.value);




-- Modify script for review
INSERT INTO reviews(review_id, review)
SELECT
	ROW_NUMBER() OVER (ORDER BY TRIM(f.value)),
	TRIM(f.value)
FROM productqualityrating,
LATERAL FLATTEN(INPUT => SPLIT(productqualityrating.review, ';')) AS f
GROUP BY TRIM(f.value);


review_id	review
1	
2	""Andes"" mint
3	"oily
4	"silky
5	Cadbury egg
100	burnt caramel














2NF
-- Add new entity
CREATE OR REPLACE TABLE manufacturers (
  	-- Assign unique identifier
  	manufacturer_id NUMBER(10,0) PRIMARY KEY,
  	--Add other attributes
  	manufacturer VARCHAR(255),
  	company_location VARCHAR(255)
);



-- Add values to manufacturers
INSERT INTO manufacturers (manufacturer_id, manufacturer, company_location)
SELECT 
	-- Generate a sequential number
    -- THIS WORKS
	ROW_NUMBER() OVER (ORDER BY manufacturer, company_location) AS manufacturer_id,
	-- BUT DATACAMP WAS LOOKING FOR THIS ANSWER BELOW WITHOUT ALIAS
	-- ROW_NUMBER() OVER (ORDER BY manufacturer, company_location),
    manufacturer, 
	company_location
FROM productqualityrating
-- Aggregate data by the other attributes
GROUP BY manufacturer, 
	company_location;























3NF
-- Create entity
CREATE OR REPLACE TABLE locations (
	-- Add unique identifier
  	location_id NUMBER(10,0) PRIMARY KEY,
  	-- Add main attribute
  	location VARCHAR(255)
);



manufacturers table example
manufacturer_id	manufacturer	company_location
1	Aelan	Vanuatu
2	AMMA	Brazil
3	Bakau	Peru



-- Populate entity from other entity's data
INSERT INTO locations (location_id, location)
SELECT 
	-- Generate unique sequential number
	ROW_NUMBER() OVER (ORDER BY company_location),
    -- Select the main attribute
	company_location
FROM manufacturers
-- Aggregate data by main attribute
GROUP BY company_location;



-- DROP FIELD FROM PREVIOUS TABLE
-- Modify entity
ALTER TABLE manufacturers
-- Remove attribute
DROP COLUMN IF EXISTS company_location;






==============



Chapter 3
Data modeling




