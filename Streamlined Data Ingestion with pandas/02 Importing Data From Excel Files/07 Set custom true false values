In Boolean columns, pandas automatically recognizes certain values, like "TRUE" and 1, as True, and others, like "FALSE" and 0, as False. Some datasets, like survey data, can use unrecognized values, such as "Yes" and "No".
For practice purposes, some Boolean columns in the New Developer Survey have been coded this way. You'll make sure they're properly interpreted with the help of the true_values and false_values arguments.
pandas is loaded as pd. You can assume the columns you are working with have no missing values.


Load the Excel file, specifying "Yes" as a true value and "No" as a false value.
# Load file with Yes as a True value and No as a False value
survey_subset = pd.read_excel("fcc_survey_yn_data.xlsx",
                              dtype={"HasDebt": bool,
                              "AttendedBootCampYesNo": bool},
                              true_values = ['Yes'],  #'Yes'
                              false_values = ['No'])  #'No'
#Expected ['Yes'], but got Yes.



# View the data
print(survey_subset.head())

<script.py> output:
                                   ID.x  AttendedBootCampYesNo  HasDebt  HasFinancialDependents  HasHomeMortgage  HasStudentDebt
    0  cef35615d61b202f1dc794ef2746df14                  False     True                     1.0              0.0             1.0
    1  323e5a113644d18185c743c241407754                  False    False                     0.0              NaN             NaN
    2  b29a1027e5cd062e654a63764157461d                  False    False                     0.0              NaN             NaN
    3  04a11e4bcb573a1261eb0d9948d32637                  False     True                     0.0              0.0             1.0
    4  9368291c93d5d5f5c8cdb1a575e18bec                  False     True                     0.0              0.0             0.0


#Building a data pipeline that sets Boolean dtypes and uses custom true and false values requires being very familiar with the data. It's a good idea to import the data as-is and explore it before doing so.
