Is Scala purely a functional language?
Is Scala purely a functional language? That is, is the functional style of programming the only way of programming in Scala?

#No
#Right! Scala is actually a hybrid imperative/functional language, where the functional style is preferred. That means you can program in the functional style or the imperative style if you want to in Scala.










Converting while to foreach
Previously, you wrote a while loop in the imperative style to find and print the number of points to bust for five hands (one for each player) in a round of Twenty-One:

// Define counter variable
var i = 0

// Create list with five hands of Twenty-One
var hands = List(16, 21, 8, 25, 4)

// Loop through hands
while(i < hands.length) {
  // Find and print number of points to bust
  println(pointsToBust(hands(i)))
  // Increment the counter variable
  i += 1
}



In this exercise, you'll convert that code to a more functional, Scala-preferred style using the foreach method. The bust function is already defined for you. A modified pointsToBust function (with println) is provided in the sample code.


// Find the number of points that will cause a bust
def pointsToBust(hand: Int) = {
  // If the hand is a bust, 0 points remain
  if (bust(hand)) println(0)
  // Otherwise, calculate the difference between 21 and the current hand
  else println(21 - hand)
}

// Create list with five hands of Twenty-One
var hands = List(16, 21, 8, 25, 4)

// Loop through hands, finding each hand's number of points to bust
hands.foreach(pointsToBust)

defined function pointsToBust
hands: List[Int] = List(16, 21, 8, 25, 4)
5
0
13
0
17

Nice! The foreach method promotes concise code by allowing a function (pointsToBust) to be passed into it as an argument, which is a feature of Scala being a functional language. Note that if the function had more than one argument, simply writing the function name wouldn't work. In that case, you can use something called a function literal, which is another feature of Scala as a functional-first language that you'll learn in more advanced courses.
















Signs of style
Scala is a hybrid imperative/functional language. Imperative-style Scala code often has the following traits:
One command at a time
Iterate with loops
Mutate shared state (e.g., mutating variables out of scope)


Functional-style Scala code often has the following traits:
Functions are used as first-class values
Operations of a program map input values to output values rather than change data in place


In this exercise, you'll categorize items as either a sign of imperative- or functional-style code. Knowing these signs now will inform the code you write in the future when you wish to utilize a certain style. The following definition may be helpful:
Side effect: code that modifies some variable outside of its local scope.


#Nice work! Since var are mutable, they often come paired with side effects, which usually means imperative-style, non-functional code. Type Unit is also a common pairing with side effects, which you'll learn more about in more advanced courses.




