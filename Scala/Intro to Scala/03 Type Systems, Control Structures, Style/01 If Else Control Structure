if and printing
The if/else control structure allows you to chose the way your program control flows. You don't always need else, as you'll experience in this exercise.

If a player reaches 21 points, they'd probably appreciate a little recognition!

In this exercise, you'll use the if keyword to print a congratulations when a player's hand equals 21. Remember, when there is no else, use curly braces for good Scala style! The card variables you need are already defined.



1. Write code that accomplishes the following: if a player's hand is equal to 21, print "Twenty-One!" to output.
2. Click "Run Code" and observe the output.
// Point value of a player's hand
val hand = sevenClubs + kingDiamonds + fourSpades

// Congratulate the player if they have reached 21
if (hand==21) {
	println("Twenty-One!")
}





3. Change fourSpades to threeSpades, then click "Submit Answer".
// Point value of a player's hand
val hand = sevenClubs + kingDiamonds + threeSpades

// Congratulate the player if they have reached 21
if (hand==21) {
	println("Twenty-One!")
}


hand: Int = 20
Woohoo! If a player does reach 21, they deserve to be recognized! Good work on their part (and good work on yours in writing this code).



















if expressions result in a value
In Scala, if is an expression, and expressions result in a value. That means the result of if can be assigned to a variable.

Imagine you're playing Twenty-One. You receive cards from the dealer and would like to know where your hand stands. If your hand is greater than 21, a "Bust!" message informing us of this result would be disappointing but helpful. If our hand is 21 exactly, the congratulatory "Twenty-One!" message applies. If less than 21, the program should ask us, "Hit or stay?"

In this exercise, you'll improve the code you wrote last exercise. You'll write an if-else if-else expression to store an appropriate message for the player's current hand in a variable. The card variables you need are already defined.

1. Read the provided code, then fill in the type annotation for the informPlayer variable.
2. Write appropriate if, else if, and else conditions based on the provided code.

// Point value of a player's hand
val hand = sevenClubs + kingDiamonds + fiveSpades

// Inform a player where their current hand stands
val informPlayer: Unit = {
  if (hand > 21)
    println("Bust! :(")
  else if (hand == 21)
    println("Twenty-One! :)")
  else
    println("Hit or stay?")
}

// Print the message
print(informPlayer)

hand: Int = 22
Bust! :(




3. Change fiveSpades to fourSpades, then click "Run Code" and observe the output.
// Point value of a player's hand
val hand = sevenClubs + kingDiamonds + fourSpades

// Inform a player where their current hand stands
val informPlayer: Unit = {
  if (hand > 21) println("Bust! :(")
  else if (hand == 21) println("Twenty-One! :)")
  else println("Hit or stay?")
}

// Print the message
print(informPlayer)

hand: Int = 21
Twenty-One! :)



4. Change fourSpades to threeSpades, then click "Submit Answer".
// Point value of a player's hand
val hand = sevenClubs + kingDiamonds + threeSpades

// Inform a player where their current hand stands
val informPlayer: String = {
  if (hand > 21)
    "Bust! :("
  else if (hand == 21) 
    "Twenty-One! :)"
  else
    "Hit or stay?"
}

// Print the message
print(informPlayer)
hand: Int = 20
informPlayer: String = "Hit or stay?"
Hit or stay?


if/else expressions resulting in values is a beautiful feature of Scala that impacts scalability profoundly, especially in the context of Scala as a functional language. You will experience a taste of that in the next exercise when you write an if/else expression inside of a function.



//rewored without println
// Point value of a player's hand
val hand = sevenClubs + kingDiamonds + threeSpades

// Inform a player where their current hand stands
val informPlayer : String = {
  if (hand > 21) "Bust! :("
  else if (hand == 21) "Twenty-One! :)"
  else "Hit or stay?"
}

// Print the message
print(informPlayer)






















if and else inside of a function
Since if expressions result in values, they can be the result of functions, which also result in values.

In this exercise, you'll create the body a function for your Twenty-One program called pointsToBust, which takes the current hand's point value as an input and calculates the the number of points remaining until 21. As a player, knowing how many additional points it takes to cause your current hand to bust will help you decide whether to hit or stay. The card variables you need and the bust function are already defined for you.


1. Write an if condition: if the hand busts, make the Int 0 the result of the function.
2. Write an else condition: if the hand does not bust, subtract hand from 21 and make that difference the result of the function.
3. Call pointsToBust with a hand with the cards tenSpades and fiveClubs as the argument.

// Find the number of points that will cause a bust
def pointsToBust(handA: Int, handB: Int): Int = {
  // If the hand is a bust, 0 points remain
  if ((handA+handB)>21)
  	0
  // Otherwise, calculate the difference between 21 and the current hand
  else
    21-handA-handB
}

// Test pointsToBust with 10♠ and 5♣
val myHandPointsToBust = pointsToBust(tenSpades, fiveClubs)
println(myHandPointsToBust)


defined function pointsToBust
myHandPointsToBust: Int = 6
6





Making decisions in Scala with if and else like its nothing now. The players of your Twenty-One program will appreciate you doing this mental math for them in the pointsToBust function.


