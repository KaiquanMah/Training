Initialize and prepend to a list
The List in Scala is like the Array in that they are a sequence of objects that share the same type. The List collection, however, is immutable. When performing operations on lists, the result will be a new list with a new value. The cons operator (::) prepends an element to a list.

Imagine you wanted to raise the stakes a little when playing Twenty-One by adding a monetary prize for each round. The winner of round one gets $10, the winner of round two gets $15, etc.

In this exercise, you'll create a list to store these prize values for five rounds, then prepend to it to accommodate another round.


1. Initialize a list named prizes with an element for each round's prize, where the first through fifth round's prizes are 10, 15, 20, 25, and 30, respectively.
// Initialize a list with an element for each round's prize
val prizes = List(10,15,20,25,30)
println(prizes)

2. Prepend to prizes using the cons (::) operator so a new first round is added, worth $5. Name the new list newPrizes.
// Prepend to prizes to add another round and prize
val newPrizes = 5 :: prizes
println(newPrizes)


prizes: List[Int] = List(10, 15, 20, 25, 30)
List(10, 15, 20, 25, 30)

newPrizes: List[Int] = List(5, 10, 15, 20, 25, 30)
List(5, 10, 15, 20, 25, 30)
Cool! You'll use lists a ton when programming in Scala, especially with the cons (::) operator.















Initialize a list using cons and Nil
You just initialized the prizes list like this:
val prizes = List(10, 15, 20, 25, 30)

That works great! There's also another commonly used technique that combines the cons (::) operator and Nil, which is the empty list.

In this exercise, you'll initialize the same prizes list from last exercise, just using this fancy, efficient shorthand.

//Using :: and Nil, initialize a list named prizes with an element each round's prize, where the first through fifth round's prizes are 10, 15, 20, 25, and 30, respectively.
// Initialize a list with an element each round's prize
val prizes = 10 :: 15 :: 20 :: 25 :: 30 :: Nil
println(prizes)


prizes: List[Int] = List(10, 15, 20, 25, 30)
List(10, 15, 20, 25, 30)
Very fancy! Look at you, leveraging shorthand.















Concatenate Lists
The triple-colon operator (:::) concatenates lists to create a new, combined list.

In Twenty-One, there are two major organizations that host competitive tournaments: the National Twenty-One Assocation (NTOA) and EuroTO, based in North America and Europe, respectively. Each league has a list of venues where they host their tournaments, venuesNTOA and venuesEuroTO. Recently, there was a merger of the organizations that made Twenty-One an overseas endeavor. NTOA and EuroTO were combined to create Twenty-One World. That means the list of venues must be combined, as tournaments will be played in both continents now.

In this exercise, you'll use the concatenation operator (:::) to create a new, combined venue list for Twenty-One World.

// The original NTOA and EuroTO venue lists
val venuesNTOA = List("The Grand Ballroom", "Atlantis Casino", "Doug's House")
val venuesEuroTO = "Five Seasons Hotel" :: "The Electric Unicorn" :: Nil

// Concatenate the North American and European venues
val venuesTOWorld = venuesNTOA ::: venuesEuroTO


venuesNTOA: List[String] = List(
  "The Grand Ballroom",
  "Atlantis Casino",
  "Doug's House"
)

venuesEuroTO: List[String] = List("Five Seasons Hotel", "The Electric Unicorn")

venuesTOWorld: List[String] = List(
  "The Grand Ballroom",
  "Atlantis Casino",
  "Doug's House",
  "Five Seasons Hotel",
  "The Electric Unicorn")
