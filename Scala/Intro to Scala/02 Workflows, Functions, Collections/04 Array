Create and parameterize an array
The Scala Array is a mutable collection that stores a fixed-size sequential collection of elements of the same type.

In the context of Twenty-One, an array is a good choice to represent something that can change, like the particular players playing (their names specifically). Something else that changes: the specific hands in each round.

In this exercise, you'll create and parameterize an array for the first round of Twenty-One with three players (i.e., each player has one hand in this round). Note: you won't initialize the array with data yet!

//Create and parameterize an array (named hands) of type Int with a length of 3. Explicitly provide the type parameterization.
// Create and parameterize an array for a round of Twenty-One
val hands: Array[Int] = new Array[Int](3)


hands: Array[Int] = Array(0, 0, 0)
Woohoo! The array is empty since you haven't initialized the array with the hand values yet. The type parameterization : Array[Int] is optional since Scala's type inference will correctly infer that from the Array[Int] on the right-hand side of the =.















Initialize an array
Once parameterized, initializing the array is done by passing in the desired data inside parentheses ((___)). This contrasts with square brackets ([___]), like in programming languages like Java and Python. Arrays in Scala are zero-indexed.

In this exercise, you'll initialize the hands array you created and parameterized in the previous exercise with the starting hand (i.e., first two cards) for each player. The card variables you need are already defined (they are all of type Int).


// Create and parameterize an array for a round of Twenty-One
val hands: Array[Int] = new Array[Int](3)

// Initialize the first player's hand in the array
hands(0) = tenClubs + fourDiamonds

// Initialize the second player's hand in the array
hands(1) = nineSpades + nineHearts

// Initialize the third player's hand in the array
hands(2) = twoClubs + threeSpades




hands: Array[Int] = Array(0, 0, 0)
player1hands: Int = 14
player2hands: Int = 18
player3hands: Int = 5
hands: Array[Int] = Array(14, 18, 5)

Cool! This array is ready to be used now. For this exercise and the previous one, you could have created, parameterized, and initialized the array all at once, which you'll do next!


















An array, all at once
In the previous exercises, you created and parameterized an array, then initialized it separately.

In this exercise, you'll experience performing all of these steps at once. The card variables you need are already defined.

//Create an array named hands.
//Initialize the first player's hand to tenClubs + fourDiamonds.
//Initialize the second player's hand to nineSpades + nineHearts.
//Initialize the third player's hand to twoClubs + threeSpades.

// Create, parameterize, and initialize an array for a round of Twenty-One
val hands = Array(tenClubs + fourDiamonds,
              nineSpades + nineHearts,
              twoClubs + threeSpades)




hands: Array[Int] = Array(14, 18, 5)
Nice! You'll often use this technique in practice. Note that in this exercise's case, however, your code lost clarity compared to the previous exercises as the type Int isn't explicit. That is, it isn't obvious that tenClubs, for example, is an Int. If you were to accidently initialize this array with a variable that isn't an Int by accident, the type would be Array[Any] since the array would have mixed types.
















Updating arrays
Since arrays are mutable, the elements in them can be updated.

In the context of Twenty-One, this could mean adding to an element in the array if that player chooses to hit to get closer to 21.

In this exercise, you'll do just that. The card variables you need are already defined, as well as the hands array you created, parameterized, and initialized previously.

If you run the code more than once, you will keep adding to hands since arrays are mutable. Your final result will then be different from the expected solution. Reloading the page will reset the hands array.

// Print out hands before each player hits
hands.foreach(println)

// Add 5♣ to the first player's hand
hands(0) = hands(0) + fiveClubs

// Add Q♠ to the second player's hand
hands(1) = hands(1) + queenSpades

// Add K♣ to the third player's hand
hands(2) = hands(2) + kingClubs

// Print out hands after each player hits
hands.foreach(println)

14
18
5

19
28
15
Great work! Arrays are a handy tool because of their ability to update elements in place. That said, they aren't commonly used in Scala as their mutability encourages side effects, which you'll learn more about shortly. You also got a preview at foreach, which you'll also learn more about shortly.




