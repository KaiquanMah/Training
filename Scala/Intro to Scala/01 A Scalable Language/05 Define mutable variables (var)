Define mutable variables (var)
Scala has two kinds of variables: val and var. var are mutable and can be reassigned.

In Twenty-One, an ace is like a var, as it can be worth 1 or 11 points depending on the player's choice (as opposed to cards 2 through king, which have a constant point value throughout the game).

In this exercise, you will define each ace as a var of type Int set to a default value of 1 point. This time around, you'll leverage Scala's type inference (its ability to guess types based on supplied values) and omit the type annotation.





// Define mutable variables for all aces
var aceClubs: Int=1
var aceDiamonds: Int=1
var aceHearts: Int=1
var aceSpades: Int=1


aceClubs: Int = 1
aceDiamonds: Int = 1
aceHearts: Int = 1
aceSpades: Int = 1

Great work defining variables, this time the mutable kind. You also experienced how Scala's type inference makes your code more concise. Let's use these defined variables in the next exercise.
















You can change me
Let's test out a prototype one-player version of Twenty-One. Your friend Alex is playerA. They are dealt two cards: the jack of clubs (J♣) and the ace of diamonds (A♦). They know the default implementation of the game has aces worth 1 point but they want it to be worth 11 so they can add their two cards together to get 21.

In this exercise, you'll code up this scenario. jackClubs (a val with a point value of 10) and aceDiamonds (a var with a point value of 1) are already defined.

// Create a mutable variable for Alex as player A
var playerA: String = "Alex"

//Change the point value of the ace of diamonds so it is worth 11 points, instead of the original value of 1 point it was assigned.
// Change the point value of A♦ from 1 to 11
var aceDiamonds = 11

// Calculate hand value for J♣ and A♦
println(jackClubs+aceDiamonds)



playerA: String = "Alex"
aceDiamonds: Int = 11
21



Though immutable variables (val) can't be reassigned, mutable variables (var) like aceDiamonds can be. Scala nudges us towards using immutable variables because of the benefits associated with those, which you'll identify in the next exercise.
Scala nudges use towards immutability. Because we are forced to copy our objects each time we want to make a change, we become much more conscious of how and when we change our application's state. With this philosophy, we receive fewer possible states within our app, fewer defects, and a codebase that is easier to maintain.





