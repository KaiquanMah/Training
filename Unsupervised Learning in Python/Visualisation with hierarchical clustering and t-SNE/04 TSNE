#t-distributed Stochastic Neighbor Embedding

#part 1
#t-SNE visualization of grain dataset
#In the video, you saw t-SNE applied to the iris dataset. In this exercise, you'll apply t-SNE to the grain samples data and inspect the resulting t-SNE features using a scatter plot. You are given an array samples of grain samples and a list variety_numbers giving the variety number of each grain sample.

# Import TSNE from sklearn.manifold
from sklearn.manifold import TSNE

#Create a TSNE instance called model with learning_rate=200.
# Create a TSNE instance: model
model = TSNE(learning_rate=200)

#Apply the .fit_transform() method of model to samples. Assign the result to tsne_features.
# Apply fit_transform to samples: tsne_features
tsne_features = model.fit_transform(samples)

#Select the column 0 of tsne_features. Assign the result to xs.
# Select the 0th feature: xs
xs = tsne_features[:,0]

#Select the column 1 of tsne_features. Assign the result to ys.
# Select the 1st feature: ys
ys = tsne_features[:,1]

#Make a scatter plot of the t-SNE features xs and ys. To color the points by the grain variety, specify the additional keyword argument c=variety_numbers
# Scatter plot, coloring by variety_numbers
plt.scatter(xs, ys, c=variety_numbers)
plt.show()

#Excellent! As you can see, the t-SNE visualization manages to separate the 3 varieties of grain samples. But how will it perform on the stock data? You'll find out in the next exercise!





#part 2
#A t-SNE map of the stock market
#t-SNE provides great visualizations when the individual samples can be labeled. In this exercise, you'll apply t-SNE to the company stock price data. A scatter plot of the resulting t-SNE features, labeled by the company names, gives you a map of the stock market! The stock price movements for each company are available as the array normalized_movements (these have already been normalized for you). The list companies gives the name of each company. PyPlot (plt) has been imported for you.


# Import TSNE from sklearn.manifold
from sklearn.manifold import TSNE

#Create a TSNE instance called model with learning_rate=50.
# Create a TSNE instance: model
model = TSNE(learning_rate=50)

#Apply the .fit_transform() method of model to normalized_movements. Assign the result to tsne_features.
# Apply fit_transform to normalized_movements: tsne_features
tsne_features = model.fit_transform(normalized_movements)

# Select the 0th feature: xs
xs = tsne_features[:,0]

# Select the 1th feature: ys
ys = tsne_features[:,1]

#Make a scatter plot of the t-SNE features xs and ys. Specify the additional keyword argument alpha=0.5.
# Scatter plot
plt.scatter(xs, ys, alpha=0.5)

# Annotate the points with its company name
for x, y, company in zip(xs, ys, companies):
    plt.annotate(company, (x, y), fontsize=5, alpha=0.75)
plt.show()

#Fantastic! It's visualizations such as this that make t-SNE such a powerful tool for extracting quick insights from high dimensional data.



