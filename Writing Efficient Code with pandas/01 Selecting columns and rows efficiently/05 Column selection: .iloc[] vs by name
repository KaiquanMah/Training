Column selection: .iloc[] vs by name
In the previous exercise, you saw how the .loc[] and .iloc[] functions can be used to locate specific rows of a DataFrame (based on the index). Turns out, the .iloc[] function performs a lot faster (~ 2 times) for this task!

Another important task is to find the faster function to select the targeted features (columns) of a DataFrame. In this exercise, we will compare the following:

using the index locator .iloc()
using the names of the columns While we can use both functions to perform the same task, we are interested in which is the most efficient in terms of speed.
In this exercise, you will continue working with the poker data which is stored in poker_hands. Take a second to examine the structure of this DataFrame by calling poker_hands.head() in the console!






Use the .iloc indexer to select the first six columns ('S1', 'R1', 'S2', 'R2', 'S3', 'R3') of the DataFrame poker_hands by their index and find the time it took.
# Use .iloc to select the first 6 columns and record the times before and after
iloc_start_time = time.time()
cols = poker_hands.iloc[:,:6]
iloc_end_time = time.time()

# Print the time it took
print("Time using .iloc[] : {} sec".format(iloc_end_time - iloc_start_time))

<script.py> output:
    Time using .iloc[] : 0.0010647773742675781 sec











Select the first six columns ('S1', 'R1', 'S2', 'R2', 'S3', 'R3') of the DataFrame poker_hands by their names and time this operation.
# Use simple column selection to select the first 6 columns 
names_start_time = time.time()
cols = poker_hands[['S1', 'R1', 'S2', 'R2', 'S3', 'R3']]
names_end_time = time.time()

# Print the time it took
print("Time using selection by name : {} sec".format(names_end_time - names_start_time))

<script.py> output:
    Time using selection by name : 0.0032172203063964844 sec













If you need to select a specific column (or columns) of a DataFrame, which function is more efficient, it terms of speed?

.iloc()

#YES - Simple columns selection
Congratulations! There is an explanation for that: with .iloc we need to specify both the rows and columns needed, and this takes more time!
#Contrary to the timing above, the model answer was that column names using the 'simple column selection' method would be more efficient to specify as compared to the iloc method which requires specifying row and col indexes.
