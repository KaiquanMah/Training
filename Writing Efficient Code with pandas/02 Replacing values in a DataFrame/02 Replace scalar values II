Replace scalar values II
As discussed in the video, in a pandas DataFrame, it is possible to replace values in a very intuitive way: we locate the position (row and column) in the Dataframe and assign in the new value you want to replace with. In a more pandas-ian way, the .replace() function is available that performs the same task.

You will be using the names DataFrame which includes, among others, the most popular names in the US by year, gender and ethnicity.

Your task is to replace all the babies that are classified as FEMALE to GIRL using the following methods:
intuitive scalar replacement
using the .replace() function






Replace all the babies that are classified as 'FEMALE' to 'GIRL' as described above.
start_time = time.time()

# Replace all the entries that has 'FEMALE' as a gender with 'GIRL'
names['Gender'].loc[names['Gender'] == 'FEMALE'] = 'GIRL'

print("Time using .loc[]: {} sec".format(time.time() - start_time))

<script.py> output:
    Time using .loc[]: 0.05566287040710449 sec











Replace all the babies that are classified as 'FEMALE' to 'GIRL' using the .replace() function. Set inplace to True to assign the result back to the original DataFrame.
start_time = time.time()

# Replace all the entries that has 'FEMALE' as a gender with 'GIRL'
names['Gender'].replace('FEMALE', 'GIRL', inplace=True)

print("Time using .replace(): {} sec".format(time.time() - start_time))

<script.py> output:
    Time using .replace(): 0.003148317337036133 sec










Which of the two methods presented in the previous exercises is the most efficient when replacing a scalar value?

Using intuitive replacement (with the .loc[] function) was faster.
Both methods present the same performance.

#YES - Using .replace() was faster.
Congratulations! You found the most efficient way to replace a scalar value on a pandas DataFrame! Exciting, isn't it?


