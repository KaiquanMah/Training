.apply() for rows iteration
.apply() is a very useful to iterate through the rows of a DataFrame and apply a specific function.
You will work on a subset of the poker_hands dataset, which includes only the rank of all the five cards of each hand in each row (this subset is generated for you in the script). You're going to get the variance of every hand for all ranks, and every rank for all hands.


In [1]: poker_hands.head()
Out[1]: 
   S1  R1  S2  R2  S3  R3  S4  R4  S5  R5  Class
0   1  10   1  11   1  13   1  12   1   1      9
1   2  11   2  13   2  10   2  12   2   1      9
2   3  12   3  11   3  13   3  10   3   1      9
3   4  10   4  11   4   1   4  13   4  12      9
4   4   1   4  13   4  12   4  11   4  10      9




Define a lambda function to return the variance, using the numpy package.
Apply the transformation for every row.
# Define the lambda transformation
get_variance = lambda x: np.var(x)

# Apply the transformation
data_tr = poker_hands[['R1', 'R2', 'R3', 'R4', 'R5']].apply(get_variance, axis=1)
print(data_tr.head())


<script.py> output:
    0    18.64
    1    18.64
    2    18.64
    3    18.64
    4    18.64
    dtype: float64
    
    
    
    
    

Modify the script to apply the function on every rank.
get_variance = lambda x: np.var(x)

# Apply the transformation
data_tr = poker_hands[['R1', 'R2', 'R3', 'R4', 'R5']].apply(get_variance, axis=0)
print(data_tr.head())

<script.py> output:
    R1    14.330572
    R2    14.175058
    R3    13.928827
    R4    13.943723
    R5    13.986058
    dtype: float64

Well done! You now know another method to fastly iterate through a pandas DataFrame! Is this the most efficient way to proceed though?

