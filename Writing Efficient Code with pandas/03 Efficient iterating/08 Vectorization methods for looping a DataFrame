Vectorization methods for looping a DataFrame
Now that you're familiar with vectorization in pandas and NumPy, you're going to compare their respective performances yourself.
Your task is to calculate the variance of all the hands in each hand using the vectorization over pandas Series and then modify your code using the vectorization over Numpy ndarrays method.


In [3]: poker_hands
Out[3]: 
       S1  R1  S2  R2  S3  R3  S4  R4  S5  R5  Class
0       1  10   1  11   1  13   1  12   1   1      9
1       2  11   2  13   2  10   2  12   2   1      9
2       3  12   3  11   3  13   3  10   3   1      9
3       4  10   4  11   4   1   4  13   4  12      9
4       4   1   4  13   4  12   4  11   4  10      9
...    ..  ..  ..  ..  ..  ..  ..  ..  ..  ..    ...
25005   3   9   2   6   4  11   4  12   2   4      0
25006   4   1   4  10   3  13   3   4   1  10      1
25007   2   1   2  10   4   4   4   1   4  13      1
25008   2  12   4   3   1  10   1  12   4   9      1
25009   1   7   3  11   3   3   4   8   3   7      1

[25010 rows x 11 columns]




Calculate the variance of the ranks of all the cards in each hand using vectorization with pandas.
# Calculate the variance in each hand
start_time = time.time()
poker_var = poker_hands[['R1', 'R2', 'R3', 'R4', 'R5']].var(axis=1)
print("Time using pandas vectorization: {} sec".format(time.time() - start_time))
print(poker_var.head())

<script.py> output:
    Time using pandas vectorization: 0.008613109588623047 sec
    0    23.3
    1    23.3
    2    23.3
    3    23.3
    4    23.3
    dtype: float64
    
    
    
    
    
Calculate the variance of the ranks of all the cards in each hand using vectorization with NumPy.
# Calculate the variance in each hand
start_time = time.time()
poker_var = poker_hands[['R1', 'R2', 'R3', 'R4', 'R5']].values.var(axis=1, ddof=1)
print("Time using NumPy vectorization: {} sec".format(time.time() - start_time))
print(poker_var[0:5])

<script.py> output:
    Time using NumPy vectorization: 0.004184246063232422 sec
    [23.3 23.3 23.3 23.3 23.3]

#ddof : int, optional
#Means Delta Degrees of Freedom. 
#The divisor used in calculations is N - ddof, where N represents the number of elements. By default ddof is zero.

Congratulations! You have mastered all the techniques to iterate through a pandas DataFrame and apply functions on its values! In case you wonder, it's expected to get 5 identical values. The dataset contains all the possible combinations of 5 cards from a standard deck of cards: the columns all contain the same cards, although in a different order, so the variance is the same for all columns.

