Using pycodestyle
We saw earlier that pycodestyle can be run from the command line to check a file for PEP 8 compliance. Sometimes it's useful to run this kind of check from a Python script.
In this exercise, you'll use pycodestyle's StyleGuide class to check multiple files for PEP 8 compliance. Both files accomplish the same task, but they differ greatly in formatting and readability. You can view the contents of the files by following their links below.


Import the pycodestyle package.
Create an instance of StyleGuide named style_checker.
There are two files that we'll be checking; they're named 'nay_pep8.py' and 'yay_pep8.py'. Pass a list containing these file names to our style_checker's check_files method.
print() the results of our style check to the console. Make sure to read the output!





'nay_pep8.py'
#define song lyric lines to tokenize
lines=[
  'Row, row, row your boat',
 'Gently down the stream',
     'Merrily, merrily, merrily, merrily',
'Life is but a dream']
#import needed packages
import re
#define helper function
def tokenize(text,regex):
 'function to tokenize text with a regex'
 return re.findall(regex, text)

#iterate over each line, tokenize, and print result
for line in lines:
          tokens=tokenize(text=  line,regex  = r'[a-zA-Z]+')
          print(  tokens )
          
          
          
          




'yay_pep8.py'
# Import needed packages
import re


# Define helper function
def tokenize(text, regex):
    """function to tokenize text with a regex"""
    return re.findall(regex, text)


# Define song lyric lines to tokenize
lines = ['Row, row, row your boat',
         'Gently down the stream',
         'Merrily, merrily, merrily, merrily',
         'Life is but a dream']

# Iterate over each line, tokenize, and print result
for line in lines:
    tokens = tokenize(text=line, regex=r'[a-zA-Z]+')
    print(tokens)









# Import needed package
import pycodestyle

# Create a StyleGuide instance
style_checker = pycodestyle.StyleGuide()

# Run PEP 8 check on multiple files
result = style_checker.check_files(['nay_pep8.py', 'yay_pep8.py'])

# Print result of PEP 8 style check
print(result.messages)



<script.py> output:
    nay_pep8.py:1:1: E265 block comment should start with '# '
    nay_pep8.py:2:6: E225 missing whitespace around operator
    nay_pep8.py:4:2: E131 continuation line unaligned for hanging indent
    nay_pep8.py:5:6: E131 continuation line unaligned for hanging indent
    nay_pep8.py:6:1: E122 continuation line missing indentation or outdented
    nay_pep8.py:7:1: E265 block comment should start with '# '
    nay_pep8.py:8:1: E402 module level import not at top of file
    nay_pep8.py:9:1: E265 block comment should start with '# '
    nay_pep8.py:10:1: E302 expected 2 blank lines, found 0
    nay_pep8.py:10:18: E231 missing whitespace after ','
    nay_pep8.py:11:2: E111 indentation is not a multiple of four
    nay_pep8.py:12:2: E111 indentation is not a multiple of four
    nay_pep8.py:14:1: E265 block comment should start with '# '
    nay_pep8.py:15:1: E305 expected 2 blank lines after class or function definition, found 1
    nay_pep8.py:16:11: E111 indentation is not a multiple of four
    nay_pep8.py:16:11: E117 over-indented
    nay_pep8.py:16:17: E225 missing whitespace around operator
    nay_pep8.py:16:32: E222 multiple spaces after operator
    nay_pep8.py:16:32: E251 unexpected spaces around keyword / parameter equals
    nay_pep8.py:16:38: E231 missing whitespace after ','
    nay_pep8.py:16:44: E221 multiple spaces before operator
    nay_pep8.py:16:44: E251 unexpected spaces around keyword / parameter equals
    nay_pep8.py:16:47: E251 unexpected spaces around keyword / parameter equals
    nay_pep8.py:17:11: E111 indentation is not a multiple of four
    nay_pep8.py:17:17: E201 whitespace after '('
    nay_pep8.py:17:25: E202 whitespace before ')'
    nay_pep8.py:17:27: W292 no newline at end of file
    {'E222': 'multiple spaces after operator', 'E231': "missing whitespace after ','", 'E111': 'indentation is not a multiple of four', 'E122': 'continuation line missing indentation or outdented', 'E225': 'missing whitespace around operator', 'E201': "whitespace after '('", 'E305': 'expected 2 blank lines after class or function definition, found 1', 'E131': 'continuation line unaligned for hanging indent', 'E202': "whitespace before ')'", 'E251': 'unexpected spaces around keyword / parameter equals', 'E221': 'multiple spaces before operator', 'E117': 'over-indented', 'W292': 'no newline at end of file', 'E265': "block comment should start with '# '", 'E402': 'module level import not at top of file', 'E302': 'expected 2 blank lines, found 0'}
    


Great job! Checks like these can be invaluable to catching lines of code that can be improved from a readability standpoint.

