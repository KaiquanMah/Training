#part 1
#Characterizing the network (I)
#To start out, let's do some basic characterization of the network, by looking at the number of nodes and number of edges in a network. It has been pre-loaded as G and is available for exploration in the IPython Shell. Your job in this exercise is to identify how many nodes and edges are present in the network. You can use the functions len(G.nodes()) and len(G.edges()) to calculate the number of nodes and edges respectively.

In [1]: len(G.nodes())
Out[1]: 56519

In [2]: len(G.edges())
Out[2]: 72900

#Great work! G does indeed have 56519 nodes and 72900 edges.



#part 2
#Characterizing the network (II)
#Let's continue recalling what you've learned before about node importances, by plotting the degree distribution of a network. This is the distribution of node degrees computed across all nodes in a network.

# Import necessary modules
import matplotlib.pyplot as plt
import networkx as nx

#Plot the degree distribution of the GitHub collaboration network G. Recall that there are four steps involved here:
#Calculating the degree centrality of G.
#Using the .values() method of G and converting it into a list.
#Passing the list of degree distributions to plt.hist().
#Displaying the histogram with plt.show().

# Plot the degree distribution of the GitHub collaboration network
plt.hist(list(nx.degree_centrality(G).values()))
plt.show()


#workings are as follows
#key value pair
#nx.degree_centrality(G)

#extract the value from the key-value pair within the dictionary
#nx.degree_centrality(G).values()

#turn values above into a list
#list(nx.degree_centrality(G).values())


#Excellent job! The next step in characterizing the network is to explore its betweenness centrality distribution.



#part 3
#Characterizing the network (III)
#The last exercise was on degree centrality; this time round, let's recall betweenness centrality!
#A small note: if executed correctly, this exercise may need about 5 seconds to execute.

# Import necessary modules
import matplotlib.pyplot as plt
import networkx as nx

#Plot the betweenness centrality distribution of the GitHub collaboration network. You have to follow exactly the same four steps as in the previous exercise, substituting nx.betweenness_centrality() in place of nx.degree_centrality().
# Plot the degree distribution of the GitHub collaboration network
plt.hist(list(nx.betweenness_centrality(G).values()))
plt.show()


#Fantastic! You'll now move on to visualizing the network using MatrixPlots, ArcPlots, and CircosPlots.







