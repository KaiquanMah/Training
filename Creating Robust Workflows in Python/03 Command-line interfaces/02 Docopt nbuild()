Docopt nbuild()
If you love docstrings, you are likely to be a fan of docopt CLIs.

The docstring in our docopt_cli.py file is only one line, but it includes all the details we need to pass a list of shell arguments to any function.

More specifically, the docstring determines that our IN_FILES variable is
optional and
represents a list of arguments


In docopt docstrings, optional arguments are wrapped in square brackets ([]), while lists of arguments are followed by ellipses (...).
We have already imported the docopt() function from the docopt module for use in our docopt_cli() function.





Fill in the section title in the docstring.
Assign shell arguments to a variable called args.

# Add the section title in the docstring below
"""Usage: docopt_cli.py [IN_FILES...]"""

def docopt_cli(func: Callable) -> None:
    # Assign the shell arguments to "args"
    args = docopt(__doc__)
    print(func(args["IN_FILES"]))

if __name__ == "__main__":
    docopt_cli(nbuild)


<script.py> output:
    {'nbformat': 4, 'nbformat_minor': 4, 'metadata': {}, 'cells': []}


Dandy docstring use! In this lesson, we learned how to create command-line interfaces to our Python programs. Even if you do not plan to build CLIs very often, it is important to understand how they work. Next, we will use Python to explore the git version control system.

