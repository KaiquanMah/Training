Pickle models
In our final persistence exercise, we will pickle and unpickle a scikit-learn model with joblib.
The training and test sets we will need to train the model and make predictions are already loaded.
Once we have the predictions, we will plot them against the measured values to assess model fit.


Train and pickle a linear model.
Unpickle the linear model.


# Train and pickle a linear model
joblib.dump(LinearRegression().fit(x_train, y_train), "linear.pkl")


# Unpickle the linear model
linear = joblib.load("linear.pkl")
predictions = linear.predict(x_test)
plt.scatter(y_test, predictions, edgecolors=(0, 0, 0))
min_max = [y_test.min(), y_test.max()]
plt.plot(min_max, min_max, "--", lw=3)
plt.xlabel("Measured")
plt.ylabel("Predicted")
plt.show()


Marvelous modeling! In this lesson, we learned how to persist pandas dataframes and scikit-learn models. Pickling can be very useful after processing large datasets or training complex models. In the next chapter, we will move beyond individual files to look at the setup and execution of entire projects.


In [1]: help(joblib)
Help on package sklearn.externals.joblib in sklearn.externals:

NAME
    sklearn.externals.joblib - # Import necessary to preserve backward compatibility of pickles

PACKAGE CONTENTS
    numpy_pickle

DATA
    __warningregistry__ = {'version': 92}
    msg = 'sklearn.externals.joblib is deprecated in 0.21 a...e-serialize ...

FILE
    /usr/local/lib/python3.6/dist-packages/sklearn/externals/joblib/__init__.py
    

