TextFile hints
In this exercise, we will go back to the example of a TextFile class that can represent any text file.
As in the previous chapter, TextFile stores file contents in an instance variable called text.
This time our TextFile class will have a get_lines() method that returns all of the lines from the text file used to instantiate the TextFile class.
The TextFile class definition is ready, but we want to add type hints, so that calling help() on the TextFile class will provide type annotation information to users.
To help getting things started, we've already imported the List class from the typing module.


Add type hints to the __init__() method's name argument.
Add type hints to the get_lines() method's return value.


class TextFile:
  	# Add type hints to TextFile"s __init__() method
    def __init__(self, name: str) -> None:
        self.text = Path(name).read_text()

	# Type annotate TextFile"s get_lines() method
    def get_lines(self) -> List[str]:
        return self.text.split("\n")

help(TextFile)


<script.py> output:
    Help on class TextFile in module __main__:
    
    class TextFile(builtins.object)
     |  Methods defined here:
     |  
     |  __init__(self, name:str) -> None
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  get_lines(self) -> List[str]
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)



Awesome annotation! In this case, we can be certain that the result of calling get_lines() will be a list of strings. While it is good to be as specific as possible when annotating return values, we might want to be a little more flexible with argument type hints. For example, we could design the TextFile class to allow users to pass a single filename or a list or tuple of filenames. Being smart about type hinting requires finding a balance between flexibility and specificity.

