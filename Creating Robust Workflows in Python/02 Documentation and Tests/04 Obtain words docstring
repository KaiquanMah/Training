Obtain words docstring
In the obtain_words() function's docstring, we will obtain the title of a poem about Python.
Later, we can use doctest to compare the actual and expected result.
If you are not sure what the result should be, run the the first line of code from the Examples section of the docstring in the IPython console!

Examples:
    >>> from this import s
Call help() on obtain_words() to see the final docstring without the interspersed code comments and the tab ('\t') and newline ('\n') characters.







Pass the decoded s string to the obtain_words() function inside the docstring example.
Fill in the code needed to read in a test file, so that its contents can be compared with the expected output.

In [4]: from codecs import decode



In [5]: from this import s
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!





In [6]: decode(s, encoding='rot13')
Out[6]: "The Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!"




def obtain_words(string: str) -> List[str]:
    ("Get the top words in a word list.\nExamples:\n\t"
     ">>> from this import s\n\t>>> from codecs import decode\n\t"
     # Use obtain_words() in the docstring example below
     ">>> obtain_words(decode(s, encoding='rot13'))[:4]\n\t"
     # Fill in the expected result of the function call
     "['The', 'Zen', 'of', 'Python']") 
    return ''.join(char if char.isalpha() else ' ' for char in string).split()
  
help(obtain_words)


<script.py> output:
    Help on function obtain_words in module __main__:
    
    obtain_words(string:str) -> List[str]
        Get the top words in a word list.
        Examples:
                >>> from this import s
                >>> from codecs import decode
                >>> obtain_words(decode(s, encoding='rot13'))[:4]
                ['The', 'Zen', 'of', 'Python']


Doctest examples are great additions to docstrings, but later in the chapter we will learn more about testing so that we do not have have to include all of our tests in docstrings. Next, we will learn to generate reports using Python code.

