Raises
In this coding exercise, we will define a test function called test_nbconv() that will use the

@parametrize decorator to pass three unsupported arguments to our nbconv() function
raises() function to make sure that passing each incorrect argument to nbconv() results in a ValueError


As in the previous exercise, we will use show_test_output() to see the test output.
To see an implementation of this test and others, checkout the Nbless package documentation.









Pass the argument set to the test_nbconv() function.
Make sure that the correct error is raised if an unsupported argument is passed to the nbconv() function.

@pytest.mark.parametrize("not_exporters", ["htm", "ipython", "markup"])
# Pass the argument set to the test_nbconv() function
def test_nbconv(not_exporters):
     # Use pytest to confirm that a ValueError is raised
    with pytest.raises(ValueError):
        nbconv(nb_name="mynotebook.ipynb", exporter=not_exporters)

show_test_output(test_nbconv)

<script.py> output:
    ============================== test session starts ==============================
    platform linux -- Python 3.6.7, pytest-5.3.2, py-1.8.1, pluggy-0.13.1
    rootdir: /tmp/tmpc4mj_uvc
    collected 3 items
    
    test_file.py ...                                                          [100%]
    
    =============================== 3 passed in 0.27s ===============================
    

Excellent error raising! We've progressed way past doctest examples, but we've only scratched the surface of what pytest is capable of! The techniques we learned in this chapter prevent modules from turning into black boxes. While type hints, docstrings, documentation and tests do not change how modules work, users will certainly appreciate well-documented and bug-free code! In the next chapter, we will learn how Python can synergize with the shell.

