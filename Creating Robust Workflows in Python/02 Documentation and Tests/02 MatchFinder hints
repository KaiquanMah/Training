MatchFinder hints
In the video, we discussed how we can introduce flexibility into type hints with the Optional (None and one of any other type) class.
In this exercise, we'll design a class called MatchFinder that has a method called get_matches().
MatchFinder should only accept a list of strings as its strings argument and then store the input list in an instance variable called strings.


The get_matches() method returns a list of either
every string in strings that contains the query argument or
all strings in strings if the match argument is None.
The typing module's List and Optional classes have already been imported.



Add a strict type hint to the __init__() method's strings argument.
Add a flexible type hint to get_matches()'s query argument.

class MatchFinder:
  	# Add type hints to __init__()'s strings argument
    def __init__(self, strings: List[str]) -> None:
        self.strings = strings

	# Type annotate get_matches()'s query argument
    def get_matches(self, query: Optional[str] = None) -> List[str]:
        return [s for s in self.strings if query in s] if query else self.strings

help(MatchFinder)

