MatchFinder hints
In the video, we discussed how we can introduce flexibility into type hints with the Optional (None and one of any other type) class.
In this exercise, we'll design a class called MatchFinder that has a method called get_matches().
MatchFinder should only accept a list of strings as its strings argument and then store the input list in an instance variable called strings.


The get_matches() method returns a list of either
every string in strings that contains the query argument or
all strings in strings if the match argument is None.
The typing module's List and Optional classes have already been imported.



Add a strict type hint to the __init__() method's strings argument.
Add a flexible type hint to get_matches()'s query argument.

class MatchFinder:
  	# Add type hints to __init__()'s strings argument
    def __init__(self, strings: List[str]) -> None:
        self.strings = strings

	# Type annotate get_matches()'s query argument
    def get_matches(self, query: Optional[str] = None) -> List[str]:
        return [s for s in self.strings if query in s] if query else self.strings

help(MatchFinder)



Very helpful hinting! In the previous chapter, we focused on writing modules. Type hints help us to understand important aspects of how functions and methods work, without having to look at the source code in modules. We will continue to use type annotation throughout the course, but in the next lesson we'll shift our attention to another way we can include information in the code that we write.


<script.py> output:
    Help on class MatchFinder in module __main__:
    
    class MatchFinder(builtins.object)
     |  Methods defined here:
     |  
     |  __init__(self, strings:List[str]) -> None
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  get_matches(self, query:Union[str, NoneType]=None) -> List[str]
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)


