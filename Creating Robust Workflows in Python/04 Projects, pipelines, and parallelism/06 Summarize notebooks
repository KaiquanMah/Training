Summarize notebooks
In the last notebook workflow exercise, we will use scrapbook to

read in a Jupyter notebook called rf_diabetes.ipynb
create a dataframe that contains variables that were saved in the notebook with the glue() function
create a second dataframe of parameters that were passed to the notebook by papermill
This exercise demonstrates how we can use scrapbook to access notebook data.



Assign the scrapbook notebook object to nb.
Create a dataframe of recorded variables (scraps) and assign it to scrap_df.

import scrapbook as sb

# Read in the notebook and assign the notebook object to nb
nb = sb.read_notebook("rf_diabetes.ipynb")

# Create a dataframe of scraps (recorded values)
scrap_df = nb.scrap_dataframe
print(scrap_df)


<script.py> output:
      name         data encoder display           filename
    0   r2     0.265459    json    None  rf_diabetes.ipynb
    1  mse  3871.303672    json    None  rf_diabetes.ipynb


Superb summarization! The papermill and scrapbook libraries provide many programmatic tools for working with notebooks. In the next video, we will learn how to parallelize Python programs.

