Class method
The pair_plot() method we defined in the previous exercise facilitates exploratory data analysis.
If we have several datasets that we want to explore, it can be tedious to instantiate the ScikitData class repeatedly.
To enable rapid instantiation of our ScikitData class, we will add a class method called get_generator().
A class method is a good choice here, because we want to be able to access the class's ability to make new instances.
We will use get_generator() to create a generator named dataset_generator that will generate instances that represent the diabetes and iris datasets.
Instead of assigning the instances to variables, we will use a for loop and the pair_plot() instance method from the previous exercise to plot each dataset.



Fill in the decorator for the get_generator() class method definition.
Add the first parameter to the get_generator() class method definition.



# Fill in the decorator for the get_generator() definition
@classmethod
# Add the first parameter to the get_generator() definition
def get_generator(cls, dataset_names):
    return map(cls, dataset_names)

ScikitData.get_generator = get_generator
dataset_generator = ScikitData.get_generator(["diabetes", "iris"])
for dataset in dataset_generator:
    dataset.pair_plot()
    plt.show()
    

In this chapter, we have learned about abstracting away implementation details and providing interfaces to facilitate code use. For example, the details of how the ScikitData class works are hidden inside the module that contains the ScikitData class definition. We can use the ScikitData class to quickly obtain and explore scikit-learn datasets without looking at the ScikitData source code. In the next chapter, we will learn to describe how our code works with documentation and to ensure that the code works properly with testing.

