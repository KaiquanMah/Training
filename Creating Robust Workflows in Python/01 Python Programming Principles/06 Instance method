Instance method
In this exercise, we will work with a class called ScikitData that represents datasets from the popular Python machine learning library scikit-learn.
ScikitData has already been defined. In this exercise, we will define an instance method called pair_plot() and add it to ScikitData.
It is best practice to include all methods in the class definition, but we will add methods to ScikitData on the fly, so that we can build the class sequentially without redefining it.
Our pair_plot() instance method will plot dataset variables against each other using the pairplot() function, which has already been imported from the seaborn library.
Before we can use pair_plot() to make a scatterplot matrix, we will have to create a ScikitData instance.


Fill in the first parameter in the pair_plot() instance method definition.
Create the diabetes instance of the ScikitData class.




# Fill in the first parameter in the pair_plot() definition
def pair_plot(self, vars=range(3), hue=None):
    return pairplot(pd.DataFrame(self.data), vars=vars, hue=hue, kind="reg")

ScikitData.pair_plot = pair_plot

# Create the diabetes instance of the ScikitData class
diabetes = ScikitData("diabetes")
diabetes.pair_plot(vars=range(2, 6), hue=1)._legend.remove()
plt.show()


Perfect pair plotting! In this exercise, we saw how classes and methods can be very useful! The choice to use seaborn for plotting is an implementation detail. We could switch to different visualization library without changing how our ScikitData class is used. Next, we'll add a class method to ScikitData that will allow us to simultaneously create more than one instance.

