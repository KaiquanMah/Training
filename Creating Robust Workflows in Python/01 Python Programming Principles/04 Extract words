Extract words
In the next two exercises, you will define three functions that can be combine to extract and count words from a text file.
The obtain_words() function uses a conditional expression to replace non-letter characters with spaces so that it can return words without punctuation.
The filter_words() function use a list comprehension with an if clause to remove words shorter than the minimum_length threshold.
After we confirm that these two functions work correctly, we will move them into a module.
As we continue to work towards our current goal, we can build up a toolbox of functions that may come in handy for future tasks.


Inside of obtain_words(), check if each character in the input string is a letter with the .isalpha() string method.
Inside of filter_words(), set up the if clause to remove words shorter than three characters.

def obtain_words(string):
    # Replace non-alphabetic characters with spaces
    return "".join(char if char.isalpha() else " " for char in string).split()

def filter_words(words, minimum_length=3):
    # Remove words shorter than 3 characters
    return [word for word in words if len(word) >= minimum_length]

words = obtain_words(Path("diabetes.txt").read_text().lower())
filtered_words = filter_words(words)
pprint(filtered_words)


<script.py> output:
    ['diabetes',
     'dataset',
     'diabetes',
     'dataset',
     'ten',
     'baseline',
     'variables',
     'age',
     'sex',
     'body',
     'mass',
     'index',
     'average',
     'blood',
     'pressure',
     'and',
     'six',
     'blood',
     'serum',
     'measurements',
     'were',
     'obtained',
     'for',
     'each',
     'diabetes',
     'patients',
     'well',
     'the',
     'response',
     'interest',
     'quantitative',
     'measure',
     'disease',
     'progression',
     'one',
     'year',
     'after',
     'baseline',
     'data',
     'set',
     'characteristics',
     'number',
     'instances',
     'number',
     'attributes',
     'first',
     'columns',
     'are',
     'numeric',
     'predictive',
     'values',
     'target',
     'column',
     'quantitative',
     'measure',
     'disease',
     'progression',
     'one',
     'year',
     'after',
     'baseline',
     'attribute',
     'information',
     'age',
     'sex',
     'body',
     'mass',
     'index',
     'average',
     'blood',
     'pressure',
     'note',
     'each',
     'these',
     'feature',
     'variables',
     'have',
     'been',
     'mean',
     'centered',
     'and',
     'scaled',
     'the',
     'standard',
     'deviation',
     'times',
     'samples',
     'the',
     'sum',
     'squares',
     'each',
     'column',
     'totals',
     'source',
     'url',
     'https',
     'www',
     'stat',
     'ncsu',
     'edu',
     'boos',
     'var',
     'select',
     'diabetes',
     'html',
     'for',
     'more',
     'information',
     'see',
     'bradley',
     'efron',
     'trevor',
     'hastie',
     'iain',
     'johnstone',
     'and',
     'robert',
     'tibshirani',
     'least',
     'angle',
     'regression',
     'annals',
     'statistics',
     'with',
     'discussion',
     'https',
     'web',
     'stanford',
     'edu',
     'hastie',
     'papers',
     'lars',
     'leastangle',
     'pdf']


