Find matches
In the previous exercise, we printed out a lot of text.
Here, we'll define a get_matches() function that will allow us to search through all of that text.
When we pass a query string to get_matches() it will return only the lines that contain the query string.
The list comprehension in get_matches() iterates over every line in the file object created by the open() method.
To filter out lines that do not match, get_matches() includes an if clause in its list comprehension.
The if clauses in list comprehensions always go after for clauses.
We will use get_matches() to extract lines that include the number of rows and columns in each dataset description.


Add an if clause to the list comprehension in get_matches() that will remove lines that do not match from the final list of lines.
Use a second list comprehension to search for the string "Number of" in every file in the filenames variable from the previous exercise.

def get_matches(filename, query):
    # Filter the list comprehension using an if clause
    return [line for line in Path(filename).open() if query in line]

# Iterate over files to find all matching lines
matches = [get_matches(name, "Number of") for name in filenames]
pprint(matches)


<script.py> output:
    [['  :Number of Instances: 442\n',
      '  :Number of Attributes: First 10 columns are numeric predictive values\n'],
     ['    :Number of Instances: 506 \n',
      '    :Number of Attributes: 13 numeric/categorical predictive. Median Value '
      '(attribute 14) is usually the target.\n'],
     ['    :Number of Instances: 5620\n', '    :Number of Attributes: 64\n'],
     ['    :Number of Instances: 150 (50 in each of three classes)\n',
      '    :Number of Attributes: 4 numeric, predictive attributes and the '
      'class\n'],
     ['    :Number of Instances: 178 (50 in each of three classes)\n',
      '    :Number of Attributes: 13 numeric, predictive attributes and the '
      'class\n']]


Magnificent matching! In this second coding exercise, we learned how to include an if clause in our list comprehensions. Next, we will extract numbers from the strings we obtained.

